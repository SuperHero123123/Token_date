/**
 *Submitted for verification at BscScan.com on 2022-02-18
*/

pragma solidity ^0.8.6;

// SPDX-License-Identifier: Unlicensed
interface IERC20 {
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract Ownable {
    address public _owner;
    
    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function changeOwner(address newOwner) public onlyOwner {
        _owner = newOwner;
    }

}

library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

contract Util {

    function toWei(uint256 price, uint decimals) public pure returns (uint256){
        uint256 amount = price * (10 ** uint256(decimals));
        return amount;
    }

    function mathDivisionToFloat(uint256 a, uint256 b, uint decimals) public pure returns (uint256) {
        uint256 aPlus = a * (10 ** uint256(decimals));
        uint256 amount = aPlus / b;
        return amount;
    }

}

abstract contract ERC20 {
    function transferFrom(address _from, address _to, uint256 _value) external virtual returns (bool success);
    function transfer(address recipient, uint256 amount) external virtual returns (bool);
    function balanceOf(address account) external virtual view returns (uint256);
    function approve(address spender, uint256 amount) external virtual returns (bool);
}

abstract contract ChaseHighAward {
    function getPoolAmount() external virtual view returns (uint256);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
    external
    returns (address pair);
}

interface IUniswapV2Router02 {

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function factory() external view returns (address);

}

contract StarToken is IERC20, Ownable, Util {

    using SafeMath for uint256;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    uint256 private _totalSupply;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => uint256) private lastPurchaseTime;
    uint private shortestTradingTime; // second

    mapping(address => address) private inviter;
    address public swapRouter;

    uint256 private lpPoolRatio;
    uint256 private fmPoolRatio;
    uint256 private marketingBuyRatio;
    uint256 private marketingSellRatio;
    uint256 private fundRatio;
    uint256 private holdAwardRatio;
    uint256 private destroyRatio;
    uint256 private ecologyRatio;

    address private lpPoolAddress;
    address private lpTeamPoolAddress;
    address private fmPoolAddress;
    address private marketingAddress;
    address private fundAddress;
    address private holdAwardAddress;
    address private holdAwardTeamAddress;
    address private destroyAddress;
    address private autoDestroyAddress;
    address private ecologyOneAddress;
    address private ecologyTwoAddress;

    uint256 public highestPrice;

    uint256 public fmPoolBalance;
    uint256 public holdAwardBalance;
    uint256 public lpTeamPoolBalance;

    mapping(uint256 => mapping(address => uint256)) private purchaseRecord;

    IUniswapV2Router02 public immutable uniswapV2Router;
    ERC20 private usdtToken;
    ERC20 private wbnbToken;
    
    constructor() {

        _name = "Star";
        _symbol = "Star";
        _decimals = 18;

        _totalSupply = 88000 * 10 ** uint(_decimals);
		
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _balances[msg.sender]);
        
        _isExcludedFromFee[msg.sender] = true;
        _isExcludedFromFee[address(this)] = true;
        _owner = msg.sender;
        shortestTradingTime = 0;

        lpPoolAddress = 0x65F5fbB3a12DB3106a711B34b29Ea17B4202541b;
        lpTeamPoolAddress = 0x91dF21656FB2169E669686BEE45E4800679cC2Bd;
        fmPoolAddress = 0xf59a1e7D62d52256EB7E2ac423E1eF8B6a1399BA;
        holdAwardAddress = 0xCE335e58c2dF9A25D9449879917f5c6abc3E5dDB;
        holdAwardTeamAddress = 0x1B00502eB504778d0bca6714B8B1C301Fe599794;
        autoDestroyAddress = 0x5593057f3A95A773EF40fCC9E4fA09c90CC341ef;
        destroyAddress = 0x000000000000000000000000000000000000dEaD;
        ecologyOneAddress = 0xcb9721042ac39f0cD103A1457656B6EFe69A2C82;
        ecologyTwoAddress = 0x15b0F33cE6682db149ae0bB629DF8a57DD842D23;
        
        usdtToken = ERC20(0x55d398326f99059fF775485246999027B3197955);
        wbnbToken = ERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        swapRouter = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), address(wbnbToken));
        uniswapV2Router = _uniswapV2Router;

        lpPoolRatio = 15;
        fmPoolRatio = 20;
        marketingBuyRatio = 5;
        marketingSellRatio = 15;
        fundRatio = 5;
        holdAwardRatio = 10;
        destroyRatio = 10;
        ecologyRatio = 15;

    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address _address) public view override returns (uint256) {
        return _balances[_address];
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {

		_transfer(sender, recipient, amount);
		
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            _allowances[msg.sender][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }
    
    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function claimTokens() public onlyOwner {
        payable(_owner).transfer(address(this).balance);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    //this method is responsible for taking all fee, if takeFee is true
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        if(sender != swapRouter && recipient != swapRouter && inviter[recipient] == address(0)) {
            inviter[recipient] = sender;
        }

        if(sender == swapRouter && !_isExcludedFromFee[recipient]) {
            // buy
            lastPurchaseTime[recipient] = block.timestamp;

            purchaseRecord[block.number][recipient] = queryStarToBnbPrice();

            transferSlippage(sender, recipient, amount, 1);

            updateHighestPrice();

        } else if(recipient == swapRouter && !_isExcludedFromFee[sender]) {
            // sell
            require(block.timestamp - lastPurchaseTime[sender] >= shortestTradingTime, "Frequent operation");
            
            autoTrade();

            transferSlippage(sender, recipient, amount, 2);

            updateHighestPrice();
            
        } else {
            _balances[sender] = _balances[sender].sub(amount);
            _balances[recipient] = _balances[recipient].add(amount);
            emit Transfer(sender, recipient, amount);
        }
        
    }

    function excludeFromFee(address _address) public onlyOwner {
        _isExcludedFromFee[_address] = true;
    }

    function includeInFee(address _address) public onlyOwner {
        _isExcludedFromFee[_address] = false;
    }

    function isExcludedFromFee(address _address) public view returns (bool) {
        return _isExcludedFromFee[_address];
    }

    function changeRouter(address router) public onlyOwner {
        swapRouter = router;
        updateHighestPrice();
    }

    function setShortestTradingTime(uint _time) public onlyOwner {
        shortestTradingTime = _time;
    }

    function getInviter(address _address) public view returns (address) {
        return inviter[_address];
    }

    // 1 Star = ? BNB
    function queryStarToBnbPrice() public view returns (uint256) {
        uint256 reserveA = _balances[swapRouter];
        uint256 reserveB = wbnbToken.balanceOf(swapRouter);
        return Util.mathDivisionToFloat(reserveB, reserveA, 18);
    }

    function updateHighestPrice() private {
        uint256 bnbToStarPrice = queryStarToBnbPrice(); // unit256: wei
        if(bnbToStarPrice > highestPrice) {
            highestPrice = bnbToStarPrice;   
        }
    }

    function transferSlippage(address sender, address recipient, uint256 amount, uint8 transferType) private {

        uint256 normalAmount = normalSlippage(sender, amount);

        uint256 slippageAmount = 0;
        if(transferType == 1) {

            uint256 marketingAmount = amount.mul(marketingBuyRatio).div(1000);
            _balances[marketingAddress] = _balances[marketingAddress].add(marketingAmount);
            emit Transfer(sender, marketingAddress, marketingAmount);

            slippageAmount = normalAmount.add(marketingAmount);
        } else {

            uint256 marketingAmount = amount.mul(marketingSellRatio).div(1000);
            _balances[marketingAddress] = _balances[marketingAddress].add(marketingAmount);
            emit Transfer(sender, marketingAddress, marketingAmount);

            uint256 destroyAmount = amount.mul(destroyRatio).div(1000);
            if(_balances[destroyAddress].add(destroyAmount) <= toWei(79200, 18)) {
                _balances[destroyAddress] = _balances[destroyAddress].add(destroyAmount);
                emit Transfer(sender, destroyAddress, destroyAmount);
            } else {
                destroyAmount = 0;
            }

            slippageAmount = normalAmount.add(marketingAmount).add(destroyAmount);

            uint256 bnbToStarPrice = queryStarToBnbPrice(); // unit256: wei
            if(bnbToStarPrice < highestPrice) {
                
                uint256 fallPercent = toWei((highestPrice.sub(bnbToStarPrice)), 18).div(highestPrice).mul(100);
                
                uint256 increaseAmount = 0;
                if(fallPercent > toWei(20, 18)) {
                    increaseAmount = amount.mul(190).div(1000);
                } else if(fallPercent > toWei(10, 18)) {
                    increaseAmount = amount.mul(90).div(1000);
                }
                
                if(increaseAmount > 0) {
                    slippageAmount = slippageAmount.add(increaseAmount);

                    uint256 tempAmount = increaseAmount.mul(500).div(1000);
                    _balances[address(this)] = _balances[address(this)].add(tempAmount);
                    fmPoolBalance = fmPoolBalance.add(tempAmount);
                    emit Transfer(sender, address(this), tempAmount);

                    tempAmount = increaseAmount.mul(300).div(1000);
                    _balances[address(this)] = _balances[address(this)].add(tempAmount);
                    holdAwardBalance = holdAwardBalance.add(tempAmount);
                    emit Transfer(sender, address(this), tempAmount); 

                    tempAmount = increaseAmount.mul(200).div(1000);
                    _balances[autoDestroyAddress] = _balances[autoDestroyAddress].add(tempAmount);
                    emit Transfer(sender, autoDestroyAddress, tempAmount);

                }
                
                
            }
            
        }

        _balances[sender] = _balances[sender].sub(amount);
        _balances[recipient] = _balances[recipient].add(amount.sub(slippageAmount));
        emit Transfer(sender, recipient, amount.sub(slippageAmount));
    }

    function normalSlippage(address sender, uint256 amount) private returns (uint256) {
        
        uint256 lpPoolAmount = amount.mul(lpPoolRatio).div(1000);
        uint256 fmPoolAmount = amount.mul(fmPoolRatio).div(1000);
        uint256 fundAmount = amount.mul(fundRatio).div(1000);
        uint256 holdAwardAmount = amount.mul(holdAwardRatio).div(1000);
        uint256 ecologyAmount = amount.mul(ecologyRatio).div(1000);

        _balances[lpPoolAddress] = _balances[lpPoolAddress].add(lpPoolAmount);
        _balances[address(this)] = _balances[address(this)].add(fmPoolAmount);
        _balances[fundAddress] = _balances[fundAddress].add(fundAmount);
        _balances[address(this)] = _balances[address(this)].add(holdAwardAmount);

        _balances[ecologyOneAddress] = _balances[ecologyOneAddress].add(ecologyAmount.div(2));
        _balances[ecologyTwoAddress] = _balances[ecologyTwoAddress].add(ecologyAmount.div(2));

        fmPoolBalance = fmPoolBalance.add(fmPoolAmount);
        holdAwardBalance = holdAwardBalance.add(holdAwardAmount);
        
        emit Transfer(sender, lpPoolAddress, lpPoolAmount);
        emit Transfer(sender, address(this), fmPoolAmount);
        emit Transfer(sender, fundAddress, fundAmount);
        emit Transfer(sender, address(this), holdAwardAmount);
        emit Transfer(sender, ecologyOneAddress, ecologyAmount.div(2));
        emit Transfer(sender, ecologyTwoAddress, ecologyAmount.div(2));

        return lpPoolAmount.add(fmPoolAmount).add(fundAmount).add(holdAwardAmount).add(ecologyAmount);
    }

    function autoTrade() private {
        
        if(fmPoolBalance >= toWei(30, 18)) {
            uint256 fmAmount = ChaseHighAward(fmPoolAddress).getPoolAmount();
            if(fmAmount < toWei(500000, 18)) {
                swapThisToUsdt(fmPoolBalance, fmPoolAddress);
            } else {
                swapThisToUsdt(fmPoolBalance, address(this));
                lpTeamPoolBalance = lpTeamPoolBalance.add(usdtToken.balanceOf(address(this)));
            }
            
            fmPoolBalance = 0;
        }

        if(holdAwardBalance >= toWei(20, 18)) {
            swapThisToBnb(holdAwardBalance.div(2), holdAwardAddress);
            swapThisToBnb(holdAwardBalance.div(2), holdAwardTeamAddress);
            holdAwardBalance = 0;
        }
        
        if(lpTeamPoolBalance >= toWei(20, 18)) {
            swapUsdtToThis(lpTeamPoolBalance, lpTeamPoolAddress);
            lpTeamPoolBalance = 0;
        }

    }

    function swapThisToUsdt(uint256 tokenAmount, address to) private {

        if(tokenAmount > 0) {
            address[] memory path = new address[](3);
            path[0] = address(this);
            path[1] = address(wbnbToken);
            path[2] = address(usdtToken);

            _approve(address(this), address(uniswapV2Router), tokenAmount);

            // make the swap
            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                tokenAmount,
                0,
                path,
                to,
                block.timestamp
            );
        }
        
    }

    function swapThisToBnb(uint256 tokenAmount, address to) private {

        if(tokenAmount > 0) {
            address[] memory path = new address[](2);
            path[0] = address(this);
            path[1] = address(wbnbToken);

            _approve(address(this), address(uniswapV2Router), tokenAmount);

            // make the swap
            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                tokenAmount,
                0,
                path,
                to,
                block.timestamp
            );
        }
        
    }

    function swapUsdtToThis(uint256 tokenAmount, address to) private {
        if(tokenAmount > 0) {
            address[] memory path = new address[](3);
            path[0] = address(usdtToken);
            path[1] = address(wbnbToken);
            path[2] = address(this);

            usdtToken.approve(address(uniswapV2Router), tokenAmount);

            // make the swap
            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                tokenAmount,
                0,
                path,
                to,
                block.timestamp
            );
        }
        
    }

    function getPurchaseRecord(uint256 _number, address _address) public view returns (uint256 price) {
        price = purchaseRecord[_number][_address];
    }

    function getSellSlippage() public view returns (uint256) {
        uint256 bnbToStarPrice = queryStarToBnbPrice();
        if(bnbToStarPrice < highestPrice) {
            uint256 fallPercent = toWei((highestPrice.sub(bnbToStarPrice)), 18).div(highestPrice).mul(100);     
            if(fallPercent > toWei(20, 18)) {
                return toWei(28, 18);
            } else if(fallPercent > toWei(10, 18)) {
                return toWei(18, 18);
            }
        }
        return toWei(9, 18);
    }

    function setLpPoolAddress(address _address) public onlyOwner {
        lpPoolAddress = _address;
    }

    function setLpTeamPoolAddress(address _address) public onlyOwner {
        lpTeamPoolAddress = _address;
    }

    function setFmPoolAddress(address _address) public onlyOwner {
        fmPoolAddress = _address;
    }

    function setMarketingAddress(address _address) public onlyOwner {
        marketingAddress = _address;
    }

    function setFundAddress(address _address) public onlyOwner {
        fundAddress = _address;
    }

    function setholdAwardAddress(address _address) public onlyOwner {
        holdAwardAddress = _address;
    }

    function setholdAwardTeamAddress(address _address) public onlyOwner {
        holdAwardTeamAddress = _address;
    }

    function setAutoDestroyAddress(address _address) public onlyOwner {
        autoDestroyAddress = _address;
    }

    function setUsdtToken(address _token) public onlyOwner {
        usdtToken = ERC20(_token);
    }

}