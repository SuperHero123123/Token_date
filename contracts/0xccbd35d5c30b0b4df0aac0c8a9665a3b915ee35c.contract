{{
  "language": "Solidity",
  "sources": {
    "contracts/DogeChoco.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./interfaces/IRouterV2.sol\";\r\nimport \"./interfaces/IFactoryV2.sol\";\r\nimport \"./interfaces/IPinkAntiBot.sol\";\r\n\r\n/**\r\n * @title DogeChoco\r\n * @notice Dogechoco is the first technological startup that recovers cocoa as a payment currency as in pre-Hispanic times and tokenizes the food of the future \r\n * with the Crypto Chocolates of mass consumption with a blockchain ecosystem to allocate part of the profits generated by the sales of real products to build \r\n * Ethereum validation and cryptocurrency mining facilities to repurchase and burn the native token on a permanent and recurring basis, introducing capital to\r\n * liquidity like no one had proposed before in history. It will also open franchises in the main tourist capitals where it can sell and consume its crypto chocolates.\r\n * The Chocoverse of the Metaverse is Dogechoco's proposal to revolutionize the global food trade by uniting artisans in decentralized lands with their factories,\r\n * museums, shops, permanent fairs and all the opportunities of the new parallel reality that the adorable puppy is creating. of the food community of the future\r\n * that will also participate in the GameFi and animation industry. Let's make history together in community with Dogechoco! Dogechoco Army!.\r\n */\r\ncontract DogeChoco is ERC20, ERC20Burnable, Ownable {\r\n    //---------- Contracts ----------//\r\n    IRouterV2 public ammRouter; // DEX router contract.\r\n    IPinkAntiBot public pinkAntiBot; // Antibot contract.\r\n\r\n    //---------- Variables ----------//\r\n    address public lpPair; // Pair that contains the liquidity for the taxSwap.\r\n    address payable public treasury; // Address that manages the funds for betting.\r\n    uint256 public constant sellTax = 10; // 10% tax on sell.\r\n    uint256 public constant txTax = 1; // 1% tax on transfer.\r\n    bool public hasLiquidity; // Flag to check if you already have liquidity.\r\n    bool public antiBotEnabled; // Flag to check if antibot feature is enabled.\r\n    bool private onSwap; // Flag to check if on swap tax tokens.\r\n\r\n    //---------- Storage -----------//\r\n    mapping(address => bool) private _lpPairs; // Contains the liquidity pairs of the token.\r\n    mapping(address => bool) private _isExcluded; // Contains the addresses excluded from the sell tax.\r\n\r\n    //---------- Events -----------//\r\n    event ModifiedExclusion(address account, bool enabled);\r\n    event ModifiedPair(address pair, bool enabled);\r\n    event NewTreasury(address newTreasury);\r\n    event NewRouter(address newRouter, address lpPair);\r\n\r\n    //---------- Constructor ----------//\r\n    constructor(IRouterV2 _ammRouter, IPinkAntiBot _antibot)\r\n        ERC20(\"DOGECHOCO\", \"DOGECHOCO\")\r\n    {\r\n        _mint(msg.sender, 165_000_000 * 10**decimals());\r\n        ammRouter = _ammRouter;\r\n        pinkAntiBot = _antibot;\r\n        lpPair = IFactoryV2(ammRouter.factory()).createPair(\r\n            ammRouter.WETH(),\r\n            address(this)\r\n        );\r\n        _lpPairs[lpPair] = true;\r\n        _isExcluded[msg.sender] = true;\r\n        _isExcluded[address(this)] = true;\r\n        treasury = payable(msg.sender);\r\n        hasLiquidity = false;\r\n        pinkAntiBot.setTokenOwner(msg.sender);\r\n        antiBotEnabled = true;\r\n    }\r\n\r\n    //---------- Modifiers ----------//\r\n    /**\r\n     * @dev Modify the status of the boolean onSwap for checks in the transfer.\r\n     */\r\n    modifier swapLocker() {\r\n        onSwap = true;\r\n        _;\r\n        onSwap = false;\r\n    }\r\n\r\n    //----------- Internal Functions -----------//\r\n    /**\r\n     * @dev Swap the sell tax and send it to the treasury.\r\n     * @param amount of tokens to swap.\r\n     */\r\n    function _taxSwap(uint256 amount) internal swapLocker {\r\n        if (allowance(address(this), address(ammRouter)) != type(uint256).max) {\r\n            _approve(address(this), address(ammRouter), type(uint256).max);\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = ammRouter.WETH();\r\n\r\n        try\r\n            ammRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                amount,\r\n                0,\r\n                path,\r\n                treasury,\r\n                block.timestamp\r\n            )\r\n        {} catch {\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check if the pair has liquidity.\r\n     */\r\n    function _checkLiquidity() internal {\r\n        require(!hasLiquidity, \"Already have liquidity\");\r\n        if (balanceOf(lpPair) > 0) {\r\n            hasLiquidity = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Override the internal transfer function to apply the sell tax and distribute it.\r\n     * @param sender address of origin.\r\n     * @param recipient destination address.\r\n     * @param amount tokens to transfer.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        require(\r\n            sender != address(0x0),\r\n            \"ERC20: transfer from the zero address\"\r\n        );\r\n        require(\r\n            recipient != address(0x0),\r\n            \"ERC20: transfer to the zero address\"\r\n        );\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if (antiBotEnabled) {\r\n            pinkAntiBot.onPreTransferCheck(sender, recipient, amount);\r\n        }\r\n\r\n        if (!hasLiquidity) {\r\n            _checkLiquidity();\r\n        }\r\n\r\n        if (!onSwap) {\r\n            if (hasLiquidity) {\r\n                uint256 balance = balanceOf(address(this));\r\n                if (balance > 0) {\r\n                    _taxSwap(balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        // check whitelist\r\n        bool excluded = _isExcluded[sender] || _isExcluded[recipient];\r\n        bool buy = _lpPairs[sender];\r\n        bool sell = _lpPairs[recipient];\r\n\r\n        if (excluded) {\r\n            super._transfer(sender, recipient, amount);\r\n        } else {\r\n            if (sell) {\r\n                // sell tax amount\r\n                uint256 taxAmount = (amount * sellTax) / 100;\r\n\r\n                // tax transfer sent to this contract\r\n                super._transfer(sender, address(this), taxAmount);\r\n                // default transfer sent to recipient\r\n                super._transfer(sender, recipient, amount - taxAmount);\r\n            } else if (buy) {\r\n                super._transfer(sender, recipient, amount);\r\n            } else {\r\n                // tx tax amount\r\n                uint256 taxAmount = (amount * txTax) / 100;\r\n                // burn tx tax\r\n                _burn(sender, taxAmount);\r\n                // default transfer sent to recipient\r\n                super._transfer(sender, recipient, amount - taxAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    //----------- External Functions -----------//\r\n    /**\r\n     * @notice Forward the ETH to the treasury address.\r\n     */\r\n    receive() external payable {\r\n        uint256 amount = msg.value;\r\n        (bool success, ) = treasury.call{value: amount, gas: 35000}(\"\");\r\n        require(success);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if a address is excluded from tax.\r\n     * @param account address to check.\r\n     * @return Boolean if excluded or not.\r\n     */\r\n    function isExcluded(address account) external view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Check if a pair address is on list.\r\n     * @param pair address to check.\r\n     * @return Boolean if on list or not.\r\n     */\r\n    function isLpPair(address pair) external view returns (bool) {\r\n        return _lpPairs[pair];\r\n    }\r\n\r\n    //----------- Owner Functions -----------//\r\n    /**\r\n     * @notice Set address in exclude list.\r\n     * @param account address to set.\r\n     * @param enabled boolean to enable or disable.\r\n     */\r\n    function setExcluded(address account, bool enabled) external onlyOwner {\r\n        require(account != address(0x0), \"Invalid address\");\r\n        _isExcluded[account] = enabled;\r\n        emit ModifiedExclusion(account, enabled);\r\n    }\r\n\r\n    /**\r\n     * @notice Set address in pairs list.\r\n     * @param pair address to set.\r\n     * @param enabled boolean to enable or disable.\r\n     */\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        require(pair != address(0x0), \"Invalid pair\");\r\n        _lpPairs[pair] = enabled;\r\n        emit ModifiedPair(pair, enabled);\r\n    }\r\n\r\n    /**\r\n     * @notice Change the trasury address.\r\n     * @param newTreasury address to set.\r\n     */\r\n    function setTreasury(address newTreasury) external onlyOwner {\r\n        require(newTreasury != address(0x0), \"Invalid address\");\r\n        treasury = payable(newTreasury);\r\n        emit NewTreasury(newTreasury);\r\n    }\r\n\r\n    /**\r\n     * @notice Enable or disabled antibot feature.\r\n     * @param enable boolean to enable or disable.\r\n     */\r\n    function setEnableAntiBot(bool enable) external onlyOwner {\r\n        antiBotEnabled = enable;\r\n    }\r\n\r\n    /**\r\n     * @notice Change the dex router address before having liquidity.\r\n     * @param newRouter address to set.\r\n     */\r\n    function setAMMRouter(address newRouter) external onlyOwner {\r\n        require(newRouter != address(0x0), \"Invalid router\");\r\n        require(!hasLiquidity, \"Already have liquidity\");\r\n        IRouterV2 router = IRouterV2(newRouter);\r\n        address newPair = IFactoryV2(router.factory()).getPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n        if (newPair == address(0x0)) {\r\n            lpPair = IFactoryV2(router.factory()).createPair(\r\n                address(this),\r\n                router.WETH()\r\n            );\r\n        } else {\r\n            lpPair = newPair;\r\n        }\r\n        ammRouter = router;\r\n        _approve(address(this), address(ammRouter), type(uint256).max);\r\n        emit NewRouter(newRouter, lpPair);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn tokens of sell tax.\r\n     * @param amount to burn.\r\n     */\r\n    function burnTax(uint256 amount) external onlyOwner {\r\n        uint256 balance = balanceOf(address(this));\r\n        require(amount > 0 && balance > 0, \"Zero amount\");\r\n        uint256 toBurn = amount > balance ? balance : amount;\r\n        _burn(address(this), toBurn);\r\n    }\r\n\r\n    /**\r\n     * @notice Swap tokens of sell tax.\r\n     * @param amount to swap.\r\n     */\r\n    function swapTax(uint256 amount) external onlyOwner {\r\n        uint256 balance = balanceOf(address(this));\r\n        require(amount > 0 && balance > 0, \"Zero amount\");\r\n        uint256 toSwap = amount > balance ? balance : amount;\r\n        _taxSwap(toSwap);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IRouterV2 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n"
    },
    "contracts/interfaces/IFactoryV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address lpPair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address lpPair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address lpPair);\r\n}\r\n"
    },
    "contracts/interfaces/IPinkAntiBot.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPinkAntiBot {\r\n    function setTokenOwner(address owner) external;\r\n\r\n    function onPreTransferCheck(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "metadata": {
      "bytecodeHash": "none"
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}