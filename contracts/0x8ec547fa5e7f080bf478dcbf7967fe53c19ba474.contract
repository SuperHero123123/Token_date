{{
  "language": "Solidity",
  "sources": {
    "contracts/N3.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nimport \"./interfaces/IPancakePair.sol\";\r\nimport \"./interfaces/IPancakeFactory.sol\";\r\nimport \"./interfaces/IPancakeRouter.sol\";\r\n\r\nimport \"./interfaces/IN3.sol\";\r\nimport \"./interfaces/INEOMASSNFT.sol\";\r\nimport \"./interfaces/IFomo.sol\";\r\nimport \"./interfaces/IReferral.sol\";\r\n\r\ncontract N3 is IN3, Context, IERC20, IERC20Metadata, Ownable {\r\n    ///////////////////////////////////////////////////////////\r\n    ////// @openzeppelin/contracts/token/ERC20/ERC20.sol //////\r\n    ///////////////////////////////////////////////////////////\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    // constructor(string memory name_, string memory symbol_) {\r\n    //     _name = name_;\r\n    //     _symbol = symbol_;\r\n    // }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override(IN3, IERC20) returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    // function _transfer(\r\n    //     address sender,\r\n    //     address recipient,\r\n    //     uint256 amount\r\n    // ) internal virtual {\r\n    //     require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n    //     require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n    //     _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n    //     uint256 senderBalance = _balances[sender];\r\n    //     require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n    //     unchecked {\r\n    //         _balances[sender] = senderBalance - amount;\r\n    //     }\r\n    //     _balances[recipient] += amount;\r\n\r\n    //     emit Transfer(sender, recipient, amount);\r\n\r\n    //     _afterTokenTransfer(sender, recipient, amount);\r\n    // }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    ///////////////////////////////////////////////////////////\r\n    ////////////////////////// N3 ///////////////////////////\r\n    ///////////////////////////////////////////////////////////\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    bool private _paused;\r\n    mapping(address => bool) public operators;\r\n\r\n    IERC20 public quoteToken;\r\n    IPancakeRouter public router;\r\n    IPancakePair public pair;\r\n\r\n    bool private _whitelistLpLock = true; // only the wallets in whitelist can add/remove LP\r\n    bool private _whitelistBuyLock = true; // only the wallets in whitelist can buy from LP\r\n    mapping(address => bool) private _swapWhitelist;\r\n\r\n    // price protection config\r\n    uint256 public taxPriceProtection = 500; // ‱ additional sell tax to fomo for price protection\r\n    uint256 public priceProtectionRate = 2000; // ‱ rate, price protection turn on if daily price drop rate > this value\r\n    uint256 public todayTimeIndex; // Today's timestamp / (24*60*60)\r\n    uint256 public todayOpenPrice; // Today's open price, 1e18 units N3 = how many units quote token\r\n\r\n    address public addressTreasury; // address tax to treasury\r\n    address public addressGloryNFT; // address tax to gloryNFT\r\n    address public addressCompensationNFT; // address tax to compensationNFT\r\n    address public addressNFT; // address tax to NFT\r\n    address public addressFomo; // address tax to fomo\r\n    address public addressReferral; // address tax to referral\r\n    address public addressNewToken; // address tax to new token\r\n\r\n    uint256 public taxTreasury = 100; // ‱ tax to treasury\r\n    uint256 public taxGloryNFT = 100; // ‱ tax to gloryNFT\r\n    uint256 public taxCompensationNFT = 100; // ‱ tax to NFT\r\n    uint256 public taxNFT = 200; // ‱ tax to NFT\r\n    uint256 public taxFomo = 300; // ‱ tax to fomo\r\n    uint256 public override taxReferral = 100; // ‱ tax to referral\r\n    uint256 public taxNewToken = 100; // ‱ tax to new token\r\n\r\n    struct taxValue {\r\n        uint256 _amountTreasury;\r\n        uint256 _amountGloryNFT;\r\n        uint256 _amountCompensationNFT;\r\n        uint256 _amountNFT;\r\n        uint256 _amountFomo;\r\n        uint256 _amountReferral;\r\n        uint256 _amountNewToken;\r\n    }\r\n\r\n    mapping (address => bool) public automatedMarketMakerPairs;  //\r\n    mapping(address => bool) public isTaxExcluded;\r\n    mapping(uint256 => bool) public isTaxTransferTypeExcluded;\r\n\r\n    bool private _inProgressLp;\r\n\r\n    constructor() {\r\n        _paused = false;\r\n        \r\n        _name = \"N3\";\r\n        _symbol = \"N3\";\r\n\r\n        operators[msg.sender] = true;\r\n        _mint(msg.sender, 10000 * 10000 * 10**18);\r\n\r\n        isTaxTransferTypeExcluded[3] = true;\r\n        isTaxTransferTypeExcluded[4] = true;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender], \"Operator: caller is not the operator\");\r\n        _;\r\n    }\r\n\r\n    modifier lockLp() {\r\n        _inProgressLp = true;\r\n        _;\r\n        _inProgressLp = false;\r\n    }\r\n\r\n    function initData() public onlyOwner {\r\n        //setRouter\r\n        //setOperators\r\n        //selfApprove\r\n        //setPriceProtection\r\n        //setTaxAddress\r\n        //setTaxRate\r\n        //setTaxExcludeds\r\n        //setTaxTransferTypeExcludeds\r\n\r\n        //setWhitelistLock\r\n    }\r\n\r\n    function setPaused(bool paused_) public onlyOwner {\r\n        _paused = paused_;\r\n    }\r\n\r\n    function setOperator(address _operator, bool _enabled) public onlyOwner {\r\n        operators[_operator] = _enabled;\r\n    }\r\n\r\n    function setOperators(address[] memory _operators, bool _enabled) public onlyOwner {\r\n        for (uint256 i = 0; i < _operators.length; i++) {\r\n            operators[_operators[i]] = _enabled;\r\n        }\r\n    }\r\n\r\n    function setNameAndSymbol(string memory name_, string memory symbol_) public onlyOwner {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function setRouter(IERC20 _quoteToken, IPancakeRouter _router) public onlyOwner {\r\n        quoteToken = _quoteToken;\r\n        router = _router;\r\n        address _pair = IPancakeFactory(_router.factory()).createPair(address(_quoteToken), address(this));\r\n        pair = IPancakePair(_pair);\r\n\r\n        automatedMarketMakerPairs[_pair] = true;\r\n    }\r\n\r\n    function setWhitelistLock(bool _lpLock, bool _buyLock) public onlyOwner {\r\n        _whitelistLpLock = _lpLock;\r\n        _whitelistBuyLock = _buyLock;\r\n    }\r\n\r\n    function setSwapAndLpWhitelist(address[] memory _users, bool _enabled) public onlyOwner {\r\n        uint256 _len = _users.length;\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            _swapWhitelist[_users[i]] = _enabled;\r\n        }\r\n    }\r\n\r\n    function setPriceProtection(uint256 _taxPriceProtection, uint256 _priceProtectionRate) public onlyOwner {\r\n        taxPriceProtection = _taxPriceProtection;\r\n        priceProtectionRate = _priceProtectionRate;\r\n    }\r\n\r\n    function setTaxAddress(\r\n        address _treasury,\r\n        address _glorynft,\r\n        address _compensationft,\r\n        address _nft,\r\n        address _fomo,\r\n        address _referral,\r\n        address _newToken\r\n    ) public onlyOwner {\r\n        addressTreasury = _treasury;\r\n        addressGloryNFT = _glorynft;\r\n        addressCompensationNFT = _compensationft;\r\n        addressNFT = _nft;\r\n        addressFomo = _fomo;\r\n        addressReferral = _referral;\r\n        addressNewToken = _newToken;\r\n    }\r\n\r\n    function setTaxRate(\r\n        uint256 _treasury,\r\n        uint256 _glorynft,\r\n        uint256 _compensationnft,\r\n        uint256 _nft,\r\n        uint256 _fomo,\r\n        uint256 _referral,\r\n        uint256 _newToken\r\n    ) public onlyOwner {\r\n        taxTreasury = _treasury;\r\n        taxGloryNFT = _glorynft;\r\n        taxCompensationNFT = _compensationnft;\r\n        taxNFT = _nft;\r\n        taxFomo = _fomo;\r\n        taxReferral = _referral;\r\n        taxNewToken = _newToken;\r\n    }\r\n\r\n    function setTaxExcluded(address _user, bool _enabled) public onlyOwner {\r\n        isTaxExcluded[_user] = _enabled;\r\n    }\r\n\r\n    function setTaxExcludeds(address[] memory _users, bool _enabled) public onlyOwner {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            isTaxExcluded[_users[i]] = _enabled;\r\n        }\r\n    }\r\n\r\n    function setTaxTransferTypeExcluded(uint256 _transferType, bool _enabled) public onlyOwner {\r\n        isTaxTransferTypeExcluded[_transferType] = _enabled;\r\n    }\r\n\r\n    function setTaxTransferTypeExcludeds(uint256[] memory _transferTypes, bool _enabled) public onlyOwner {\r\n        for (uint256 i = 0; i < _transferTypes.length; i++) {\r\n            isTaxTransferTypeExcluded[_transferTypes[i]] = _enabled;\r\n        }\r\n    }\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        automatedMarketMakerPairs[pair] = value;\r\n    }\r\n\r\n    function selfApprove(\r\n        IERC20 _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        _token.approve(_spender, _amount);\r\n    }\r\n\r\n    function _isLp(address _addr) internal view returns (bool) {\r\n        return automatedMarketMakerPairs[_addr];\r\n    }\r\n\r\n    // 0: normal transfer\r\n    // 1: buy from official LP\r\n    // 2: sell to official LP\r\n    // 3: add official LP\r\n    // 4: remove official LP\r\n    function _getTransferType(address _from, address _to) internal view returns (uint256) {\r\n        if (_isLp(_from) && !_isLp(_to)) {\r\n            return _inProgressLp ? 4 : 1;\r\n        }\r\n\r\n        if (!_isLp(_from) && _isLp(_to)) {\r\n            return _inProgressLp ? 3 : 2;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function _rawTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal virtual {\r\n        if (_amount == 0) {\r\n            return;\r\n        }\r\n\r\n        require(!_paused, \"ERC20Pausable: token transfer while paused\");\r\n        require(_from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(_from, _to, _amount);\r\n\r\n        uint256 senderBalance = _balances[_from];\r\n        require(senderBalance >= _amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[_from] = senderBalance - _amount;\r\n        }\r\n        _balances[_to] += _amount;\r\n\r\n        emit Transfer(_from, _to, _amount);\r\n\r\n        _afterTokenTransfer(_from, _to, _amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        updateTodayOpenPrice();\r\n        (bool _isUp, uint256 _changeRate) = getDailyPriceChange();\r\n        uint256 _transferType = _getTransferType(_from, _to);\r\n        \r\n        // buy\r\n        if (_transferType == 1) {\r\n            require(!_whitelistBuyLock || _swapWhitelist[_to], \"N3: forbidden to buy\"); // buy Whitelist lock\r\n        }\r\n\r\n        // sell\r\n        if (_transferType == 2) {\r\n            // only can sell 99% of balance\r\n            uint256 _balance = _balances[_from];\r\n            if (_amount >= _balance) {\r\n                _amount = _balance.mul(99).div(100);\r\n            }\r\n        }\r\n\r\n        // add LP\r\n        if (_transferType == 3) {\r\n            require(!_whitelistLpLock || _swapWhitelist[_from], \"N3: forbidden add LP\"); // LP Whitelist lock\r\n        }\r\n\r\n        // remove LP\r\n        if (_transferType == 4) {\r\n            require(!_whitelistLpLock || _swapWhitelist[_to], \"N3: forbidden remove LP\"); // LP Whitelist lock\r\n        }\r\n  \r\n\r\n\r\n        taxValue memory taxValueVar = taxValue({\r\n            _amountTreasury:0,\r\n            _amountGloryNFT:0,\r\n            _amountCompensationNFT:0,\r\n            _amountNFT:0,\r\n            _amountFomo:0,\r\n            _amountReferral:0,\r\n            _amountNewToken:0\r\n        });\r\n       \r\n        if (\r\n            !isTaxExcluded[_from] &&\r\n            !isTaxTransferTypeExcluded[_transferType] &&\r\n            !(_transferType == 1 && isTaxExcluded[_to]) // buy from lp\r\n        ) {\r\n\r\n            taxValueVar._amountTreasury = _amount.mul(taxTreasury).div(10000);\r\n            taxValueVar._amountGloryNFT = _amount.mul(taxGloryNFT).div(10000);\r\n            taxValueVar._amountCompensationNFT = _amount.mul(taxCompensationNFT).div(10000);\r\n            taxValueVar._amountNFT = _amount.mul(taxNFT).div(10000);\r\n            taxValueVar._amountFomo = _amount.mul(taxFomo).div(10000);\r\n            taxValueVar._amountReferral = _amount.mul(taxReferral).div(10000);\r\n            taxValueVar._amountNewToken = _amount.mul(taxNewToken).div(10000);\r\n\r\n            // additional sell tax if daily price drop rate > 20%\r\n            if (_transferType == 2 && !_isUp && _changeRate > priceProtectionRate) {\r\n                taxValueVar._amountFomo =taxValueVar._amountFomo.add(_amount.mul(taxPriceProtection).div(10000));\r\n            }\r\n\r\n            \r\n        }\r\n\r\n        uint256 amountTax = taxValueVar._amountTreasury + taxValueVar._amountGloryNFT + taxValueVar._amountCompensationNFT + taxValueVar._amountNFT + taxValueVar._amountFomo + taxValueVar._amountReferral + taxValueVar._amountNewToken;\r\n        require(_amount > amountTax, \"transfer amount is too small\");\r\n\r\n        \r\n        _rawTransfer(_from, addressTreasury,        taxValueVar._amountTreasury);\r\n        _rawTransfer(_from, addressGloryNFT,        taxValueVar._amountGloryNFT);\r\n        _rawTransfer(_from, addressCompensationNFT, taxValueVar._amountCompensationNFT);\r\n        _rawTransfer(_from, addressNFT,             taxValueVar._amountNFT);\r\n        _rawTransfer(_from, addressFomo,            taxValueVar._amountFomo);\r\n        _rawTransfer(_from, addressReferral,        taxValueVar._amountReferral);\r\n        _rawTransfer(_from, addressNewToken,        taxValueVar._amountNewToken);\r\n        _rawTransfer(_from, _to, _amount.sub(amountTax));\r\n\r\n        IFomo(addressFomo).onTransfer(_from, _to, _amount, _transferType);\r\n        IReferral(addressReferral).onTransfer(_from, _to, _amount, _transferType);\r\n\r\n        if (taxValueVar._amountGloryNFT > 0) {\r\n            INEOMASSNFT(addressGloryNFT).addReward(taxValueVar._amountGloryNFT);\r\n        }\r\n        if (taxValueVar._amountCompensationNFT > 0) {\r\n            INEOMASSNFT(addressCompensationNFT).addReward(taxValueVar._amountCompensationNFT);\r\n        }\r\n        if (taxValueVar._amountNFT > 0) {\r\n            INEOMASSNFT(addressNFT).addReward(taxValueVar._amountNFT);\r\n        }\r\n        \r\n        if (taxValueVar._amountReferral > 0) {\r\n            // if buy from LP, find referrer by _to/user\r\n            IReferral(addressReferral).addReward(_transferType == 1 ? _to : _from, taxValueVar._amountReferral);\r\n        }\r\n    }\r\n\r\n    function transferNoTax(address _to, uint256 _amount) public override onlyOperator {\r\n        updateTodayOpenPrice();\r\n        _rawTransfer(_msgSender(), _to, _amount);\r\n    }\r\n\r\n    function updateTodayOpenPrice() public {\r\n        uint256 _dayTimeIndex = block.timestamp.div(86400);\r\n        if (_dayTimeIndex <= todayTimeIndex) {\r\n            return;\r\n        }\r\n\r\n        uint256 _price = getPrice();\r\n        if (_price == 0) {\r\n            return;\r\n        }\r\n\r\n        todayTimeIndex = _dayTimeIndex;\r\n        todayOpenPrice = _price;\r\n    }\r\n\r\n    function addLiquidity(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _amountADesired,\r\n        uint256 _amountBDesired,\r\n        uint256 _amountAMin,\r\n        uint256 _amountBMin,\r\n        address _to,\r\n        uint256 _deadline\r\n    ) public lockLp {\r\n        require(_tokenA != _tokenB, \"N3: invalid _tokenA\");\r\n        require(_tokenA == address(this) || _tokenA == address(quoteToken), \"N3: invalid _tokenA\");\r\n        require(_tokenB == address(this) || _tokenB == address(quoteToken), \"N3: invalid _tokenB\");\r\n\r\n        (uint256 _amountMain, uint256 _amountQuote) = _tokenA == address(this)\r\n            ? (_amountADesired, _amountBDesired)\r\n            : (_amountBDesired, _amountADesired);\r\n        (uint256 _amountMainMin, uint256 _amountQuoteMin) = _tokenA == address(this)\r\n            ? (_amountAMin, _amountBMin)\r\n            : (_amountBMin, _amountAMin);\r\n\r\n        _rawTransfer(msg.sender, address(this), _amountMain);\r\n        quoteToken.safeTransferFrom(msg.sender, address(this), _amountQuote);\r\n\r\n        (uint256 _amountMainUsed, uint256 _amountQuoteUsed, ) = router.addLiquidity(\r\n            address(this),\r\n            address(quoteToken),\r\n            _amountMain,\r\n            _amountQuote,\r\n            _amountMainMin,\r\n            _amountQuoteMin,\r\n            _to,\r\n            _deadline\r\n        );\r\n\r\n        _rawTransfer(address(this), msg.sender, _amountMain.sub(_amountMainUsed));\r\n        if (_amountQuote > _amountQuoteUsed) {\r\n            quoteToken.safeTransfer(msg.sender, _amountQuote.sub(_amountQuoteUsed));\r\n        }\r\n    }\r\n\r\n    function removeLiquidity(\r\n        address _tokenA,\r\n        address _tokenB,\r\n        uint256 _liquidity,\r\n        uint256 _amountAMin,\r\n        uint256 _amountBMin,\r\n        address _to,\r\n        uint256 _deadline\r\n    ) public lockLp {\r\n        require(_tokenA != _tokenB, \"N3: invalid _tokenA\");\r\n        require(_tokenA == address(this) || _tokenA == address(quoteToken), \"N3: invalid _tokenA\");\r\n        require(_tokenB == address(this) || _tokenB == address(quoteToken), \"N3: invalid _tokenB\");\r\n\r\n        (uint256 _amountMainMin, uint256 _amountQuoteMin) = _tokenA == address(this)\r\n            ? (_amountAMin, _amountBMin)\r\n            : (_amountBMin, _amountAMin);\r\n\r\n        IERC20 _tokenLp = IERC20(address(pair));\r\n        _tokenLp.safeTransferFrom(msg.sender, address(this), _liquidity);\r\n        router.removeLiquidity(\r\n            address(this),\r\n            address(quoteToken),\r\n            _liquidity,\r\n            _amountMainMin,\r\n            _amountQuoteMin,\r\n            _to,\r\n            _deadline\r\n        );\r\n    }\r\n\r\n    // 1e18 units N3 token = how many units quote token\r\n    function getPrice() public view override returns (uint256) {\r\n        address _token0 = pair.token0();\r\n        (uint256 _reserve0, uint256 _reserve1, ) = pair.getReserves();\r\n        (uint256 _main, uint256 _quote) = address(quoteToken) == _token0\r\n            ? (_reserve1, _reserve0)\r\n            : (_reserve0, _reserve1);\r\n        return _main == 0 ? 0 : _quote.mul(1e18).div(_main);\r\n    }\r\n\r\n    // ‱ change rate, return 1000 means price change 10%\r\n    function getDailyPriceChange() public view returns (bool _isUp, uint256 _changeRate) {\r\n        if (todayOpenPrice == 0) {\r\n            return (_isUp, _changeRate);\r\n        }\r\n\r\n        uint256 _lastPrice = getPrice();\r\n        _isUp = _lastPrice > todayOpenPrice;\r\n        uint256 _change = _isUp ? _lastPrice.sub(todayOpenPrice) : todayOpenPrice.sub(_lastPrice);\r\n        _changeRate = _change.mul(10000).div(todayOpenPrice);\r\n        return (_isUp, _changeRate);\r\n    }\r\n\r\n    // 1e18 units LP token value = how many units quote token\r\n    function getLpPrice() public view override returns (uint256) {\r\n        uint256 _total = pair.totalSupply();\r\n        address _token0 = pair.token0();\r\n        (uint256 _reserve0, uint256 _reserve1, ) = pair.getReserves();\r\n        uint256 _quote = address(quoteToken) == _token0 ? _reserve0 : _reserve1;\r\n        return _total == 0 ? 0 : _quote.mul(2).mul(1e18).div(_total);\r\n    }\r\n\r\n    function getLpAddress() public view override returns (address) {\r\n        return address(pair);\r\n    }\r\n\r\n    function rescue(\r\n        address _token,\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        if (_token == address(0)) {\r\n            (bool success, ) = _to.call{ gas: 23000, value: _amount }(\"\");\r\n            require(success, \"transferETH failed\");\r\n        } else {\r\n            IERC20(_token).safeTransfer(_to, _amount);\r\n        }\r\n    }\r\n}\r\n\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/interfaces/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n"
    },
    "contracts/interfaces/IPancakeRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\nimport \"./IPancakeRouter01.sol\";\r\n\r\ninterface IPancakeRouter is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IN3.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IN3 {\r\n    function balanceOf(address _user) external view returns (uint256);\r\n\r\n    function taxReferral() external view returns (uint256);\r\n\r\n    function transferNoTax(address _to, uint256 _amount) external;\r\n\r\n    function getPrice() external view returns (uint256);\r\n\r\n    function getLpPrice() external view returns (uint256);\r\n\r\n    function getLpAddress() external view returns (address);\r\n\r\n}\r\n"
    },
    "contracts/interfaces/INEOMASSNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\ninterface INEOMASSNFT is IERC721 {\r\n    function onTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _transferType\r\n    ) external;\r\n\r\n    function addReward(uint256 _rewardAmount) external;\r\n\r\n    function getNFTValue(uint256 _id) external view returns (uint256);\r\n\r\n    function getUserValue(address _user) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IFomo.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFomo {\r\n    function onTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _transferType\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IReferral.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IReferral {\r\n    function recordReferral(address _user,  string memory code) external;\r\n\r\n    function onTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        uint256 _transferType\r\n    ) external;\r\n\r\n    function addReward(address _user, uint256 _rewardAmount) external;\r\n\r\n    function setReferrer(string memory code) external;\r\n\r\n    function getReferrer(address _user) external view returns (address);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IPancakeRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}