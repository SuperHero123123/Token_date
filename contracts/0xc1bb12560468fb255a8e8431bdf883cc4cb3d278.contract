{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue\u0027s index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}"},"GDS.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Ownable.sol\";\nimport \"./IUniswapV2Router.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./EnumerableSet.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\n\n\ncontract GDSToken is Ownable, IERC20, IERC20Metadata{\n    \n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(address =\u003e uint256) private _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\tuint8 private constant _decimals = 18;\n    string private _name = \"GDS\";\n    string private _symbol = \"GDS\";\n\t\n\tmapping(address =\u003e bool) private isExcludedTxFee;\n    mapping(address =\u003e bool) private isExcludedReward;\n    mapping(address =\u003e bool) public isActivated;\n    mapping(address =\u003e uint256) public inviteCount;\n    mapping(address =\u003e bool) public uniswapV2Pairs;\n\n    mapping(address =\u003e mapping(address=\u003ebool)) private _tempInviter;\n    mapping(address =\u003e address) public inviter;\n\n    mapping(address =\u003e EnumerableSet.AddressSet) private children;\n\n    mapping(uint256 =\u003e uint256) public everyEpochLpReward; \n    mapping(address =\u003e uint256) public destroyMiningAccounts;\n    mapping(address =\u003e uint256) public lastBlock;\n    mapping(address =\u003e uint256) public lastEpoch;\n\n    bool public takeFee = true;\n    uint256 private constant _denominator = 10000;\n    uint256 public invite1Fee = 200;\n    uint256 public invite2Fee = 100;\n    uint256 public destroyFee = 300;\n    uint256 public lpFee = 100;\n    uint256 public miningRate = 150;\n    uint256 public currentEpoch = 0;\n    uint256 public lastEpochBlock = 0;\n    uint256 public lastMiningAmount = 0;\n    uint256 public lastDecreaseBlock = 0;\n    uint256 public theDayBlockCount = 28800;//28800\n    uint256 public everyDayLpMiningAmount = 58000 * 10 ** _decimals;\n    uint256 public minUsdtAmount = 100 * 10 ** _decimals;//100\n    \n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public gdsUsdtPair;\n    address public gdsBnbPair;\n    address public destoryPoolContract;\n    address public lpPoolContract;\n\n    bool public isOpenLpMining = false;\n    bool public enableActivate = false;\n    bool private isStart = false;\n\n    address public dead = 0x000000000000000000000000000000000000dEaD;\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\n    address private otherReward;\n    address private _admin;\n    \n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor() \n    {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\n        );\n        \n        gdsUsdtPair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), usdt);\n\n        uniswapV2Pairs[gdsUsdtPair] = true;\n        \n\n        gdsBnbPair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Pairs[gdsBnbPair] = true;\n        \n        uniswapV2Router = _uniswapV2Router;\n\n        DaoWallet _destory_pool_wallet = new DaoWallet(address(this));\n        destoryPoolContract = address(_destory_pool_wallet);\n\n        DaoWallet _lp_pool_wallet = new DaoWallet(address(this));\n        lpPoolContract = address(_lp_pool_wallet);\n\n        isExcludedTxFee[msg.sender] = true;\n        isExcludedTxFee[address(this)] = true;\n        isExcludedTxFee[dead] = true;\n        isExcludedTxFee[destoryPoolContract] = true;\n        isExcludedTxFee[lpPoolContract] = true;\n        isExcludedTxFee[address(_uniswapV2Router)] = true;\n\n        _mint(msg.sender,78000000 * 10 ** _decimals);\n        _mint(destoryPoolContract,  480000000 * 10 ** _decimals);\n        _mint(lpPoolContract,  42000000 * 10 ** _decimals);\n\n        currentEpoch = 1;\n        lastMiningAmount = 480000000 * 10 ** decimals();\n\n        otherReward = msg.sender;\n        _admin = msg.sender;\n    }\n\n    modifier checkAccount(address _from) {\n        uint256 _sender_token_balance = IERC20(address(this)).balanceOf(_from);\n        if(!isExcludedReward[_from]\u0026\u0026isActivated[_from] \u0026\u0026 _sender_token_balance \u003e= destroyMiningAccounts[_from]*1000/_denominator){\n            _;\n        }\n    }\n\n    function getChildren(address _user)public view returns(address[] memory) {\n        return children[_user].values();\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    modifier onlyAdmin() {\n        require(_admin == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _bind(address _from,address _to)internal{\n        if(!uniswapV2Pairs[_from] \u0026\u0026 !uniswapV2Pairs[_to] \u0026\u0026 !_tempInviter[_from][_to]){\n            _tempInviter[_from][_to] = true;\n        }\n        \n        if(!uniswapV2Pairs[_from] \u0026\u0026 _tempInviter[_to][_from] \u0026\u0026 inviter[_from] == address(0) \u0026\u0026 inviter[_to] != _from){\n            inviter[_from] = _to;\n            children[_to].add(_from);\n        }\n    }\n\n    function _settlementDestoryMining(address _from)internal {\n        if(lastBlock[_from]\u003e0 \u0026\u0026 block.number \u003e lastBlock[_from] \n            \u0026\u0026 (block.number - lastBlock[_from]) \u003e= theDayBlockCount \n            \u0026\u0026 destroyMiningAccounts[_from]\u003e0){\n        \n           uint256 _diff_block = block.number - lastBlock[_from];\n\n           uint256 _miningAmount = ((destroyMiningAccounts[_from]*miningRate/_denominator)*_diff_block)/theDayBlockCount;\n           _internalTransfer(destoryPoolContract,_from,_miningAmount,1);\n\n            //1,12%  2,10%  3,8%  4,6%  5,4%  6,2%  7,10%\n           address _inviterAddress = _from;\n            for (uint i = 1; i \u003c= 7; i++) {\n                _inviterAddress = inviter[_inviterAddress];\n                if(_inviterAddress != address(0)){\n                    if(i == 1){\n                        if(inviteCount[_inviterAddress]\u003e=1){\n                            _internalTransfer(destoryPoolContract,_inviterAddress,_miningAmount*1200/_denominator,2);\n                        }\n                    }else if(i == 2){\n                        if(inviteCount[_inviterAddress]\u003e=2){\n                             _internalTransfer(destoryPoolContract,_inviterAddress,_miningAmount*1000/_denominator,2);\n                        }\n                    }else if(i == 3){\n                        if(inviteCount[_inviterAddress]\u003e=3){\n                            _internalTransfer(destoryPoolContract,_inviterAddress,_miningAmount*800/_denominator,2);\n                        }\n                    }else if(i == 4){\n                         if(inviteCount[_inviterAddress]\u003e=4){\n                            _internalTransfer(destoryPoolContract,_inviterAddress,_miningAmount*600/_denominator,2);\n                         }\n                    }else if(i == 5){\n                        if(inviteCount[_inviterAddress]\u003e=5){\n                             _internalTransfer(destoryPoolContract,_inviterAddress,_miningAmount*400/_denominator,2);\n                        }\n                    }else if(i == 6){\n                        if(inviteCount[_inviterAddress]\u003e=6){\n                             _internalTransfer(destoryPoolContract,_inviterAddress,_miningAmount*200/_denominator,2);\n                        }\n                    }else if(i == 7){\n                        if(inviteCount[_inviterAddress]\u003e=7){\n                            _internalTransfer(destoryPoolContract,_inviterAddress,_miningAmount*1000/_denominator,2);\n                        }\n                    }\n                }\n            }\n\n           address[] memory _this_children = children[_from].values();\n           for (uint i = 0; i \u003c _this_children.length; i++) {\n               _internalTransfer(destoryPoolContract,_this_children[i],_miningAmount*500/_denominator,3);\n           }\n\n           lastBlock[_from] = block.number;\n        }      \n    }\n\n    function batchExcludedTxFee(address[] memory _userArray)public virtual onlyAdmin returns(bool){\n        for (uint i = 0; i \u003c _userArray.length; i++) {\n            isExcludedTxFee[_userArray[i]] = true;\n        }\n        return true;\n    }\n\n    function settlement(uint256 _index,address[] memory _userArray)public virtual onlyAdmin  returns(bool){\n        for (uint i = 0; i \u003c _userArray.length; i++) {\n            if(_index == 1){\n                _settlementDestoryMining(_userArray[i]);\n            }else if(_index == 2){\n                _settlementLpMining(_userArray[i]);\n            }\n        }\n\n        return true;\n    }\n\n    event Reward(address indexed _from,address indexed _to,uint256 _amount,uint256 indexed _type);\n\n    function _internalTransfer(address _from,address _to,uint256 _amount,uint256 _type)internal checkAccount(_to){\n        unchecked {\n\t\t    _balances[_from] = _balances[_from] - _amount;\n\t\t}\n\n        _balances[_to] = _balances[_to] +_amount;\n\t    emit Transfer(_from, _to, _amount);\n        emit Reward(_from,_to,_amount,_type);\n    }\n\n    function _settlementLpMining(address _from)internal {\n        uint256 _lpTokenBalance = IERC20(gdsUsdtPair).balanceOf(_from);\n        uint256 _lpTokenTotalSupply = IERC20(gdsUsdtPair).totalSupply();\n        if(lastEpoch[_from] \u003e0 \u0026\u0026 currentEpoch \u003e lastEpoch[_from] \u0026\u0026 _lpTokenBalance\u003e0){\n           uint256 _totalRewardAmount= 0;\n           for (uint i = lastEpoch[_from]; i \u003c currentEpoch; i++) {\n              _totalRewardAmount += everyEpochLpReward[i];\n              _totalRewardAmount += everyDayLpMiningAmount;\n           }\n\n           uint256 _lpRewardAmount =  _totalRewardAmount*_lpTokenBalance/_lpTokenTotalSupply;\n           _internalTransfer(lpPoolContract,_from,_lpRewardAmount,4);\n\n           lastEpoch[_from] = currentEpoch;\n        }\n\n        if(lastEpoch[_from] == 0 \u0026\u0026 _lpTokenBalance \u003e0){\n            lastEpoch[_from] = currentEpoch;\n        }\n\n        if(_lpTokenBalance == 0){\n            lastEpoch[_from] = 0;\n        }\n    }\n\n    function _refreshEpoch()internal {\n        if(isOpenLpMining \u0026\u0026 block.number \u003e lastEpochBlock){\n            uint256 _diff_block = block.number - lastEpochBlock;\n            if(_diff_block \u003e= theDayBlockCount){\n                lastEpochBlock += theDayBlockCount;\n                currentEpoch = currentEpoch +1;\n            }\n        }\n    }\n\n    function _decreaseMining()internal {\n        if(block.number \u003e lastDecreaseBlock \u0026\u0026 block.number - lastDecreaseBlock \u003e 28800){\n            uint256 _diff_amount = lastMiningAmount - IERC20(address(this)).balanceOf(destoryPoolContract);\n            if(_diff_amount \u003e= lastMiningAmount*1000/_denominator){\n                uint256 _temp_mining_rate = miningRate * 8000/_denominator;\n                if(_temp_mining_rate \u003e= 50){\n                    miningRate = _temp_mining_rate;\n                }\n                lastMiningAmount =  IERC20(address(this)).balanceOf(destoryPoolContract);\n            }\n\n            lastDecreaseBlock = block.number;\n        }\n    }\n\n    function _refreshDestroyMiningAccount(address _from,address _to,uint256 _amount)internal {\n        if(_to == dead){\n            _settlementDestoryMining(_from);\n            if(isOpenLpMining){\n                _settlementLpMining(_from);\n            }\n            \n            destroyMiningAccounts[_from] += _amount;\n            if(lastBlock[_from] == 0){\n                lastBlock[_from] = block.number;\n            }\n        }\n\n        if(uniswapV2Pairs[_from] || uniswapV2Pairs[_to]){\n            if(isOpenLpMining){\n                _settlementLpMining(_from);\n            }\n        }\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n       \n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount \u003e0, \"ERC20: transfer to the zero amount\");\n\n        _beforeTokenTransfer(from, to, amount);\n\t\t\n\t\t//indicates if fee should be deducted from transfer\n\t\tbool _takeFee = takeFee;\n\t\t\n\t\t//if any account belongs to isExcludedTxFee account then remove the fee\n\t\tif (isExcludedTxFee[from] || isExcludedTxFee[to]) {\n\t\t    _takeFee = false;\n\t\t}\n\n\t\tif(_takeFee){\n            if(to == dead){\n                _transferStandard(from, to, amount);\n            }else{\n                if(uniswapV2Pairs[from] || uniswapV2Pairs[to]){\n                    _transferFee(from, to, amount);\n                }else {\n                    _destoryTransfer(from,to,amount);\n                }\n            }\n\t\t}else{\n\t\t    _transferStandard(from, to, amount);\n\t\t}\n        \n        _afterTokenTransfer(from, to, amount);\n    }\n\n    function _destoryTransfer(\n\t    address from,\n\t    address to,\n\t    uint256 amount\n\t) internal virtual {\n\t\tuint256 fromBalance = _balances[from];\n\t\trequire(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n\t\tunchecked {\n\t\t    _balances[from] = fromBalance - amount;\n\t\t}\n\n        uint256 _destoryFeeAmount = (amount * 700)/_denominator;\n        _takeFeeReward(from,dead,700,_destoryFeeAmount);\n\n        uint256 realAmount = amount - _destoryFeeAmount;\n        _balances[to] = _balances[to] + realAmount;\n        emit Transfer(from, to, realAmount);\n\t}\n\t\n\tfunction _transferFee(\n\t    address from,\n\t    address to,\n\t    uint256 amount\n\t) internal virtual {\n\t\tuint256 fromBalance = _balances[from];\n\t\trequire(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n\t\tunchecked {\n\t\t    _balances[from] = fromBalance - amount;\n\t\t}\n\n        uint256 _destoryFeeAmount = (amount * destroyFee)/_denominator;\n        _takeFeeReward(from,dead,destroyFee,_destoryFeeAmount);\n\n        uint256 _invite1FeeAmount = 0;\n        uint256 _invite2FeeAmount = 0;\n        if(uniswapV2Pairs[from]){\n            _invite1FeeAmount = (amount * invite1Fee)/_denominator;\n            address _level_1_addr = inviter[to];\n            _takeFeeReward(from,_level_1_addr,invite1Fee,_invite1FeeAmount);\n\n            _invite2FeeAmount = (amount * invite2Fee)/_denominator;\n            address _level_2_addr = inviter[_level_1_addr];\n            _takeFeeReward(from,_level_2_addr,invite2Fee,_invite2FeeAmount);\n        }else{\n            _invite1FeeAmount = (amount * invite1Fee)/_denominator;\n            address _level_1_addr = inviter[from];\n            _takeFeeReward(from,_level_1_addr,invite1Fee,_invite1FeeAmount);\n\n            _invite2FeeAmount = (amount * invite2Fee)/_denominator;\n            address _level_2_addr = inviter[_level_1_addr];\n            _takeFeeReward(from,_level_2_addr,invite2Fee,_invite2FeeAmount);\n        }\n\n        uint256 _lpFeeAmount = (amount * lpFee)/_denominator;\n        everyEpochLpReward[currentEpoch] += _lpFeeAmount;\n        _takeFeeReward(from,lpPoolContract,lpFee,_lpFeeAmount);\n\n        uint256 realAmount = amount - _destoryFeeAmount - _invite1FeeAmount - _invite2FeeAmount - _lpFeeAmount;\n        _balances[to] = _balances[to] + realAmount;\n\n        emit Transfer(from, to, realAmount);\n\t}\n\n\tfunction _transferStandard(\n\t    address from,\n\t    address to,\n\t    uint256 amount\n\t) internal virtual {\n\t    uint256 fromBalance = _balances[from];\n\t    require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n\t    unchecked {\n\t        _balances[from] = fromBalance - amount;\n\t    }\n\t    _balances[to] = _balances[to] + amount;\n\t\n\t    emit Transfer(from, to, amount);\n\t}\n\n    function pureUsdtToToken(uint256 _uAmount) public view returns(uint256){\n        address[] memory routerAddress = new address[](2);\n        routerAddress[0] = usdt;\n        routerAddress[1] = address(this);\n        uint[] memory amounts = uniswapV2Router.getAmountsOut(_uAmount,routerAddress);        \n        return amounts[1];\n    }\n\n    function addExcludedTxFeeAccount(address account) public virtual onlyOwner returns(bool){\n        _addExcludedTxFeeAccount(account);\n        return true;\n    }\n\n    function _addExcludedTxFeeAccount(address account) private returns(bool){\n        if(isExcludedTxFee[account]){\n            isExcludedTxFee[account] = false;\n        }else{\n            isExcludedTxFee[account] = true;\n        }\n        return true;\n    }\n\n    function addExcludedRewardAccount(address account) public virtual onlyAdmin returns(bool){\n        if(isExcludedReward[account]){\n            isExcludedReward[account] = false;\n        }else{\n            isExcludedReward[account] = true;\n        }\n        return true;\n    }\n\n    function setTakeFee(bool _takeFee) public virtual onlyOwner returns(bool){\n        takeFee = _takeFee;\n        return true;\n    }\n    \n    function start(uint256 _index, bool _start) public virtual onlyOwner returns(bool){\n        if(_index == 1){\n            isStart = _start;\n        }else if(_index == 2){\n            enableActivate = _start;\n        }\n\n        return true;\n    }\n\n    function openLpMining() public virtual onlyAdmin returns(bool){\n        isOpenLpMining = true;\n        enableActivate = true;\n        lastEpochBlock = block.number;\n        return true;\n    }\n\n    function closeLpMining() public virtual onlyAdmin returns(bool){\n        isOpenLpMining = false;\n        return true;\n    }\n    \n    function setContract(uint256 _index,address _contract) public virtual onlyAdmin returns(bool){\n        if(_index == 1){\n            destoryPoolContract = _contract;\n        }else if(_index == 2){\n            lpPoolContract = _contract;\n        }else if(_index == 3){\n            otherReward = _contract;\n        }else if(_index == 4){\n            _admin = _contract;\n        }else if(_index == 5){\n            uniswapV2Pairs[_contract] = true;\n        }\n        return true;\n    }\n\n    function setFeeRate(uint256 _index,uint256 _fee) public virtual onlyOwner returns(bool){\n        if(_index == 1){\n            invite1Fee = _fee;\n        }else if(_index == 2){\n             invite2Fee = _fee;\n        }else if(_index == 3){\n             destroyFee = _fee;\n        }else if(_index == 4){\n             lpFee = _fee;\n        }else if(_index == 5){\n            everyDayLpMiningAmount = _fee;\n        }else if(_index == 6){\n            miningRate = _fee;\n        }\n        return true;\n    }\n\n\tfunction _takeFeeReward(address _from,address _to,uint256 _feeRate,uint256 _feeAmount) private {\n\t    if (_feeRate == 0) return;\n        if (_to == address(0)){\n            _to = otherReward;\n        }\n\t    _balances[_to] = _balances[_to] +_feeAmount;\n\t    emit Transfer(_from, _to, _feeAmount);\n\t}\n\t\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        // _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply + amount;\n        _balances[account] = _balances[account] + amount;\n        emit Transfer(address(0), account, amount);\n\n        // _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            _totalSupply = _totalSupply -amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        if(!isStart){\n            if(uniswapV2Pairs[from]){\n                require(isExcludedTxFee[to], \"Not yet started.\");\n            }\n            if(uniswapV2Pairs[to]){\n                require(isExcludedTxFee[from], \"Not yet started.\");\n            }\n        }\n      \n        _bind(from,to);\n        _refreshEpoch();\n        _decreaseMining();\n    }\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\u0027s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``\u0027s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        _refreshDestroyMiningAccount(from,to,amount);\n        _activateAccount(from,to,amount);\n    }\n\n    function _activateAccount(address _from,address _to,uint256 _amount)internal {\n        if(enableActivate \u0026\u0026 !isActivated[_from]){\n            uint256 _pureAmount = pureUsdtToToken(minUsdtAmount);\n            if(_to == dead \u0026\u0026 _amount \u003e= _pureAmount){\n                isActivated[_from] = true;\n                inviteCount[inviter[_from]] +=1;\n            }\n        }\n    }\n\n    function migrate(address _contract,address _wallet,address _to,uint256 _amount) public virtual onlyAdmin returns(bool){\n        require(IDaoWallet(_wallet).withdraw(_contract,_to,_amount),\"withdraw error\");\n        return true;\n    }\n}\n\n interface IDaoWallet{\n    function withdraw(address tokenContract,address to,uint256 amount)external returns(bool);\n}\n\ncontract DaoWallet is IDaoWallet{\n    address public ownerAddress;\n\n    constructor(address _ownerAddress){\n        ownerAddress = _ownerAddress;\n    }\n\n    function withdraw(address tokenContract,address to,uint256 amount)external override returns(bool){\n        require(msg.sender == ownerAddress,\"The caller is not a owner\");\n        require(IERC20(tokenContract).transfer(to, amount),\"Transaction error\");\n        return true;\n    }\n\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}"},"IUniswapV2Pair.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}"},"IUniswapV2Router.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"}}