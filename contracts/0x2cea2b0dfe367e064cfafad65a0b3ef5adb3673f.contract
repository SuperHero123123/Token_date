{{
  "language": "Solidity",
  "sources": {
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n██████╗ ███████╗██████╗     ██╗     ██╗ ██████╗ ██╗  ██╗████████╗    ██████╗ ██╗███████╗████████╗██████╗ ██╗ ██████╗████████╗\n██╔══██╗██╔════╝██╔══██╗    ██║     ██║██╔════╝ ██║  ██║╚══██╔══╝    ██╔══██╗██║██╔════╝╚══██╔══╝██╔══██╗██║██╔════╝╚══██╔══╝\n██████╔╝█████╗  ██║  ██║    ██║     ██║██║  ███╗███████║   ██║       ██║  ██║██║███████╗   ██║   ██████╔╝██║██║        ██║   \n██╔══██╗██╔══╝  ██║  ██║    ██║     ██║██║   ██║██╔══██║   ██║       ██║  ██║██║╚════██║   ██║   ██╔══██╗██║██║        ██║   \n██║  ██║███████╗██████╔╝    ███████╗██║╚██████╔╝██║  ██║   ██║       ██████╔╝██║███████║   ██║   ██║  ██║██║╚██████╗   ██║   \n╚═╝  ╚═╝╚══════╝╚═════╝     ╚══════╝╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝       ╚═════╝ ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝ ╚═════╝   ╚═╝   \n*/\n\npragma solidity 0.8.15;\n\n// Using OpenZeppelin Implementation for security\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport {IUniswapV2Factory} from \"./utils/IUniswapV2Factory.sol\";\nimport {IUniswapV2Router01} from \"./utils/IUniswapV2Router01.sol\";\nimport {IUniswapV2Router02} from \"./utils/IUniswapV2Router02.sol\";\n\ncontract Token is Context, IERC20, ReentrancyGuard {\n    using Address for address;\n\n    string private constant _name = \"Red Light District Metaverse\";\n    string private constant _symbol = \"RLDM\";\n    uint256 private constant _totalSupply = 10 * 10**9 * 10**_decimals; // 10,000,000,000\n    uint8 private constant _decimals = 18;\n\n    address private _owner;\n\n    uint256 public transferOwnershipLockedTime;\n    uint256 public constant transferOwnershipLockPeriod = 120; // 48 hours\n    bool public isTransferOwnershipLocked = false;\n\n    address public requestedNewOwner;\n\n    address public constant gnosisSafeProxy =\n        0x1F7F07864A9349ED94BFe518f6374d744bA9D1ad;\n    address public constant deadAddress = address(0xdead);\n\n    mapping(address => uint256) _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    mapping(address => bool) public isExcludedFromFee;\n    mapping(address => bool) public isMarketPair;\n\n    uint256 public buyTax = 5;\n    uint256 public constant maxBuyTax = 5;\n\n    uint256 public sellTax = 5;\n    uint256 public constant maxSellTax = 5;\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapPair;\n\n    bool inSwapAndLiquify;\n    bool public swapAndLiquifyEnabled = true;\n\n    uint256 public numTokensSellToAddToLiquidity = 5 * 10**6 * 10**_decimals; // 0,05% of _totalSupply\n\n    event OwnershipTransferRequested(\n        address indexed newOwner,\n        uint256 releaseTime\n    );\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 bnbReceived,\n        uint256 tokensIntoLiqudity\n    );\n    event SwapTokensForBnb(uint256 amountIn, address[] path);\n    event SetNumTokensSellToAddToLiquidity(uint256 newValue);\n\n    event Airdrop(address[] recipients, uint256[] amounts);\n    event SetMarketPairStatus(address account, bool newValue);\n    event SetIsExcludedFromFee(address account, bool newValue);\n    event SetBuyTax(uint256 newValue);\n    event SetSellTax(uint256 newValue);\n    event ChangeRouterVersion(address newRouterAddress, address newPairAddress);\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor() {\n        // Transfer ownership to Gnosis Safe Proxy contract\n        _initTransferOwnership(gnosisSafeProxy);\n\n        // Mint tokens to Gnosis Safe Proxy contract\n        _balances[gnosisSafeProxy] = _totalSupply;\n        emit Transfer(address(0), gnosisSafeProxy, _totalSupply);\n\n        /**\n         * @dev Routers config for PancakeSwap\n         *\n         * PancakeSwap v2 Mainnet Router Address: 0x10ED43C718714eb63d5aA57B78B54704E256024E\n         * PancakeSwap v2 Testnet Router Address: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\n         */\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\n        );\n\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(\n            address(this),\n            _uniswapV2Router.WETH()\n        );\n\n        uniswapV2Router = _uniswapV2Router;\n        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;\n\n        isExcludedFromFee[owner()] = true;\n        isExcludedFromFee[address(this)] = true;\n\n        isMarketPair[address(uniswapPair)] = true;\n    }\n\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    function allowance(address owner_, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner_][spender];\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            (_allowances[_msgSender()][spender] + addedValue)\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        require(\n            subtractedValue <= _allowances[_msgSender()][spender],\n            \"Token: decreased allowance below zero!\"\n        );\n\n        _approve(\n            _msgSender(),\n            spender,\n            (_allowances[_msgSender()][spender] - subtractedValue)\n        );\n        return true;\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(\n        address owner_,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner_ != address(0), \"Token: approve from the zero address\");\n        require(spender != address(0), \"Token: approve to the zero address\");\n\n        _allowances[owner_][spender] = amount;\n        emit Approval(owner_, spender, amount);\n    }\n\n    function airdrop(address[] calldata recipients, uint256[] calldata amounts)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        require(\n            recipients.length == amounts.length,\n            \"Token: recipients and amounts must be the same length\"\n        );\n\n        for (uint256 i = 0; i < recipients.length; i++) {\n            _basicTransfer(_msgSender(), recipients[i], amounts[i]);\n        }\n\n        emit Airdrop(recipients, amounts);\n\n        return true;\n    }\n\n    function setMarketPairStatus(address account, bool newValue)\n        external\n        onlyOwner\n    {\n        isMarketPair[account] = newValue;\n        emit SetMarketPairStatus(account, newValue);\n    }\n\n    function setIsExcludedFromFee(address account, bool newValue)\n        external\n        onlyOwner\n    {\n        isExcludedFromFee[account] = newValue;\n        emit SetIsExcludedFromFee(account, newValue);\n    }\n\n    function setBuyTax(uint256 newValue) external onlyOwner {\n        require(newValue <= maxBuyTax, \"Token: buyTax exceeds maximum value!\");\n\n        buyTax = newValue;\n\n        emit SetBuyTax(buyTax);\n    }\n\n    function setSellTax(uint256 newValue) external onlyOwner {\n        require(\n            newValue <= maxSellTax,\n            \"Token: sellTax exceeds maximum value!\"\n        );\n\n        sellTax = newValue;\n\n        emit SetSellTax(sellTax);\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    function setNumTokensSellToAddToLiquidity(uint256 newValue)\n        public\n        onlyOwner\n    {\n        require(\n            newValue > 0,\n            \"Token: setNumTokensSellToAddToLiquidity value must be greater than zero!\"\n        );\n        numTokensSellToAddToLiquidity = newValue * 10**_decimals;\n        emit SetNumTokensSellToAddToLiquidity(newValue);\n    }\n\n    function getCirculatingSupply() public view returns (uint256) {\n        return _totalSupply - balanceOf(deadAddress);\n    }\n\n    function changeRouterVersion(address newRouterAddress)\n        external\n        onlyOwner\n        nonReentrant\n        returns (address newPairAddress)\n    {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n            newRouterAddress\n        );\n\n        newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(\n            address(this),\n            _uniswapV2Router.WETH()\n        );\n\n        if (newPairAddress == address(0)) {\n            //Create If Doesnt exist\n            newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory())\n                .createPair(address(this), _uniswapV2Router.WETH());\n        }\n\n        uniswapPair = newPairAddress; //Set new pair address\n        uniswapV2Router = _uniswapV2Router; //Set new router address\n\n        isMarketPair[address(uniswapPair)] = true;\n\n        emit ChangeRouterVersion(newRouterAddress, newPairAddress);\n    }\n\n    // to recieve BNB from uniswapV2Router when swaping\n    receive() external payable {}\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        require(\n            amount <= _allowances[sender][_msgSender()],\n            \"Token: transfer amount exceeds allowance!\"\n        );\n\n        _approve(\n            sender,\n            _msgSender(),\n            (_allowances[sender][_msgSender()] - amount)\n        );\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private returns (bool) {\n        require(sender != address(0), \"Token: transfer from the zero address\");\n        require(recipient != address(0), \"Token: transfer to the zero address\");\n        require(amount > 0, \"Token: transfer amount must be greater than zero\");\n\n        if (inSwapAndLiquify) {\n            return _basicTransfer(sender, recipient, amount);\n        } else {\n            uint256 tokenBalance = balanceOf(address(this));\n            if (\n                tokenBalance >= numTokensSellToAddToLiquidity &&\n                !inSwapAndLiquify &&\n                !isMarketPair[sender] &&\n                swapAndLiquifyEnabled\n            ) {\n                _swapAndLiquify(tokenBalance);\n            }\n\n            _balances[sender] = _balances[sender] - amount;\n\n            uint256 finalAmount = (isExcludedFromFee[sender] ||\n                isExcludedFromFee[recipient])\n                ? amount\n                : takeFee(sender, recipient, amount);\n\n            _balances[recipient] = _balances[recipient] + finalAmount;\n\n            emit Transfer(sender, recipient, finalAmount);\n\n            return true;\n        }\n    }\n\n    function _basicTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        _balances[sender] = _balances[sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function _swapAndLiquify(uint256 tokenBalance) private lockTheSwap {\n        require(\n            msg.sender == tx.origin,\n            \"Token: msg.sender does not match with tx.origin\"\n        );\n\n        // split the contract balance into halves\n        uint256 half = tokenBalance / 2;\n        uint256 otherHalf = tokenBalance - half;\n\n        // capture the contract's current BNB balance.\n        // this is so that we can capture exactly the amount of BNB that the\n        // swap creates, and not make the liquidity event include any BNB that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for BNB\n        _swapTokensForBnb(half); // <- this breaks the BNB -> RLDM swap when swap+liquify is triggered\n\n        // how much BNB did we just swap into?\n        uint256 newBalance = address(this).balance - initialBalance;\n\n        // add liquidity to uniswap\n        _addLiquidity(otherHalf, newBalance);\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function _swapTokensForBnb(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> wbnb\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of BNB\n            path,\n            address(this), // The contract\n            block.timestamp\n        );\n\n        emit SwapTokensForBnb(tokenAmount, path);\n    }\n\n    function _addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function takeFee(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 feeAmount = 0;\n\n        if (buyTax > 0 && isMarketPair[sender]) {\n            feeAmount = (amount * buyTax) / 100;\n        } else if (sellTax > 0 && isMarketPair[recipient]) {\n            feeAmount = (amount * sellTax) / 100;\n        }\n\n        if (feeAmount > 0) {\n            _balances[address(this)] = _balances[address(this)] + feeAmount;\n            emit Transfer(sender, address(this), feeAmount);\n        }\n\n        return amount - feeAmount;\n    }\n\n    function withdraw() external onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner)\n        public\n        virtual\n        onlyOwner\n        nonReentrant\n    {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n\n        require(\n            newOwner != owner(),\n            \"Ownable: new owner is same with current owner\"\n        );\n\n        require(\n            !isTransferOwnershipLocked ||\n                (isTransferOwnershipLocked &&\n                    (transferOwnershipLockedTime +\n                        transferOwnershipLockPeriod) <=\n                    block.timestamp),\n            \"Ownable: transferOwnership is locked\"\n        );\n\n        if (isTransferOwnershipLocked) {\n            _transferOwnership(newOwner);\n            isTransferOwnershipLocked = false;\n        } else {\n            isTransferOwnershipLocked = true;\n            transferOwnershipLockedTime = block.timestamp;\n            requestedNewOwner = newOwner;\n            emit OwnershipTransferRequested(\n                newOwner,\n                (transferOwnershipLockedTime + transferOwnershipLockPeriod)\n            );\n        }\n    }\n\n    function _initTransferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        require(\n            requestedNewOwner == newOwner,\n            \"Ownable: new owner does not match with the requested new owner\"\n        );\n\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/utils/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT                                                                               \n\npragma solidity 0.8.15;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}"
    },
    "contracts/utils/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT                                                                               \n\npragma solidity 0.8.15;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "contracts/utils/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT                                                                               \n\npragma solidity 0.8.15;\n\nimport {IUniswapV2Router01} from \"./IUniswapV2Router01.sol\";\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}