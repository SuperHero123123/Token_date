{{
  "language": "Solidity",
  "sources": {
    "contracts/Roburna.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n\npragma solidity ^0.8.4;\n\nimport \"./token/ERC20.sol\";\nimport \"./token/ERC1363/ERC1363.sol\";\nimport \"./token/ERC2612/ERC2612.sol\";\nimport \"./token/extensions/ERC20Burnable.sol\";\nimport \"./token/extensions/ERC20TokenRecover.sol\";\nimport \"./interfaces/IDEXRouter.sol\";\nimport \"./interfaces/IDEXFactory.sol\";\nimport \"./interfaces/IDEXPair.sol\";\nimport \"./IRoburna.sol\";\nimport \"./IRoburnaDividendTracker.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n\ncontract Roburna is ERC20, ERC1363, ERC2612, ERC20Burnable, ERC20TokenRecover, IRoburna {\n    using SafeMath for uint256;\n    mapping(address => bool) public override dexRouters;\n    // store addresses that are automatic market maker (dex) pairs. Any transfer *to* these addresses\n    mapping(address => bool) public override automatedMarketMakerPairs;\n\n    IDEXRouter public override defaultDexRouter;\n    address public override defaultPair;\n\n    address public immutable override USDC;\n    address public override marketingWallet;\n    address public override liquidityWallet;\n    address public override buyBackWallet;\n    address public override blackListWallet;\n    // to accommodate lock or unlock balance by bridge\n    address public bridgeVault;\n    address public bridge;\n    IRoburnaDividendTracker public override dividendTracker;\n\n\n    bool public override transfersEnabled = false;\n    bool private isSwappingFees;\n\n    // Supply and amounts\n    // 1 billion (this will also be the total supply as there is not public mint function)\n    uint256 private _startSupply = 1 * (10**9) * (10**18);\n    uint256 public override swapTokensAtAmount = 20000 * (10**18);\n    \n\n    // fees (from a total of 10000)\n    uint256 public override buyFeesCollected = 0;\n    uint256 public override buyBuyBackFee = 800;\n    uint256 public override buyDividendFee = 400;\n    uint256 public override buyLiquidityFee = 200;\n    uint256 public override buyMarketingFee = 500;\n    uint256 public override buyTotalFees = buyDividendFee + buyLiquidityFee + buyMarketingFee + buyBuyBackFee;\n\n    uint256 public override sellFeesCollected = 0;\n    uint256 public override sellBuyBackFee = 800;\n    uint256 public override sellDividendFee = 400;\n    uint256 public override sellLiquidityFee = 200;\n    uint256 public override sellMarketingFee = 500;\n    uint256 public override sellTotalFees = sellDividendFee + sellLiquidityFee + sellMarketingFee + sellBuyBackFee;\n\n    // use by default 300,000 gas to process auto-claiming dividends\n    uint256 public override gasForProcessing = 300000;\n\n    // white listed adresses (excluded from fees and dividends)\n    // these addresses can also make transfers before presale is over\n    mapping(address => bool) public override whitelistedAddresses;\n\n    // exlcude from fees \n    mapping(address => bool) private _isExcludedFromFees;\n    mapping(address => bool) private _isBlackListed;\n    mapping(address => uint256) private _blackListedAmount;\n\n    event LogAddressBlackListed(address account);\n    event LogAddressRemovedFromBL(address account);\n    event LogSetBridge(address indexed setter, address bridge);\n    event LogLockByBridge(address indexed account, uint256 amount);\n    event LogUnlockByBridge(address indexed account, uint256 amount);\n    event LogSetBuyBackWallet(address account);\n    event LogSetBridgeVault(address account);\n    event LogSetBlackListWallet(address _blackListWallet);\n    event LogUpdateNameAndSymbol(string name, string symbol);\n    event LogSetTransfersEnabled(bool enabled);\n    event LogUpdateSwapTokensAtAmount(uint256 tokens);\n\n\n    bool private nameChanged = false;\n\n    constructor(\n        address _routerAddress,\n        address _usdc,\n        address _marketingWallet, \n        address _buyBackWallet,\n        address _blackListWallet,\n        address _bridgeVault\n    ) ERC2612(\"Roburna\", \"RBA\") {\n        IDEXRouter _dexRouter = IDEXRouter(_routerAddress);\n        USDC = _usdc;\n        \n        marketingWallet = _marketingWallet;\n        liquidityWallet = owner();\n        buyBackWallet = _buyBackWallet;\n        blackListWallet = _blackListWallet;\n        bridgeVault = _bridgeVault;\n       \n        defaultDexRouter = _dexRouter;\n        dexRouters[_routerAddress] = true;\n        defaultPair = IDEXFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\n        _setAutomatedMarketMakerPair(defaultPair, true);\n\n        //_mint is an internal function in ERC20.sol that is only called here, and CANNOT be called ever again\n        _mint(owner(), _startSupply);\n    }\n\n    /**\n     * @dev because bridgeVault not receive reward\n     */\n    function circulatingSupply() external view returns (uint256) {\n        return _startSupply.sub(balanceOf(bridgeVault));\n    }\n\n    function setBuyBackWallet(address _buyBackWallet) external onlyOwner{\n        require(_buyBackWallet != address(0), \"Invalid address\");\n        require(_buyBackWallet != buyBackWallet, \"Already set to this address\");\n        buyBackWallet = _buyBackWallet;\n        emit LogSetBuyBackWallet(_buyBackWallet);\n    }\n\n    function setBridgeVault(address _bridgeVault) external onlyOwner{\n        require(_bridgeVault != address(0), \"Invalid address\");\n        require(_bridgeVault != bridgeVault, \"Already set to this address\");\n        bridgeVault = _bridgeVault;\n        emit LogSetBridgeVault(_bridgeVault);\n    }\n\n    function setBlackListWallet(address _blackListWallet) external onlyOwner{\n        require(_blackListWallet != address(0), \"Invalid address\");\n        require(_blackListWallet != blackListWallet, \"Already set to this address\");\n        blackListWallet = _blackListWallet;\n        emit LogSetBlackListWallet(_blackListWallet);\n    }\n\n    function initializeDividendTracker(IRoburnaDividendTracker _dividendTracker) external override onlyOwner {\n        require(address(dividendTracker) == address(0), \"Roburna: Dividend tracker already initialized\");\n        dividendTracker = _dividendTracker;\n\n        // exclude from receiving dividends\n        dividendTracker.excludeFromDividends(address(defaultPair));\n        dividendTracker.excludeFromDividends(address(dividendTracker));\n        dividendTracker.excludeFromDividends(address(defaultDexRouter));\n        dividendTracker.excludeFromDividends(bridgeVault);\n\n        // whitlist wallets f.e. owner wallet to send tokens before presales are over\n        setWhitelistAddress(address(this), true);\n        setWhitelistAddress(owner(), true);\n        setWhitelistAddress(marketingWallet, true);\n    }\n\n    receive() external payable {}\n\n    //== BEP20 owner function ==\n    function getOwner() public view override returns (address) {\n        return owner();\n    }\n\n    function updateNameAndSymbol(string memory name_, string memory symbol_) external onlyOwner {\n        require(!nameChanged, \"Roburna: Name already changed\");\n        _name = name_;\n        _symbol = symbol_;\n        nameChanged = true;\n        emit LogUpdateNameAndSymbol(_name, _symbol);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1363, ERC2612) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\n        public\n        override(ERC20TokenRecover, IERC20TokenRecover)\n        onlyOwner\n    {\n        require(tokenAddress != address(this), \"Cannot retrieve Roburna\");\n        super.recoverERC20(tokenAddress, tokenAmount);\n    }\n\n    function setWhitelistAddress(address _whitelistAddress, bool whitelisted) public override onlyOwner {\n        whitelistedAddresses[_whitelistAddress] = whitelisted;\n        excludeFromFees(_whitelistAddress, whitelisted);\n        if (whitelisted) {\n            dividendTracker.excludeFromDividends(_whitelistAddress);\n        } else {\n            dividendTracker.includeInDividends(_whitelistAddress);\n        }\n    }\n\n    function updateDividendTracker(address newAddress) external override onlyOwner {\n        require(newAddress != address(0), \"Roburna: Dividend tracker not yet initialized\");\n        require(newAddress != address(dividendTracker), \"Roburna: The dividend tracker already has that address\");\n\n        IRoburnaDividendTracker newDividendTracker = IRoburnaDividendTracker(payable(newAddress));\n        require(\n            newDividendTracker.getOwner() == address(this),\n            \"Roburna: The new dividend tracker must be owned by the Roburna token contract\"\n        );\n\n        setWhitelistAddress(address(newDividendTracker), true);\n        dividendTracker = newDividendTracker;\n        emit UpdateDividendTracker(newAddress, address(dividendTracker));\n    }\n\n    function addNewRouter(address _router, bool makeDefault) external override onlyOwner {\n        dexRouters[_router] = true;\n        dividendTracker.excludeFromDividends(_router);\n\n        if (makeDefault) {\n            emit UpdateDefaultDexRouter(_router, address(defaultDexRouter));\n            defaultDexRouter = IDEXRouter(_router);\n            defaultPair = IDEXFactory(defaultDexRouter.factory()).createPair(address(this), defaultDexRouter.WETH());\n            _setAutomatedMarketMakerPair(defaultPair, true);\n        }\n    }\n\n    function excludeFromFees(address account, bool excluded) public override onlyOwner {\n        require(_isExcludedFromFees[account] != excluded, \"Roburna: Account is already the value of 'excluded'\");\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external override onlyOwner {\n        for (uint256 i = 0; i < accounts.length; i++) {\n            excludeFromFees(accounts[i], excluded);\n        }\n    }\n\n    function setAutomatedMarketMakerPair(address pair, bool value) external override onlyOwner {\n        require(\n            value || pair != defaultPair,\n            \"Roburna: The default pair cannot be removed from automatedMarketMakerPairs\"\n        );\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        require(\n            automatedMarketMakerPairs[pair] != value,\n            \"Roburna: Automated market maker pair is already set to that value\"\n        );\n\n        automatedMarketMakerPairs[pair] = value;\n        if (value && address(dividendTracker) != address(0)) dividendTracker.excludeFromDividends(pair);\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function updateMinTokenBalance(uint256 minTokens) external override onlyOwner {\n        dividendTracker.updateMinTokenBalance(minTokens);\n    }\n\n    function updateMarketingWallet(address newMarketingWallet) external override onlyOwner {\n        require(newMarketingWallet != marketingWallet, \"Roburna: The marketing wallet is already this address\");\n        setWhitelistAddress(newMarketingWallet, true);\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\n        marketingWallet = newMarketingWallet;\n    }\n\n    function updateLiquidityWallet(address newLiquidityWallet) external override onlyOwner {\n        require(newLiquidityWallet != liquidityWallet, \"Roburna: The liquidity wallet is already this address\");\n        setWhitelistAddress(newLiquidityWallet, true);\n        emit LiquidityWalletUpdated(newLiquidityWallet, liquidityWallet);\n        liquidityWallet = newLiquidityWallet;\n    }\n\n    function updateGasForProcessing(uint256 newValue) external override onlyOwner {\n        require(\n            newValue >= 200000 && newValue <= 500000,\n            \"Roburna: gasForProcessing must be between 200,000 and 500,000\"\n        );\n        require(newValue != gasForProcessing, \"Roburna: Cannot update gasForProcessing to same value\");\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\n        gasForProcessing = newValue;\n    }\n\n    function updateClaimWait(uint256 claimWait) external override onlyOwner {\n        dividendTracker.updateClaimWait(claimWait);\n    }\n\n    function getClaimWait() external view override returns (uint256) {\n        return dividendTracker.claimWait();\n    }\n\n    function getTotalDividendsDistributed() external view override returns (uint256) {\n        return dividendTracker.totalDividendsDistributed();\n    }\n\n    function isExcludedFromFees(address account) external view override returns (bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    function withdrawableDividendOf(address account) external view override returns (uint256) {\n        return dividendTracker.withdrawableDividendOf(account);\n    }\n\n    function dividendTokenBalanceOf(address account) external view override returns (uint256) {\n        return dividendTracker.balanceOf(account);\n    }\n\n    function getAccountDividendsInfo(address account)\n        external\n        view\n        override\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return dividendTracker.getAccount(account);\n    }\n\n    function getAccountDividendsInfoAtIndex(uint256 index)\n        external\n        view\n        override\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        return dividendTracker.getAccountAtIndex(index);\n    }\n\n    function processDividendTracker(uint256 gas) external override {\n        (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) = dividendTracker.process(gas);\n        emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, false, gas, tx.origin);\n    }\n\n    function claim() external override {\n        dividendTracker.processAccount(payable(msg.sender), false);\n    }\n\n    function getLastProcessedIndex() external view override returns (uint256) {\n        return dividendTracker.getLastProcessedIndex();\n    }\n\n    function getNumberOfDividendTokenHolders() external view override returns (uint256) {\n        return dividendTracker.getNumberOfTokenHolders();\n    }\n\n    /**\n     * Enable or disable transfers, used before presale and on critical problems in or with the token contract\n     */\n    function setTransfersEnabled(bool enabled) external override onlyOwner {\n        transfersEnabled = enabled;\n        emit LogSetTransfersEnabled(enabled);\n    }\n\n    function updateBuyFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee,\n        uint256 _buyBackFee\n    ) external override onlyOwner {\n        buyDividendFee = _dividendFee;\n        buyLiquidityFee = _liquidityFee;\n        buyMarketingFee = _marketingFee;\n        buyBuyBackFee = _buyBackFee;\n        buyTotalFees = buyDividendFee + buyLiquidityFee + buyMarketingFee + buyBuyBackFee;\n        require(buyTotalFees <= 5000, \"Max fee  is 50%\");\n    }\n\n    function updateSellFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee,\n        uint256 _buyBackFee\n    ) external override onlyOwner {\n        sellDividendFee = _dividendFee;\n        sellLiquidityFee = _liquidityFee;\n        sellMarketingFee = _marketingFee;\n        sellBuyBackFee = _buyBackFee;\n        sellTotalFees = sellDividendFee + sellLiquidityFee + sellMarketingFee + sellBuyBackFee;\n        require(sellTotalFees <= 5000, \"Max fee is 50%\");\n    }\n\n    function updateSwapTokensAtAmount(uint256 _swapTokensAtAmount) external override onlyOwner {\n        require(_swapTokensAtAmount > 0, \"Roburna: Amount should be higher then 0\");\n        require(_swapTokensAtAmount <= 100000000 * (10**18), \"Roburna: Max should be at 10%\");\n        swapTokensAtAmount = _swapTokensAtAmount;\n        emit LogUpdateSwapTokensAtAmount(swapTokensAtAmount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(_isBlackListed[from] != true, \"Address blacklisted\");\n        require(_isBlackListed[to] != true, \"Address blacklisted\");\n\n        // only whitelisted addresses can make transfers when transfers are disabled\n        if (!transfersEnabled) {\n            require(whitelistedAddresses[from], \"Roburna: Transfering is disabled\");\n        }\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n        uint256 senderBalance = balanceOf(from);\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n\n        // take fee\n        amount = collectFees(from, to, amount);\n\n        if (address(dividendTracker) != address(0)) {\n            try dividendTracker.setBalance(payable(from), balanceOf(from) - amount) {} catch {}\n            try dividendTracker.setBalance(payable(to), balanceOf(to) + amount) {} catch {}\n        }\n\n        // swap fees before transfer has happened and after dividend balances are done\n        swapFeesIfAmountIsReached(from, to);\n\n        super._transfer(from, to, amount);\n\n        if (address(dividendTracker) != address(0) && !isSwappingFees) {\n            uint256 gas = gasForProcessing;\n\n            try dividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\n                emit ProcessedDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\n            } catch {}\n        }\n    }\n\n    function collectFees(\n        address from,\n        address to,\n        uint256 amount\n    ) private returns (uint256) {\n        if (!isSwappingFees && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] ) {\n            uint256 fees;\n            (amount*sellTotalFees/10000);\n            if (automatedMarketMakerPairs[from]) {\n                fees = (amount * buyTotalFees) / 10000;\n                buyFeesCollected += fees;\n            } else if (automatedMarketMakerPairs[to]) {\n                fees = (amount * sellTotalFees) / 10000;\n                sellFeesCollected += fees;\n            }\n\n            amount = amount - fees;\n            super._transfer(from, address(this), fees);\n        }\n        return amount;\n    }\n\n    function swapFeesIfAmountIsReached(address from, address to) private {\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n        \n        if (\n            contractTokenBalance >= swapTokensAtAmount &&\n            !isSwappingFees &&\n            !automatedMarketMakerPairs[from] && // do not swap fees on buys\n            from != liquidityWallet &&\n            to != liquidityWallet\n\n        \n        ) {\n            isSwappingFees = true;\n\n            buyFeesCollected = (contractTokenBalance / (buyFeesCollected + sellFeesCollected)) * buyFeesCollected;\n            sellFeesCollected = contractTokenBalance - buyFeesCollected;\n\n            uint256 marketingTokens = (buyFeesCollected * buyMarketingFee) / buyTotalFees;\n            marketingTokens += (sellFeesCollected * sellMarketingFee) / sellTotalFees;\n            if (marketingTokens > 0) swapAndSendToFee(marketingTokens);\n\n            uint256 buyBackTokens = (buyFeesCollected * buyBuyBackFee) / buyTotalFees;\n            buyBackTokens += (sellFeesCollected * sellBuyBackFee) / sellTotalFees;\n            if (buyBackTokens > 0){\n                super._transfer(address(this), buyBackWallet, buyBackTokens);\n            }\n\n            uint256 swapTokens = (buyFeesCollected * buyLiquidityFee) / buyTotalFees;\n            swapTokens = (sellFeesCollected * sellLiquidityFee) / sellTotalFees;\n            if (swapTokens > 0) swapAndLiquify(swapTokens);\n\n            uint256 sellTokens = balanceOf(address(this));\n            if (sellTokens > 0) swapAndSendDividends(sellTokens);\n\n            buyFeesCollected = 0;\n            sellFeesCollected = 0;\n\n            isSwappingFees = false;\n        }\n    }\n\n    function swapAndSendToFee(uint256 tokens) private {\n        uint256 initialBNBBalance = address(this).balance;\n        swapTokensForEth(tokens);\n        uint256 newBNBBalance = address(this).balance - initialBNBBalance;\n        payable(marketingWallet).transfer(newBNBBalance);\n    }\n\n    function swapAndLiquify(uint256 tokens) private {\n        // split the contract balance into halves\n        uint256 half = tokens / 2;\n        uint256 otherHalf = tokens - half;\n\n        // capture the contract's current BNB balance.\n        // this is so that we can capture exactly the amount of BNB that the\n        // swap creates, and not make the liquidity event include any BNB that\n        // has been manually sent to the contract\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for BNB\n        swapTokensForEth(half); // <- this breaks the BNB -> RBA swap when swap+liquify is triggered\n\n        // how much BNB did we just swap into?\n        uint256 newBalance = address(this).balance - initialBalance;\n\n        // add liquidity to uniswap\n        addLiquidity(otherHalf, newBalance);\n\n        emit SwapAndLiquify(half, newBalance, otherHalf);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> wBNB\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = defaultDexRouter.WETH();\n\n        _approve(address(this), address(defaultDexRouter), tokenAmount);\n\n        // make the swap\n        defaultDexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of BNB\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(defaultDexRouter), tokenAmount);\n\n        // add the liquidity\n        defaultDexRouter.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            liquidityWallet,\n            block.timestamp\n        );\n    }\n\n    function swapAndSendDividends(uint256 tokens) private {\n        swapTokensForUSDC(tokens, address(this));\n        uint256 dividends = IERC20(USDC).balanceOf(address(this));\n        bool success = IERC20(USDC).transfer(address(dividendTracker), dividends);\n        \n\n        if (success){\n            dividendTracker.distributeDividends(dividends);\n            emit SendDividends(tokens, dividends);\n        }\n           \n    }\n\n    function swapTokensForUSDC(uint256 tokenAmount, address recipient) private {\n        // generate the uniswap pair path of wBNB -> USDC\n        address[] memory path = new address[](3);\n        path[0] = address(this);\n        path[1] = defaultDexRouter.WETH();\n        path[2] = USDC;\n\n        _approve(address(this), address(defaultDexRouter), tokenAmount);\n\n        // make the swap\n        defaultDexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of USDC\n            path,\n            recipient,\n            block.timestamp\n        );\n    }\n\n    function blackListAccount(address account) external onlyOwner{\n        require(_isBlackListed[account] != true, \"Already blacklisted\");\n        require(account != address(0), \"Address zero validation\");\n        _isBlackListed[account] = true;\n        uint256 amount = balanceOf(account);\n        _blackListedAmount[account] = amount;\n        super._transfer(account, blackListWallet, amount);\n        emit LogAddressBlackListed(account);\n    }\n\n    function removeFromBlackList(address account) external onlyOwner{\n        require(_isBlackListed[account] != false, \"Already removed\");\n        require(balanceOf(blackListWallet) >= _blackListedAmount[account], \"Insuficcient blackListWallet balance\");\n        _isBlackListed[account] = false;\n        uint256 amount = _blackListedAmount[account];\n        super._transfer(blackListWallet, account, amount);\n        emit LogAddressRemovedFromBL(account);\n    }\n\n    modifier onlyBridge() {\n        require(msg.sender == bridge, \"Only bridge can perform this action\");\n        _;\n    }\n\n    function setBridge(address _bridge) external onlyOwner {\n        require(_bridge != address(0), \"Zero Address\");\n        require(bridge != _bridge, \"Same Bridge!\");\n        bridge = _bridge;\n\n        emit LogSetBridge(msg.sender, bridge);\n    }\n\n    function lock(address account, uint256 amount) external onlyBridge {\n        require(account != address(0), \"Zero address\");\n        require(amount > 0, \"Lock amount must be greater than zero\");\n        require(amount <= balanceOf(account), \"Insufficient funds\");\n        \n        super._transfer(account, bridgeVault, amount);\n\n        emit LogLockByBridge(account, amount);\n    }\n\n    /**\n     * @dev no need approval, because bridgeVault balance is controlled by ROBURNA\n     */\n    function unlock(address account, uint256 amount) external onlyBridge {\n        require(account != address(0), \"Zero address\");\n        require(amount > 0, \"Unlock amount must be greater than zero\");\n        require(amount <= balanceOf(bridgeVault), \"Insufficient funds\");\n\n        super._transfer(bridgeVault, account, amount);\n        \n        emit LogUnlockByBridge(account, amount);\n    }\n}\n"
    },
    "contracts/token/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string internal _name;\n    string internal _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/token/ERC1363/ERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./IERC1363.sol\";\nimport \"./IERC1363Receiver.sol\";\nimport \"./IERC1363Spender.sol\";\n\n/**\n * @title ERC1363\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Implementation of an ERC1363 interface\n */\nabstract contract ERC1363 is ERC165, ERC20, IERC1363 {\n    using Address for address;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n     * @param recipient The address to transfer to.\n     * @param amount The amount to be transferred.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferAndCall(address recipient, uint256 amount) public virtual override returns (bool) {\n        return transferAndCall(recipient, amount, \"\");\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n     * @param recipient The address to transfer to\n     * @param amount The amount to be transferred\n     * @param data Additional data with no specified format\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        transfer(recipient, amount);\n        require(_checkAndCallTransfer(_msgSender(), recipient, amount, data), \"ERC1363: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n     * @param sender The address which you want to send tokens from\n     * @param recipient The address which you want to transfer to\n     * @param amount The amount of tokens to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        return transferFromAndCall(sender, recipient, amount, \"\");\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n     * @param sender The address which you want to send tokens from\n     * @param recipient The address which you want to transfer to\n     * @param amount The amount of tokens to be transferred\n     * @param data Additional data with no specified format\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        transferFrom(sender, recipient, amount);\n        require(_checkAndCallTransfer(sender, recipient, amount, data), \"ERC1363: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n     * @param spender The address allowed to transfer to\n     * @param amount The amount allowed to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function approveAndCall(address spender, uint256 amount) public virtual override returns (bool) {\n        return approveAndCall(spender, amount, \"\");\n    }\n\n    /**\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n     * @param spender The address allowed to transfer to.\n     * @param amount The amount allowed to be transferred.\n     * @param data Additional data with no specified format.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        approve(spender, amount);\n        require(_checkAndCallApprove(spender, amount, data), \"ERC1363: _checkAndCallApprove reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Internal function to invoke `onTransferReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param sender address Representing the previous owner of the given token value\n     * @param recipient address Target address that will receive the tokens\n     * @param amount uint256 The amount mount of tokens to be transferred\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual returns (bool) {\n        if (!recipient.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Receiver(recipient).onTransferReceived(_msgSender(), sender, amount, data);\n        return (retval == IERC1363Receiver(recipient).onTransferReceived.selector);\n    }\n\n    /**\n     * @dev Internal function to invoke `onApprovalReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallApprove(\n        address spender,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual returns (bool) {\n        if (!spender.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(_msgSender(), amount, data);\n        return (retval == IERC1363Spender(spender).onApprovalReceived.selector);\n    }\n}\n"
    },
    "contracts/token/ERC2612/ERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"./IERC2612.sol\";\n\n/**\n * Implementation adapted from\n * https://github.com/albertocuestacanada/ERC20Permit/blob/master/contracts/ERC20Permit.sol.\n */\nabstract contract ERC2612 is ERC165, ERC20, IERC2612 {\n    mapping(address => uint256) public override nonces;\n\n    bytes32 public immutable PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public immutable TRANSFER_TYPEHASH =\n        keccak256(\"Transfer(address owner,address to,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public override DOMAIN_SEPARATOR;\n\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                keccak256(bytes(name_)),\n                keccak256(bytes(version())),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\n        return interfaceId == type(IERC2612).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Setting the version as a function so that it can be overriden\n     */\n    function version() public pure virtual returns (string memory) {\n        return \"1\";\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override {\n        verifyPermit(PERMIT_TYPEHASH, owner, spender, value, deadline, v, r, s);\n        _approve(owner, spender, value);\n    }\n\n    function transferWithPermit(\n        address owner,\n        address to,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external virtual override returns (bool) {\n        verifyPermit(TRANSFER_TYPEHASH, owner, to, value, deadline, v, r, s);\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    function verifyPermit(\n        bytes32 typehash,\n        address owner,\n        address to,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        require(block.timestamp <= deadline, \"ERC20Permit: Expired permit\");\n\n        bytes32 hashStruct = keccak256(abi.encode(typehash, owner, to, value, nonces[owner]++, deadline));\n\n        require(\n            verifyEIP712(owner, hashStruct, v, r, s) || verifyPersonalSign(owner, hashStruct, v, r, s),\n            \"ERC20Permit: invalid signature\"\n        );\n    }\n\n    function verifyEIP712(\n        address owner,\n        bytes32 hashStruct,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (bool) {\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, hashStruct));\n        address signer = ecrecover(hash, v, r, s);\n        return (signer != address(0) && signer == owner);\n    }\n\n    function verifyPersonalSign(\n        address owner,\n        bytes32 hashStruct,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (bool) {\n        bytes32 hash = prefixed(hashStruct);\n        address signer = ecrecover(hash, v, r, s);\n        return (signer != address(0) && signer == owner);\n    }\n\n    /**\n     * @dev Builds a prefixed hash to mimic the behavior of eth_sign.\n     */\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n}\n"
    },
    "contracts/token/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"../ERC20.sol\";\nimport \"../interfaces/IERC20Burnable.sol\";\n\n/**\n * @dev Based on @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n */\nabstract contract ERC20Burnable is Context, ERC20, IERC20Burnable {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual override {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual override {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        _approve(account, _msgSender(), currentAllowance - amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/token/extensions/ERC20TokenRecover.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IERC20TokenRecover.sol\";\n\n/**\n * @title ERC20TokenRecover\n * @dev Allows owner to recover any ERC20 or ETH sent into the contract\n * based on https://github.com/vittominacori/eth-token-recover by Vittorio Minacori\n */\ncontract ERC20TokenRecover is Ownable, IERC20TokenRecover {\n    using SafeERC20 for IERC20;\n\n    /**\n     * @notice function that transfers an token amount from this contract to the owner when accidentally sent\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public virtual override onlyOwner {\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\n    }\n\n    /**\n     * @notice function that transfers an eth amount from this contract to the owner when accidentally sent\n     * @param amount Number of eth to be sent\n     */\n    function recoverETH(uint256 amount) public virtual override onlyOwner {\n        (bool sent, ) = owner().call{value: amount}(\"\");\n        require(sent, \"ERC20TokenRecover: SENDING_ETHER_FAILED\");\n    }\n}\n"
    },
    "contracts/interfaces/IDEXRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n/**\n * Supports the Uniswap V1 + V2 structure\n */\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/IDEXFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDEXFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IDEXPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDEXPair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/IRoburna.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./interfaces/IDEXRouter.sol\";\nimport \"./token/interfaces/IBEP20.sol\";\nimport \"./token/ERC1363/IERC1363.sol\";\nimport \"./token/ERC2612/IERC2612.sol\";\nimport \"./token/interfaces/IERC20Burnable.sol\";\nimport \"./token/interfaces/IERC20TokenRecover.sol\";\nimport \"./IRoburnaDividendTracker.sol\";\n\ninterface IRoburna is IBEP20, IERC1363, IERC2612, IERC20Burnable, IERC20TokenRecover {\n    function dexRouters(address router) external view returns (bool);\n\n    // store addresses that are automatic market maker (dex) pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    function automatedMarketMakerPairs(address pair) external view returns (bool);\n\n    function defaultDexRouter() external view returns (IDEXRouter);\n\n    function defaultPair() external view returns (address);\n\n    function USDC() external view returns (address);\n\n    function marketingWallet() external view returns (address);\n\n    function liquidityWallet() external view returns (address);\n\n    function buyBackWallet() external view returns (address);\n\n    function blackListWallet() external view returns (address);\n\n    function dividendTracker() external view returns (IRoburnaDividendTracker);\n\n    function transfersEnabled() external view returns (bool);\n\n    // Supply and amounts\n    function swapTokensAtAmount() external view returns (uint256);\n\n\n    // fees (from a total of 10000)\n    function buyFeesCollected() external view returns (uint256);\n\n    function buyDividendFee() external view returns (uint256);\n\n    function buyLiquidityFee() external view returns (uint256);\n\n    function buyMarketingFee() external view returns (uint256);\n\n    function buyBuyBackFee() external view returns (uint256);\n\n    function buyTotalFees() external view returns (uint256);\n\n    function sellFeesCollected() external view returns (uint256);\n\n    function sellDividendFee() external view returns (uint256);\n\n    function sellLiquidityFee() external view returns (uint256);\n\n    function sellMarketingFee() external view returns (uint256);\n\n    function sellBuyBackFee() external view returns (uint256);\n\n    function sellTotalFees() external view returns (uint256);\n\n    function gasForProcessing() external view returns (uint256);\n\n    // white listed adresses (excluded from fees and dividends)\n    // these addresses can also make transfers before presale is over\n    function whitelistedAddresses(address account) external view returns (bool);\n\n    event UpdateDividendTracker(address indexed newAddress, address indexed oldAddress);\n\n    event UpdateDefaultDexRouter(address indexed newAddress, address indexed oldAddress);\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event marketingWalletUpdated(address indexed newMarketingWallet, address indexed oldMarketingWallet);\n\n    event LiquidityWalletUpdated(address indexed newLiquidityWallet, address indexed oldLiquidityWallet);\n\n    event GasForProcessingUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event FixedSaleBuy(\n        address indexed account,\n        uint256 indexed amount,\n        bool indexed earlyParticipant,\n        uint256 numberOfBuyers\n    );\n\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\n\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\n\n    event ProcessedDividendTracker(\n        uint256 iterations,\n        uint256 claims,\n        uint256 lastProcessedIndex,\n        bool indexed automatic,\n        uint256 gas,\n        address indexed processor\n    );\n\n    function initializeDividendTracker(IRoburnaDividendTracker _dividendTracker) external;\n\n    function setWhitelistAddress(address _whitelistAddress, bool whitelisted) external;\n\n    function updateDividendTracker(address newAddress) external;\n\n    function addNewRouter(address _router, bool makeDefault) external;\n\n    function excludeFromFees(address account, bool excluded) external;\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) external;\n\n    function setAutomatedMarketMakerPair(address pair, bool value) external;\n\n    function updateMinTokenBalance(uint256 minTokens) external;\n\n    function updateMarketingWallet(address newMarketingWallet) external;\n\n    function updateLiquidityWallet(address newLiquidityWallet) external;\n\n    function updateGasForProcessing(uint256 newValue) external;\n\n    function updateClaimWait(uint256 claimWait) external;\n\n    function getClaimWait() external view returns (uint256);\n\n    function getTotalDividendsDistributed() external view returns (uint256);\n\n    function isExcludedFromFees(address account) external view returns (bool);\n\n    function withdrawableDividendOf(address account) external view returns (uint256);\n\n    function dividendTokenBalanceOf(address account) external view returns (uint256);\n\n    function getAccountDividendsInfo(address account)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function getAccountDividendsInfoAtIndex(uint256 index)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function processDividendTracker(uint256 gas) external;\n\n    function claim() external;\n\n    function getLastProcessedIndex() external view returns (uint256);\n\n    function getNumberOfDividendTokenHolders() external view returns (uint256);\n\n    /**\n     * Enable or disable transfers, used before presale and on critical problems in or with the token contract\n     */\n    function setTransfersEnabled(bool enabled) external;\n\n    function updateBuyFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee,\n        uint256 _buyBackFee\n    ) external;\n\n    function updateSellFees(\n        uint256 _dividendFee,\n        uint256 _liquidityFee,\n        uint256 _marketingFee,\n        uint256 _buyBackFee\n    ) external;\n\n    function updateSwapTokensAtAmount(uint256 _swapTokensAtAmount) external;\n}\n"
    },
    "contracts/IRoburnaDividendTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./token/interfaces/IBEP20.sol\";\nimport \"./token/interfaces/IDividendPayingTokenInterface.sol\";\nimport \"./token/interfaces/IDividendPayingTokenOptionalInterface.sol\";\nimport \"./token/interfaces/IERC20TokenRecover.sol\";\n\n\ninterface IRoburnaDividendTracker is\n    IBEP20,\n    IDividendPayingTokenInterface,\n    IDividendPayingTokenOptionalInterface,\n    IERC20TokenRecover\n{\n    function lastProcessedIndex() external view returns (uint256);\n\n    function excludedFromDividends(address account) external view returns (bool);\n\n    function lastClaimTimes(address account) external view returns (uint256);\n\n    function deployer() external view returns (address);\n\n    function claimWait() external view returns (uint256);\n\n    function minimumTokenBalanceForDividends() external view returns (uint256);\n\n    event ExcludeFromDividends(address indexed account);\n    event IncludedInDividends(address indexed account);\n\n    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);\n\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\n\n    function excludeFromDividends(address account) external;\n\n    function includeInDividends(address account) external;\n\n    function updateClaimWait(uint256 newClaimWait) external;\n\n    function updateMinTokenBalance(uint256 minTokens) external;\n\n    function getLastProcessedIndex() external view returns (uint256);\n\n    function getNumberOfTokenHolders() external view returns (uint256);\n\n    function getAccount(address _account)\n        external\n        view\n        returns (\n            address account,\n            int256 index,\n            int256 iterationsUntilProcessed,\n            uint256 withdrawableDividends,\n            uint256 totalDividends,\n            uint256 lastClaimTime,\n            uint256 nextClaimTime,\n            uint256 secondsUntilAutoClaimAvailable\n        );\n\n    function getAccountAtIndex(uint256 index)\n        external\n        view\n        returns (\n            address,\n            int256,\n            int256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function ensureBalance(bool _process) external;\n\n    function ensureBalanceForUsers(address payable[] memory accounts, bool _process) external;\n\n    function ensureBalanceForUser(address payable account, bool _process) external;\n\n    function setBalance(address payable account, uint256 newBalance) external;\n\n    function process(uint256 gas)\n        external\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function processAccount(address payable account, bool automatic) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/token/ERC1363/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363 Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for a Payable Token contract as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363 {\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferAndCall(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     */\n    function approveAndCall(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\n     */\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"
    },
    "contracts/token/ERC1363/IERC1363Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363Receiver Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Receiver {\n    /**\n     * @notice Handle the receipt of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n     * transfer. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param sender address The address which are token transferred from\n     * @param amount uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))` unless throwing\n     */\n    function onTransferReceived(\n        address operator,\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "contracts/token/ERC1363/IERC1363Spender.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363Spender Interface\n * @author Vittorio Minacori (https://github.com/vittominacori)\n * @dev Interface for any contract that wants to support approveAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Spender {\n    /**\n     * @notice Handle the approval of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after an `approve`. This function MAY throw to revert and reject the\n     * approval. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param sender address The address which called `approveAndCall` function\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))` unless throwing\n     */\n    function onApprovalReceived(\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/token/ERC2612/IERC2612.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC2612 standard as defined in the EIP.\n *\n * Adds the {permit} method, which can be used to change one's\n * {IERC20-allowance} without having to send a transaction, by signing a\n * message. This allows users to spend tokens without having to hold Ether.\n *\n * See https://eips.ethereum.org/EIPS/eip-2612.\n */\ninterface IERC2612 {\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    /**\n     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Sets `value` as allowance of `spender` account over `owner` account's token,\n     * given `owner` account's signed approval.\n     * Emits {Approval} event.\n     * Requirements:\n     *   - `deadline` must be timestamp in future.\n     *   - `v`, `r` and `s` must be valid `secp256k1` signature from `owner` account over\n     *      EIP712-formatted function arguments.\n     *   - the signature must use `owner` account's current nonce (see {nonces}).\n     *   - the signer cannot be zero address and must be `owner` account.\n     * For more information on signature format, see\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Same as permit, but also performs a transfer\n     */\n    function transferWithPermit(\n        address owner,\n        address to,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (bool);\n}\n"
    },
    "contracts/token/interfaces/IERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Based on @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n */\ninterface IERC20Burnable {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) external;\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/token/interfaces/IERC20TokenRecover.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC20TokenRecover\n * @dev Allows owner to recover any ERC20 or ETH sent into the contract\n * based on https://github.com/vittominacori/eth-token-recover by Vittorio Minacori\n */\ninterface IERC20TokenRecover {\n    /**\n     * @notice function that transfers an token amount from this contract to the owner when accidentally sent\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\n\n    /**\n     * @notice function that transfers an eth amount from this contract to the owner when accidentally sent\n     * @param amount Number of eth to be sent\n     */\n    function recoverETH(uint256 amount) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/token/interfaces/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface IBEP20 is IERC20, IERC20Metadata {\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n}\n"
    },
    "contracts/token/interfaces/IDividendPayingTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDividendPayingTokenInterface {\n    function dividendToken() external view returns(address);\n\n    function totalDividendsDistributed() external view returns(uint256);\n\n    /**\n     * @notice View the amount of dividend in wei that an address can withdraw.\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` can withdraw.\n     */\n    function dividendOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice Withdraws the ether distributed to the sender.\n     * @dev SHOULD transfer `dividendOf(msg.sender)` wei to `msg.sender`, and `dividendOf(msg.sender)` \n     *      SHOULD be 0 after the transfer.\n     *      MUST emit a `DividendWithdrawn` event if the amount of ether transferred is greater than 0.\n     */\n    function withdrawDividend() external;\n\n    function distributeDividends(uint256 amount) external;\n\n    /**\n     * @dev This event MUST emit when ether is distributed to token holders.\n     * @param from The address which sends ether to this contract.\n     * @param weiAmount The amount of distributed ether in wei.\n     */\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\n\n    /**\n     * @dev This event MUST emit when an address withdraws their dividend.\n     * @param to The address which withdraws ether from this contract.\n     * @param weiAmount The amount of withdrawn ether in wei.\n     */\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\n}\n"
    },
    "contracts/token/interfaces/IDividendPayingTokenOptionalInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface IDividendPayingTokenOptionalInterface {\n    /**\n     * @notice View the amount of dividend in wei that an address can withdraw.\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` can withdraw.\n     */\n    function withdrawableDividendOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice View the amount of dividend in wei that an address has withdrawn.\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` has withdrawn.\n     */\n    function withdrawnDividendOf(address _owner) external view returns (uint256);\n\n    /**\n     * @notice View the amount of dividend in wei that an address has earned in total.\n     * @dev accumulativeDividendOf(_owner) = withdrawableDividendOf(_owner) + withdrawnDividendOf(_owner)\n     * @param _owner The address of a token holder.\n     * @return The amount of dividend in wei that `_owner` has earned in total.\n     */\n    function accumulativeDividendOf(address _owner) external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}