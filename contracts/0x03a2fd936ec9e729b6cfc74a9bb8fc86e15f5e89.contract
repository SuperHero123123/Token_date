{{
  "language": "Solidity",
  "sources": {
    "contracts/EAGLE.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\n/*\r\n        ███████╗ █████╗  ██████╗ ██╗     ███████╗\r\n        ██╔════╝██╔══██╗██╔════╝ ██║     ██╔════╝\r\n        █████╗  ███████║██║  ███╗██║     █████╗\r\n        ██╔══╝  ██╔══██║██║   ██║██║     ██╔══╝\r\n        ███████╗██║  ██║╚██████╔╝███████╗███████╗\r\n        ╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝\r\n*/\r\n\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./Interface/IEAGLENFT.sol\";\r\nimport \"./Interface/utils/Strings.sol\";\r\nimport \"./Interface/access/Ownable.sol\";\r\nimport \"./Interface/token/ERC20/ERC20.sol\";\r\nimport \"./Interface/pancake/IPancakeRouter02.sol\";\r\nimport \"./Interface/pancake/IPancakeFactory.sol\";\r\nimport \"./Interface/pancake/IPancakePair.sol\";\r\nimport \"./Wrap.sol\";\r\n\r\n// @custom:security-contact EAGLE TEAM\r\ncontract EAGLE is ERC20, Ownable {\r\n    using Strings for uint256;\r\n    address public MarketingWallet;\r\n    address public BonusAccount;\r\n\r\n    // @EAGLENFTAddress NFT address\r\n    // @usdt usdt address\r\n    // @pancakeSwapV2Router pancakeSwap router address\r\n    // @pancakeSwapV2Pair pancakeSwap pair address(EAGLE/USDT)(POOL ADDRESS)\r\n    IEAGLENFT public EAGLENFTAddress;\r\n    IERC20 public usdt;\r\n    IPancakeRouter02 public pancakeSwapV2Router;\r\n    IPancakePair public pancakeSwapV2Pair;\r\n    uint256 private coolingTime = 30 days;\r\n\r\n    // @whitelist Free service charge for white list\r\n    mapping(address => bool) public whitelist;\r\n    Wrap public wrap;\r\n    uint256 private txFee;\r\n    uint public lastFeeIndex;\r\n    uint256 private redFee = 15 * 10 ** 18;\r\n    uint private maxFeeNum = 20;\r\n    // Tax payment switch or not\r\n    bool public swapAndLiquifyEnabled;\r\n\r\n    constructor(address _eagleNft) ERC20(\"EAGLE\", \"EGL\") {\r\n        address coinAddr = 0x3d0DD066c198DD8bA115530d80951aDc54df306a;\r\n        _mint(coinAddr, 10000000 * 10**decimals());\r\n        MarketingWallet = 0x395738913e871a512057EF77bF578f1672e4DDD0;\r\n        EAGLENFTAddress = IEAGLENFT(_eagleNft);\r\n        usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n        IPancakeRouter02 _pancakeSwapv2Route = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        address _pancakeV2Pair = IPancakeFactory(_pancakeSwapv2Route.factory()).createPair(address(this), address(usdt));\r\n        pancakeSwapV2Router = _pancakeSwapv2Route;\r\n        pancakeSwapV2Pair = IPancakePair(_pancakeV2Pair);\r\n        wrap = new Wrap(address(usdt), address(this));\r\n        whitelist[MarketingWallet] = true;\r\n        whitelist[coinAddr] = true;\r\n        whitelist[address(this)] = true;\r\n        whitelist[_msgSender()] = true;\r\n        usdt.approve(address(pancakeSwapV2Router), ~uint256(0));\r\n        _approve(address(this), address(pancakeSwapV2Router), ~uint256(0));\r\n        BonusAccount = coinAddr;\r\n    }\r\n\r\n    // @addWhitelist add whitelist Address and Free service charge for white list\r\n    // onlyOwner add whitelist\r\n    function addWhitelist(address _newEntry) external onlyOwner {\r\n        whitelist[_newEntry] = true;\r\n    }\r\n\r\n    // @removeWhitelist remove whitelist Address and Free service charge for white list\r\n    // onlyOwner remove whitelist\r\n    function removeWhitelist(address _newEntry) external onlyOwner {\r\n        require(whitelist[_newEntry], \"Previous not in whitelist\");\r\n        whitelist[_newEntry] = false;\r\n    }\r\n\r\n    function usdtWithdraw() external onlyOwner {\r\n        usdt.transfer(_msgSender(), usdt.balanceOf(address(this)));\r\n    }\r\n\r\n    // @updateSwapAndLiquifupdateSwapAndLiquifyEnabledyEnabled Control tax payment switch\r\n    // Must wait until the end of the first liquidity addition Can be opened\r\n    function updateSwapAndLiquifupdateSwapAndLiquifyEnabledyEnabled(bool status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        swapAndLiquifyEnabled = status;\r\n    }\r\n\r\n    //  to receive ETH from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    //  withdraw BNB\r\n    function emergencyBNBWithdraw() public onlyOwner {\r\n        (bool success, ) = address(owner()).call{value: address(this).balance}(\"\");\r\n        require(success, \"Address: unable to send value, may have reverted\");\r\n    }\r\n\r\n    // @addLiquidityUseUsdt add liquidity use usdt and EAGLE to EAGLE/USDT POOL in pancakeSwap\r\n    // tokenA:EAGLE     tokenB:USDT\r\n    // pancakeSwap: addLiquidity used token A and B，The liquidity provider is address(this)\r\n    function addLiquidityUseUsdt(\r\n        uint256 tokenAmount,\r\n        uint256 usdtAmount,\r\n        address to\r\n    ) private {\r\n        pancakeSwapV2Router.addLiquidity(\r\n            address(this),\r\n            address(usdt),\r\n            tokenAmount,\r\n            usdtAmount,\r\n            0,\r\n            0,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // @swapTokensForUsdt swap EAGLE to USDT (pancakeSwap EAGLE/USDT POOL)\r\n    // tokenA:EAGLE     tokenB:USDT\r\n    // pancakeSwap: swap EAGLE to token USDT,The user is address(this)\r\n    // only to is address(this)\r\n    function swapTokensForUsdt(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(usdt);\r\n        // make the swap\r\n        pancakeSwapV2Router.swapExactTokensForTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of token\r\n            path,\r\n            address(wrap),\r\n            block.timestamp + 360\r\n        );\r\n        wrap.withdraw();\r\n    }\r\n\r\n    // @swapUsdtAndLiquify swap USDT to EAGLE and add liquidity to EAGLE/USDT POOL\r\n    // tokenA:EAGLE     tokenB:USDT\r\n    // pancakeSwap: swap a half EAGLE to USDT,and addLiquidity EAGLE and USDT to pancakePool\r\n    function swapUsdtAndLiquify(uint256 tokenAmount) private {\r\n        uint256 half = (tokenAmount * 8) / 100;\r\n        uint256 otherHalf = tokenAmount - half;\r\n        uint256 balance = usdt.balanceOf(address(this));\r\n        swapTokensForUsdt(otherHalf);\r\n        uint256 newBalance = usdt.balanceOf(address(this)) - balance;\r\n        uint256 backflow = newBalance / 10;\r\n        addLiquidityUseUsdt(half, backflow, address(this));\r\n    }\r\n\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        uint256 trsAmount = amount;\r\n        // Ordinary users need to wait for the opening transaction button after adding liquidity\r\n        if (\r\n            swapAndLiquifyEnabled &&\r\n            !whitelist[from] &&\r\n            !(from == address(this) && to == address(pancakeSwapV2Pair))\r\n        ) {\r\n            // 2.8% is Service Charge\r\n            uint256 feeAmount = (amount * 28) / 1000;\r\n            if (feeAmount > 0) {\r\n                super._transfer(from, address(this), feeAmount);\r\n                if (to == address(pancakeSwapV2Pair)) {\r\n                    dealWithTxFee(feeAmount + txFee);\r\n                    txFee = 0;\r\n                } else {\r\n                    txFee = feeAmount;\r\n                }\r\n            }\r\n            trsAmount = amount - feeAmount;\r\n        }\r\n        super._transfer(from, to, trsAmount);\r\n    }\r\n\r\n    // @usdtDistribute When the contract balance reaches 50 usdt, air drop usdt will be distributed\r\n    function dealWithTxFee(uint256 tokenAmount) private {\r\n        uint256 fee = (tokenAmount * 14) / 100;\r\n        uint256 NFTRewrd = tokenAmount - fee;\r\n        super._transfer(address(this), MarketingWallet, fee);\r\n        swapUsdtAndLiquify(NFTRewrd);\r\n        uint256 usdtBalance = usdt.balanceOf(address(this));\r\n        if (usdtBalance >= redFee) {\r\n            usdtDistribute(usdtBalance);\r\n        }\r\n    }\r\n\r\n    // @usdtDistribute When the contract balance reaches 50 usdt, air drop usdt will be distributed\r\n    // 2.8% is Service Charge\r\n    // 0.4% (14%) => Marking Wallet; 0.4% (14%) swapUsdtAndLiquify（backflow to EAGLE/USDT POOL）\r\n    // 0.5 (18%)% => tigerEagleard Holders ; 1.5% (54%) => PhoenixEagleCard Holders\r\n    // When the contract balance reaches 50 usdt, air drop usdt will be distributed\r\n    function usdtDistribute(uint256 usdtBalance) private  {\r\n        (address[] memory holdAddress, uint256[] memory types) = EAGLENFTAddress.getNFTConfig();\r\n        uint128 _tigerEaglecardNum = 0;\r\n        uint128 _PhoenixEagleCardNum = 0;\r\n        uint thisIndexCount = 0;\r\n        uint256[] memory rewardIndex = new uint256[](maxFeeNum);\r\n        while(thisIndexCount < maxFeeNum){\r\n            if(lastFeeIndex == types.length) lastFeeIndex = 0;\r\n            if (types[lastFeeIndex] == 0) {\r\n                _tigerEaglecardNum+=1;\r\n            } else if (types[lastFeeIndex] == 1) {\r\n                _PhoenixEagleCardNum+=1;\r\n            }\r\n            rewardIndex[thisIndexCount++] = lastFeeIndex++;\r\n        }\r\n        uint256 tigerOwnerPart;\r\n        if(_tigerEaglecardNum > 0){\r\n            tigerOwnerPart = (usdtBalance * 25) / 100 / _tigerEaglecardNum;\r\n        }\r\n        uint256 phoenixOwnerPart;\r\n        if(_PhoenixEagleCardNum > 0){\r\n            phoenixOwnerPart = (usdtBalance * 75) / 100 / _PhoenixEagleCardNum;\r\n        }\r\n        for (uint256 i = 0; i < maxFeeNum; i++) {\r\n            if (types[rewardIndex[i]] == 0) {\r\n                usdt.transfer(holdAddress[rewardIndex[i]], tigerOwnerPart);\r\n            } else if (types[rewardIndex[i]] == 1) {\r\n                usdt.transfer(holdAddress[rewardIndex[i]], phoenixOwnerPart);\r\n            }\r\n        }\r\n    }\r\n\r\n    // @receiveNFTrewards Receive the award of this NFT\r\n    function receiveNFTrewards(uint256 _tokenId) external {\r\n        (,uint256 nftCreationTimeInterval,uint256 nowReceivingBatch) = getNftCon(_tokenId);\r\n        require(\r\n            _msgSender() == EAGLENFTAddress.ownerOf(_tokenId),\r\n            \"you not owner this NFT\"\r\n        );\r\n        require(\r\n            nftCreationTimeInterval > coolingTime,\r\n            \"this nft create time not lagger 30 days,please wait!!!\"\r\n        );\r\n        uint256 coinReward;\r\n        for (uint256 i = 1; i <= nowReceivingBatch; i++) {\r\n            if (EAGLENFTAddress.getNFTDraw(_tokenId, i) == false) {\r\n                coinReward += getNFTThisMonthReward(_tokenId, i);\r\n                EAGLENFTAddress.setNFTConfigReceiveOnlyEAGLETOKEN(_tokenId, i);\r\n            }\r\n        }\r\n        super._transfer(BonusAccount, _msgSender(), coinReward);\r\n    }\r\n\r\n    function getNftCon(uint256 _tokenId)public view returns(uint256,uint256,uint256){\r\n        uint256 NFTCreateTime = EAGLENFTAddress.getNFTCreateTime(_tokenId);\r\n        uint256 nftCreationTimeInterval = block.timestamp - NFTCreateTime;\r\n        uint256 nowReceivingBatch = nftCreationTimeInterval / coolingTime;\r\n        if (nowReceivingBatch > 12) {\r\n            nowReceivingBatch = 12;\r\n        }\r\n        return (NFTCreateTime,nftCreationTimeInterval,nowReceivingBatch);\r\n    }\r\n\r\n    // @getReward Check how much the NFT can charge\r\n    function getReward(uint256 _tokenId) public view returns (uint256) {\r\n        (,,uint256 nowReceivingBatch) = getNftCon(_tokenId);\r\n        uint256 coinReward;\r\n        for (uint256 i = 1; i <= nowReceivingBatch; i++) {\r\n            if (EAGLENFTAddress.getNFTDraw(_tokenId, i) == false) {\r\n                coinReward += getNFTThisMonthReward(_tokenId, i);\r\n            }\r\n        }\r\n        return coinReward;\r\n    }\r\n\r\n    // @getNFTThisMonthReward Query how much the NFT can collect in the first month\r\n    function getNFTThisMonthReward(uint256 _tokenId, uint256 monthId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(monthId > 0 && monthId <= 12, \"monthId must be 1-12\");\r\n        uint256 coinRewardNow;\r\n        if (EAGLENFTAddress.getNFTEAGLESerial(_tokenId) == 0) {\r\n            if (monthId <= 6) {\r\n                coinRewardNow = 200 * 10**decimals();\r\n            } else {\r\n                coinRewardNow = 100 * 10**decimals();\r\n            }\r\n        } else if (EAGLENFTAddress.getNFTEAGLESerial(_tokenId) == 1) {\r\n            if (monthId <= 6) {\r\n                coinRewardNow = 100 * 10**decimals();\r\n            } else {\r\n                coinRewardNow = 50 * 10**decimals();\r\n            }\r\n        }\r\n        return coinRewardNow;\r\n    }\r\n\r\n    // @getNFTPoolDates Get the NFT pool data\r\n    function getNFTPoolDates(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (string memory)\r\n    {\r\n        string memory cardName = EAGLENFTAddress.tokenType(_tokenId);\r\n        string memory name = string(\r\n            abi.encodePacked(cardName, \" EAGLE NFT#\", _tokenId.toString())\r\n        );\r\n        (uint256 NFTCreateTime,,uint256 nowReceivingBatch) = getNftCon(_tokenId);\r\n        uint256 drawMonth;\r\n        uint256 availableQuantity = getReward(_tokenId);\r\n        for (uint256 i = 1; i <= nowReceivingBatch; i++) {\r\n            if (EAGLENFTAddress.getNFTDraw(_tokenId, i) == true) {\r\n                drawMonth += 1;\r\n            }\r\n        }\r\n        bool receiveOrNot = EAGLENFTAddress.getNFTDraw(\r\n            _tokenId,\r\n            nowReceivingBatch\r\n        );\r\n        string memory thisMonthReceiv = receiveOrNot ? \"true\" : \"false\";\r\n        if (nowReceivingBatch == 12) {\r\n            nowReceivingBatch = 11;\r\n        }\r\n        uint256 nextCollectCountDown = NFTCreateTime + (coolingTime * (nowReceivingBatch+1));\r\n\r\n        string memory description = string(\r\n            abi.encodePacked(\r\n                '\",\"DrawMonth\":',\r\n                drawMonth.toString(),\r\n                ',\"NotDrawMonth\":',\r\n                (12 - drawMonth).toString(),\r\n                ',\"availableQuantity\":',\r\n                availableQuantity.toString(),\r\n                ',\"ReceiveOrNot\":\"',\r\n                thisMonthReceiv,\r\n                '\",\"NextCollectCountDown\":',\r\n                nextCollectCountDown.toString(),\r\n                \"\"\r\n            )\r\n        );\r\n\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    '{\"token_id\":',\r\n                    _tokenId.toString(),\r\n                    ',\"name\":\"',\r\n                    name,\r\n                    description,\r\n                    '}'\r\n                )\r\n            );\r\n    }\r\n}"
    },
    "contracts/Wrap.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\nimport \"./Interface/token/ERC20/IERC20.sol\";\r\n\r\npragma solidity ^0.8.10;\r\n\r\ncontract Wrap {\r\n    address public eagle;\r\n    IERC20 public usdt;\r\n\r\n    constructor(address _usdt,address _eagle) {\r\n        eagle = _eagle;\r\n        usdt = IERC20(_usdt);\r\n    }\r\n\r\n    function withdraw() public {\r\n        require(msg.sender == eagle, \"only eagle can withdraw\");\r\n        uint256 usdtBalance = usdt.balanceOf(address(this));\r\n        if (usdtBalance > 0) {\r\n            usdt.transfer(eagle, usdtBalance);\r\n        }\r\n    }\r\n\r\n}"
    },
    "contracts/Interface/IEAGLENFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./token/ERC721/IERC721.sol\";\r\n\r\ninterface IEAGLENFT is IERC721 {\r\n    // @initEagleToken This function can only be used once\r\n    // The purpose is to load EagleToken address\r\n    function initEagleToken(address _EagleToken) external;\r\n\r\n    // @setNFTConfigReceiveOnlyEAGLETOKEN Set NFTConfig Receive Only EAGLETOKEN\r\n    // Receive the reward of the specified month\r\n    // Only after receiving rewards can they be sold in the market\r\n    function setNFTConfigReceiveOnlyEAGLETOKEN(uint256 _tokenId, uint256 _batch)\r\n        external;\r\n\r\n    // @getNFTCreateTime Query appoint NFT create time\r\n    function getNFTCreateTime(uint256 tokenId) external view returns (uint256);\r\n\r\n    // @getNFTDraw Query Whether the reward has been received in the specified month\r\n    function getNFTDraw(uint256 tokenId, uint256 _batch)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    // @tokenType Query the type of an NFT\r\n    function tokenType(uint256 tokenId) external view returns (string memory);\r\n\r\n    // @getNFTEAGLESerial get nft type\r\n    function getNFTEAGLESerial(uint256 tokenId) external view returns (uint256);\r\n\r\n    // @getNFTCardNumber Query the respective quantity of the current two NFTs\r\n    function getNFTCardNumber()\r\n        external\r\n        pure\r\n        returns (uint128 tigerEaglecardNum, uint128 PhoenixEagleCardNum);\r\n\r\n    // @tokenDescribe Query the Describe of an NFT\r\n    function tokenDescribe(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (string memory);\r\n\r\n    function getNFTConfig()external view returns (address[] memory, uint[] memory);\r\n}\r\n"
    },
    "contracts/Interface/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/Interface/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n"
    },
    "contracts/Interface/pancake/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/Interface/pancake/IPancakeRouter02.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\nimport \"./IPancakeRouter01.sol\";\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"
    },
    "contracts/Interface/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./extensions/IERC20Metadata.sol\";\r\nimport \"../../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "contracts/Interface/pancake/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPancakePair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/Interface/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "contracts/Interface/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n"
    },
    "contracts/Interface/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/Interface/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
    },
    "contracts/Interface/pancake/IPancakeRouter01.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n"
    },
    "contracts/Interface/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}