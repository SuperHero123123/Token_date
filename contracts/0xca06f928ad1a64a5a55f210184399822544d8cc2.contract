// SPDX-License-Identifier: MIT
pragma solidity >=0.8.6;

interface ILPStaking {
    function initalize(address token) external;
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IUniswapV2Router01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function getAmountsOut(uint256 amountIn, address[] calldata path)
        external
        view
        returns (uint256[] memory amounts);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

contract BFC {
    string public name = "BraveFutureCoin";
    string public symbol = "BFC";
    uint8 public decimals = 9;
    mapping(address => mapping(address => uint256)) public allowance;

    // 类似于金融中的通缩概念："如果货币总量减少，每个人手上的货币就变得更值钱了，相当于变相完成了分红"
    uint256 public constant MAX = ~uint256(0);
    uint256 public _tTotal = 2100000 * 10**decimals; //84W 真正的发行量（比如发行了 1w 枚币，精度为0，_tTotal = 10000）
    uint256 public publishTotal = 840000 * 10**decimals;
    uint256 private _rTotal = (MAX - (MAX % _tTotal)); // 最大的一个可以整除 _tTotal 的数，这个数字类似于“虚拟的货币总量”
    mapping(address => uint256) public _rOwned; // 存储用户的虚拟数量
    mapping(address => uint256) public _tOwned; //不参与分红的持有数量
    uint256 public _tFeeTotal;

    mapping(address => bool) public isWhiteList; //排除手续费
    mapping(address => bool) public isExcludedBonus; //没有反射收益，没有分红
    address[] public _excludedBonus; //没有反射收益，没有分红 名单

    uint256 public _taxFee = 2;
    uint256 public _liquidityFee = 2; //2%回流流动池
    uint256 public _marketFee = 1; //1%回购qucc

    IUniswapV2Router02 public uniswapV2Router;
    address public usdtPair;
    address public quccPair;
    mapping(address => bool) public isMarketPair; //lp地址

    address public owner;
    address public daoAddress = 0x85de54E3f3a6865E8891F70926AC1A1b3fb1FaE7;

    address private routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; //uniswapRouter
    address public quccAddress = 0x3c48e47703F16818d7368DBA98897FA35B80F53D; //uniswapRouter
    address public usdtAddress = 0x55d398326f99059fF775485246999027B3197955; //uniswapRouter
    address public marketAddress = 0x000000000000000000000000000000000000dEaD; //qucc接收(黑洞) 营销地址

    bool public inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true; //开启回流
    bool public swapAndLiquifyByLimitOnly = false; //每次回流仅使用minimumTokensBeforeSwap
    uint256 public minimumTokensBeforeSwap = 500 * 10**decimals; //LP手续费到达2500W数量,执行回购操作 5000W / 2

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed holder,
        address indexed spender,
        uint256 value
    );
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    event SwapTokensForTokens(uint256 amountIn, address[] path);

    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor(address _lpStakeAddr) {
        owner = msg.sender;
        ILPStaking(_lpStakeAddr).initalize(address(this));

        _init(_lpStakeAddr);
    }

    modifier onlyOwner() {
        require(owner == msg.sender, "caller is not the owner");
        _;
    }

    function _init(address _lpStakeAddr) internal {
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);
        uniswapV2Router = _uniswapV2Router;
        allowance[address(this)][address(uniswapV2Router)] = MAX;

        usdtPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(
            address(this),
            usdtAddress
        );

        quccPair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(
            address(this),
            quccAddress
        );

        address ethPair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        //设置lp地址, 排除持币分红
        setMarketPairStatus(quccPair, true);
        setMarketPairStatus(usdtPair, true);
        setMarketPairStatus(ethPair, true);

        //排除持币分红
        _setExcludeBonus(_lpStakeAddr);
        _setExcludeBonus(marketAddress);
        _setExcludeBonus(address(this));

        //排除手续费
        isWhiteList[_lpStakeAddr] = true;
        isWhiteList[marketAddress] = true;
        isWhiteList[owner] = true;
        isWhiteList[daoAddress] = true;
        isWhiteList[address(this)] = true;
        isWhiteList[address(0)] = true;

        //预发布token
        _rOwned[daoAddress] = _rTotal;
        emit Transfer(address(0), daoAddress, _tTotal);

        uint256 lpStakeTotal = _tTotal - publishTotal;
        _tokenTransfer(daoAddress, _lpStakeAddr, lpStakeTotal);
    }

    function setOwner(address owner_) public onlyOwner {
        owner = owner_;
    }

    function totalSupply() public view returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view returns (uint256) {
        if (isExcludedBonus[account]) {
            return _tOwned[account]; //不参与分红
        }

        return tokenFromReflection(_rOwned[account]); //参与分红
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, allowance[sender][msg.sender] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            allowance[msg.sender][spender] + addedValue
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            msg.sender,
            spender,
            allowance[msg.sender][spender] - subtractedValue
        );
        return true;
    }

    function tokenFromReflection(uint256 rAmount)
        public
        view
        returns (uint256)
    {
        require(
            rAmount <= _rTotal,
            "Amount must be less than total reflections"
        );
        // 真实的余额 = 虚拟余额 / (虚拟货币总量 / 真实货币总量)
        uint256 currentRate = _getRate();
        return rAmount / currentRate;
    }

    function _getRate() public view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply / tSupply;
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        for (uint256 i = 0; i < _excludedBonus.length; i++) {
            if (
                _rOwned[_excludedBonus[i]] > rSupply ||
                _tOwned[_excludedBonus[i]] > tSupply
            ) return (_rTotal, _tTotal);
            rSupply -= _rOwned[_excludedBonus[i]];
            tSupply -= _tOwned[_excludedBonus[i]];
        }
        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _approve(
        address holder,
        address spender,
        uint256 amount
    ) private {
        require(holder != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        allowance[holder][spender] = amount;
        emit Approval(holder, spender, amount);
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        //执行回购操作
        if (
            swapAndLiquifyEnabled &&
            !inSwapAndLiquify &&
            !isMarketPair[sender] &&
            sender != address(this) &&
            recipient != marketAddress
        ) {
            uint256 contractTokenBalance = balanceOf(address(this));
            bool overMinimumTokenBalance = contractTokenBalance >=
                minimumTokensBeforeSwap;

            if (overMinimumTokenBalance) {
                if (swapAndLiquifyByLimitOnly) {
                    contractTokenBalance = minimumTokensBeforeSwap;
                }

                _swapTokensForEth(contractTokenBalance);
            }
        }

        //transfer amount, it will take tax, burn, liquidity fee
        _tokenTransfer(sender, recipient, amount);
        return true;
    }

    //正常转账
    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        uint256 currentRate = _getRate();
        uint256 rAmount = tAmount * currentRate;

        // 扣除发送人虚拟余额 100%
        _subOwned(sender, tAmount, rAmount);

        //实际到账数量
        uint256 finalTAmount = tAmount;

        if (
            isMarketPair[recipient] &&
            !isWhiteList[sender] &&
            !isWhiteList[recipient]
        ) {
            finalTAmount = takeFee(sender, currentRate, tAmount); //扣减手续费
            rAmount = finalTAmount * currentRate;
        }

        // 接收人收到 88%
        _addOwned(recipient, finalTAmount, rAmount);
        emit Transfer(sender, recipient, finalTAmount);
    }

    function _subOwned(
        address sender,
        uint256 tAmount,
        uint256 rAmount
    ) private {
        _changeOwned(sender, tAmount, rAmount, false);
    }

    function _addOwned(
        address recipient,
        uint256 tAmount,
        uint256 rAmount
    ) private {
        _changeOwned(recipient, tAmount, rAmount, true);
    }

    function _changeOwned(
        address account,
        uint256 tAmount,
        uint256 rAmount,
        bool isAdd
    ) private {
        if (isAdd) {
            if (isExcludedBonus[account]) {
                _tOwned[account] += tAmount;
            }
            _rOwned[account] += rAmount;
        } else {
            if (isExcludedBonus[account]) {
                _tOwned[account] -= tAmount;
            }
            _rOwned[account] -= rAmount;
        }
    }

    //扣减手续费
    function takeFee(
        address sender,
        uint256 currentRate,
        uint256 tAmount
    ) internal returns (uint256 finalTAmount) {
        uint256 _tAmount = 0;

        // 回流
        _tAmount += _chargeUserFee(
            sender,
            usdtPair,
            tAmount,
            _liquidityFee,
            currentRate
        );

        // 回购qucc
        _tAmount += _chargeUserFee(
            sender,
            address(this),
            tAmount,
            _marketFee,
            currentRate
        );

        // 通缩虚拟总量-持币分红
        _tAmount += _takeTaxFee(tAmount, currentRate);

        return tAmount - _tAmount;
    }

    //给手续费用户分配手续费
    function _chargeUserFee(
        address sender,
        address recipient,
        uint256 tAmount,
        uint256 _userFee,
        uint256 currentRate
    ) private returns (uint256 _tAmount) {
        if (_userFee == 0) return 0;

        _tAmount = (tAmount * _userFee) / 100;
        uint256 _rAmount = _tAmount * currentRate;

        _addOwned(recipient, _tAmount, _rAmount);
        emit Transfer(sender, recipient, _tAmount);
    }

    //手续费分红
    function _takeTaxFee(uint256 tAmount, uint256 currentRate)
        private
        returns (uint256 _tAmount)
    {
        if (_taxFee == 0) return 0;

        _tAmount = (tAmount * _taxFee) / 100;
        uint256 _rAmount = _tAmount * currentRate;

        // 剩下3%扣除总的虚拟货币，这时候所有人的 banlanceOf 函数计算都会按照比例增长
        // _rTotal = _rTotal - rProfit;
        _rTotal -= _rAmount;
        _tFeeTotal = _tFeeTotal + _tAmount;
        return _tAmount;
    }

    //设置手续费
    function setTxTaxes(
        uint256 taxFee,
        uint256 liquidityFee,
        uint256 marketFee
    ) external onlyOwner {
        _taxFee = taxFee;
        _liquidityFee = liquidityFee;
        _marketFee = marketFee;
    }

    function swapFeeTokens(uint256 tokenAmount) external onlyOwner {
        _swapTokensForEth(tokenAmount);
    }

    function safeApprove(
        address token,
        address to,
        uint256 value
    ) external onlyOwner {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(
            abi.encodeWithSelector(0x095ea7b3, to, value)
        );
        require(
            success && (data.length == 0 || abi.decode(data, (bool))),
            "TransferHelper: APPROVE_FAILED"
        );
    }

    function _swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = quccAddress;

        // make the swap
        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            marketAddress,
            block.timestamp
        );
        emit SwapTokensForTokens(tokenAmount, path);
    }

    function setMarketPairStatus(address _pair, bool newValue)
        public
        onlyOwner
    {
        isMarketPair[_pair] = newValue;
        if (newValue) {
            //流动池不参与持币分红
            _setExcludeBonus(_pair);
        } else {
            _setIncludeBonus(_pair);
        }
    }

    // 排除分红奖励
    function excludeBonus(address account) external onlyOwner {
        require(!isExcludedBonus[account], "Account is already excluded");
        _setExcludeBonus(account);
    }

    //加入分红奖励
    function includeBonus(address account) external onlyOwner {
        require(isExcludedBonus[account], "Account is already excluded");
        _setIncludeBonus(account);
    }

    function _setExcludeBonus(address account) private {
        if (!isExcludedBonus[account]) {
            isExcludedBonus[account] = true;
            _excludedBonus.push(account);
        }
    }

    function _setIncludeBonus(address account) private {
        if (isExcludedBonus[account]) {
            for (uint256 i = 0; i < _excludedBonus.length; i++) {
                if (_excludedBonus[i] == account) {
                    _excludedBonus[i] = _excludedBonus[
                        _excludedBonus.length - 1
                    ];
                    _tOwned[account] = 0;
                    isExcludedBonus[account] = false;
                    _excludedBonus.pop();
                    break;
                }
            }
        }
    }

    function setisWhiteList(address account, bool newValue) external onlyOwner {
        isWhiteList[account] = newValue;
    }

    function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner {
        minimumTokensBeforeSwap = newLimit;
    }

    function setMarketingWalletAddress(address newAddress) external onlyOwner {
        marketAddress = newAddress;
    }

    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {
        swapAndLiquifyEnabled = _enabled;
    }

    function setSwapAndLiquifyByLimitOnly(bool newValue) external onlyOwner {
        swapAndLiquifyByLimitOnly = newValue;
    }
}