/**
 *Submitted for verification at BscScan.com on 2021-11-16
*/

// SPDX-License-Identifier: MIT
pragma solidity 0.8.1;
interface Ipair{
    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function sync() external;
    function skim(address to) external;
}
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    /**
     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * Reverts with custom message when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
contract Ownable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor (address _addr) {
        _owner = _addr;
        emit OwnershipTransferred(address(0), _addr);
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view  returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public  onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
contract ERC20 {

    mapping (address => uint256) internal _balances;
    mapping (address => mapping (address => uint256)) private _allowances;


    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals;


    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        _name = "BTO TOKEN";
        _symbol = "BTO";
        _decimals = 18;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");

        uint256 trueAmount = _beforeTokenTransfer(sender, recipient, amount);


        _balances[sender] = _balances[sender] - amount;//修改了这个致命bug
        _balances[recipient] = _balances[recipient] + trueAmount;
        emit Transfer(sender, recipient, trueAmount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply + amount;
        _balances[account] = _balances[account] + amount;
        emit Transfer(address(0), account, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual  returns (uint256) { }
}
interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
}

interface IUniswapV2Router02 is IUniswapV2Router01 {

}

interface IUniswapV2Factory {
    event PairCreated(
        address indexed token0,
        address indexed token1,
        address pair,
        uint256
    );
    function createPair(address tokenA, address tokenB)
    external
    returns (address pair);
}


contract BTO is ERC20, Ownable{
    using SafeMath for uint256;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public uniswapV2Pair;
    Ipair public pair_USDT;


    mapping(address => bool) public isPair;
    mapping(address => bool) public isFree;
    mapping(address => bool) public isFree2;
    mapping(uint256 => uint256) public dayPrice;
    mapping(address => address) public parentList;
    mapping(address => bool) public isRoute;


    uint256 public totalNum=900000000*10**18;
    uint256 public lastTime ;

    uint256 public extendTime;
    uint256 public startTime;

    uint256 public rate1 = 100;
    uint256 public rate2 = 300;
    uint256 public rate3 = 300;

    address public totalAddr=0xF2fb0DCA8a9f209Aa16E7Ea4D6CA278ad2F030bb;
    address public totalAddr2=0xE2b9491EB48517775E105E04733A618AD09108b0;

    address public buyAddr=0xaC8c536Db795F8cB7e522CBC244b5aD0025C0d9B;

    address public devAddr1=0x31F1Db49d99aAF9dB7599fa505Fda97F03A2a69A;
    address public devAddr2=0x5c5e12efF177078a429c9c9fe3fBDC3f9bc1A81a;
    address public devAddr3=0x040dAf1002feA27A112A11405D38cf90AA454d49;
    address public holdAddr=0x0000000000000000000000000000000000000000;


    constructor () Ownable(msg.sender){

        IUniswapV2Router02 _uniswapV2Router =
        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        isRoute[0x10ED43C718714eb63d5aA57B78B54704E256024E]=true;
        // Create a uniswap pair for this new token
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
        .createPair(address(this), 0x55d398326f99059fF775485246999027B3197955);
        pair_USDT = Ipair(uniswapV2Pair);

        // set the rest of the contract variables
        uniswapV2Router = _uniswapV2Router;


        _mint(0x56095cd360053C7FeE41b41fb36100Fef2A6eC98, 40000000 * 10**18);

        isFree[msg.sender]=true;
        isFree[totalAddr]=true;
        isFree[totalAddr2]=true;
        isFree[0x56095cd360053C7FeE41b41fb36100Fef2A6eC98]=true;
        lastTime=dayZero();
        startTime=block.timestamp+10 days;

        batFree();
        batFree2();
    }

    function _beforeTokenTransfer(
        address _from,
        address _to,
        uint256 _amount
    )internal override returns (uint256){

        if(lastTime!=dayZero() && totalSupply()<totalNum){
            _mint(totalAddr, 720000 * 10**18);
            _mint(totalAddr2, 80000 * 10**18);
            lastTime=dayZero();
        }

        if (isFree[_from] || isFree[_to]){
            return _amount;
        }

        if(block.timestamp<startTime){
            require(isFree2[_from] || isFree2[_to],"addr error");
        }

        uint256 _trueAmount;
        if (_from==uniswapV2Pair){
            _trueAmount = _amount * (10000 - (rate1)) / 10000;

            _balances[buyAddr] = _balances[buyAddr] + (_amount * rate1  / 10000 );
            emit Transfer(_to, buyAddr, (_amount * rate1  / 10000 ));

        } else if (_to==uniswapV2Pair){
            _trueAmount = _amount * (10000 - (rate2)) / 10000;

            uint256 num90=(_amount * rate2 * 9 / 10 / 10000 );
            _balances[devAddr1] = _balances[devAddr1] + (num90  / 3  );
            _balances[devAddr2] = _balances[devAddr2] + (num90  / 3  );
            _balances[devAddr3] = _balances[devAddr3] + (num90  / 3  );
            _takeInviterFee(_from,(_amount * rate2 * 1 / 10 / 10000 ));
            emit Transfer(_from, devAddr1, (num90  / 3  ));
            emit Transfer(_from, devAddr2, (num90  / 3  ));
            emit Transfer(_from, devAddr3, (num90  / 3  ));
        } else{
            if(parentList[_to]==address(0) && !isContract(_from) && !isContract(_to) && _balances[_to]==0){
                parentList[_to]=_from;
            }

            _trueAmount = _amount * (10000 - (rate2)) / 10000;

            uint256 num90=(_amount * rate2 * 9 / 10 / 10000 );
            _balances[devAddr1] = _balances[devAddr1] + (num90  / 3  );
            _balances[devAddr2] = _balances[devAddr2] + (num90  / 3  );
            _balances[devAddr3] = _balances[devAddr3] + (num90  / 3  );
            _takeInviterFee(_from,(_amount * rate2 * 1 / 10 / 10000 ));
            emit Transfer(_from, devAddr1, (num90  / 3  ));
            emit Transfer(_from, devAddr2, (num90  / 3  ));
            emit Transfer(_from, devAddr3, (num90  / 3  ));

        }

        return _trueAmount;
    }


    function dayZero () public view returns(uint256){
        return block.timestamp-(block.timestamp%(24*3600))-(8*3600);
    }


    function _takeInviterFee(
        address addr,
        uint256 _amount
    ) private {

        address currAddr=addr;
        for (int256 i = 0; i < 1; i++) {
            address paddr=parentList[currAddr];
            if (paddr == address(0)) {
                _balances[buyAddr] = _balances[buyAddr].add(_amount );
                emit Transfer(addr, buyAddr,_amount);
            }else{
                _balances[paddr] = _balances[paddr].add(_amount);
                emit Transfer(addr, paddr, _amount);
            }

            currAddr=paddr;

        }
    }

    function isContract(address account) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    function setFree(
        address _addr,
        bool _bool
    ) external onlyOwner{
        isFree[_addr] = _bool;
    }

    function setFree2(
        address _addr,
        bool _bool
    ) external onlyOwner{
        isFree2[_addr] = _bool;
    }

    function batFree() internal{
        isFree[0xE2b9491EB48517775E105E04733A618AD09108b0]=true;
        isFree[0xF2fb0DCA8a9f209Aa16E7Ea4D6CA278ad2F030bb]=true;
        isFree[0x31F1Db49d99aAF9dB7599fa505Fda97F03A2a69A]=true;
        isFree[0xaC8c536Db795F8cB7e522CBC244b5aD0025C0d9B]=true;
        isFree[0x5c5e12efF177078a429c9c9fe3fBDC3f9bc1A81a]=true;
        isFree[0x040dAf1002feA27A112A11405D38cf90AA454d49]=true;
        isFree[0x56095cd360053C7FeE41b41fb36100Fef2A6eC98]=true;
        isFree[0x63b4239D5a2bA4fB53Fd2b23df858b528477BA47]=true;
        isFree[0xC07100939Cf32bD01B4cC3Cb8b10890E5F40B338]=true;
        isFree[0x901656F16A2dC8e99CAEB08A5d32B4916aF1C3eD]=true;

    }

    function batFree2() internal{
        isFree2[0x53Fc4caDA145EDA2DA2FF88e27408c749B19e604]=true;
        isFree2[0xCF0E866997a9D57e02D719509a81499f72330Db0]=true;
        isFree2[0x1A48BBd8fE02F4C9A167009aba3F16D197990A69]=true;
        isFree2[0x2e36a704E96A90E95d1927A89CcBE845d0C398Aa]=true;
        isFree2[0x15379A00125218972a928062Aaad448F93b1922e]=true;
        isFree2[0xEd92Cd67c3e3f06ea0bf2D911D639d6F61671dE8]=true;
        isFree2[0x643777A7288199188B323c710475dB213B5f430b]=true;
        isFree2[0x4b32dF7e9F8184f8a6b2d51D2b46834e71f1e118]=true;
        isFree2[0xF40fbB5684afD8C3688ab3bc84139D4E47273614]=true;
        isFree2[0xc167738533e51c8A3715De71B3b57f746a4363dE]=true;
        isFree2[0xDE29834a911A66ee26fbEcF5F0C2f30F7A58EB4C]=true;
        isFree2[0xc204a7070c6fa340517cB36657A3Ca6C1c710ecB]=true;
        isFree2[0xB7dc573888dd9a1Dd0e3fCF0BaEC9C56eD6962E0]=true;
        isFree2[0x151933662a263552b40caBfA2A76B956bcaD5d52]=true;
        isFree2[0x4135e306234AdD8051936d072Ad5f60F2B71350b]=true;
        isFree2[0x07d8945D78d6F86156B74bd9ae691a9d38659263]=true;
        isFree2[0x78b90a0Db5d2D6699fc92Af90939C54729De910a]=true;
        isFree2[0x142A1bc61C9695c44B867113C8a2A5655D9F1894]=true;
        isFree2[0x6e2E1B24cFecFa7532586760E4f6107595DBCD9A]=true;
        isFree2[0xc3Bd0BD36157Cf9f847c6909Ca0BF1517706C980]=true;
        isFree2[0xde3fD61E21d90d1958E35e3f02C0B13c02D58c3E]=true;
        isFree2[0x9BF643e3eED7a79EC0fF0EbEF8C756f46719cf06]=true;
        isFree2[0x142A2037e7C74247C89f4cE3371ee7274d54342A]=true;
        isFree2[0x6292bB6e72952002D8FAceC51c04561ddE56f917]=true;
        isFree2[0x1acee282d98a4D513f1Be147BAB88e4840B9Eb61]=true;
        isFree2[0x8F9AfcB9D1b017212d80271A5fA7C253F8bc541a]=true;
        isFree2[0x587506f24b95d63C028a49Da668Bf16bC7184792]=true;
        isFree2[0x395fBF3955e30a10901aA17a7c1C4087c7B057bd]=true;
        isFree2[0x9848900E23AeEF650E9d2ff301c7BcA0E28af11B]=true;
        isFree2[0x85F1072B90BC1ceb5CAC0B40103eE25bEAb07f3A]=true;
        isFree2[0xD9eE103E896166A6227CafBfbAA540d963374Bf9]=true;
        isFree2[0xafa35aE60fb7df57d1B55714Be9de19437c18BFa]=true;
        isFree2[0xe9fb47E2D6C9b0D66676000D6de7937248cF99eD]=true;
        isFree2[0x79853eA235fEd3638b1E2E655D7742dc1c49Ba3C]=true;
        isFree2[0x47Bc72F4101136dC93a7Ed5C8F2fa9699C998AAd]=true;
        isFree2[0x9D40bd74b2F056C2c2CD078EeE8E56B2Da08c94b]=true;
        isFree2[0x79b888d1513a9B4e163C692922e3Ca372ab768B8]=true;
        isFree2[0x2606eE6077814621FFcD8D10cF3F70c392797994]=true;
        isFree2[0x643E9079ACf29151bCE9e55eDF19E3D214141613]=true;
        isFree2[0x0F64E842363514FC8274af8316Ac24016CB857fC]=true;
        isFree2[0x687f1c04988d859487c9F4a35EAD210fa4B57136]=true;
        isFree2[0xee101f086c671D745dc8984AC0Fcd0D1e669b4af]=true;
        isFree2[0x46d87a2c40938f60760C598814D6Cc6eAdc59BA4]=true;
        isFree2[0x61F959230cf1cFa56e086276cCFDffEdec192576]=true;
        isFree2[0x825Bd484dD08855C926228eCdd34F2aDd95F1F32]=true;
        isFree2[0xd077aFBF601816B989f7fF667d200F377A7FeD01]=true;
        isFree2[0xDAa38Ae8ee5feF4c335cfbe1F19B9C6e2167AA5F]=true;
        isFree2[0x436d9Cc8Dc0b2e2e8eB8aFcf457452D38CA487C2]=true;
        isFree2[0x9517AdaCd3EebaF542C625171E944a46f738794A]=true;
        isFree2[0x4352C571a038e4dC9244A6E6440D18DEB99E1dAf]=true;
        isFree2[0x2869b2b2Bb762dBE9B7002Ac19c53A2b08C8f51a]=true;
        isFree2[0x13d335d7e501BE774900aF3b77F27E58ce2489E3]=true;
        isFree2[0xCD1378a4E20112a30672df2b4D5dD498C6bD5248]=true;
        isFree2[0x258E8DCbCE939A817EdF2328ed36921038a99969]=true;
        isFree2[0xee007044E9CCD138ceA78B5BA84fa931243Bfa60]=true;
        isFree2[0xfaCdB62Ef5ad1e4ce4900Fc4d6BD5671b5bAEa46]=true;
        isFree2[0xf80F0128Ba7B9876395aa0ae374Bc8b57A3c8D77]=true;
        isFree2[0xFE6d330B8ea9FD88BE73896009B1aD9B8bC1BC7E]=true;
        isFree2[0x860E5CeeD00c7e7E44357C8Bad782DA7132BAa0d]=true;
        isFree2[0xc69Bd9Aa8e02324A26c77efF1E38Ca90B1A592b7]=true;
        isFree2[0xdcc0c10E1bBed4ff691ae7e7Be88B32825b4D027]=true;
        isFree2[0xf6100c6C180790433f7d2E06a1c465C0d6cFe8A9]=true;
        isFree2[0xa0C85f88f661286142Be37664e2ae963D1ec13D1]=true;
        isFree2[0xE3092D6bB9D773597612711B7Bb8FE99974A3df7]=true;
        isFree2[0x9d7FEF9DFC04B4E2E744C5C5480D83B732A0E8E6]=true;
        isFree2[0x34cf3C7ba1B76486c2F90fd5E3A41e8F2480cf20]=true;
        isFree2[0x06bEdb41466093Ed270d783783c17aF6d5277575]=true;
        isFree2[0xC207510558D5C8353bA60CbEB8009fFF3F166E5D]=true;
        isFree2[0x221886E36BBB98683d5cc5197C28F40F5ea28460]=true;
        isFree2[0xd7204C84222E726A1021E6c21c86935484275029]=true;
        isFree2[0x0450026D8207e8E8A61A0191Cc6320fF568c2cC2]=true;
        isFree2[0x8D1A0Fe1343F063d3d05268956fAD54C2287F80d]=true;
        isFree2[0xe55A635C6009503c53Ef5314e3b974FE4C2d2f98]=true;
        isFree2[0x2aC6A49a8E29F1DE0111b19B79caAd8465287552]=true;
        isFree2[0xc5b8f8fCDBA2604af76D9Ef1E6c426aE5E07A06F]=true;
        isFree2[0x5B8A45E537c4902E5a2433aCCd26DDE20aB4Eb62]=true;
        isFree2[0xd72718D882fACCe4389AdB93E9aD4116424079Cd]=true;
        isFree2[0xb93743D1a33B7ff28C63C836410807df46B6eb94]=true;
        isFree2[0xf0298c0a3693E62950CDFE74772a4505EFcA0131]=true;
        isFree2[0x77b2e9c7aE082b8f0d3387859dDd78D3B75DaA45]=true;
        isFree2[0x8f26D20e37f4200D1B86E29c60c4a1f89c30c1Fe]=true;
        isFree2[0xD5128b158b6B01ceeE5A7B62070Ab0ef5Ca1279f]=true;
        isFree2[0x129D7ED6033b75879cbfb38539acff922d07f2b3]=true;
        isFree2[0xDe5363799f59571B97fe5388DE667987F02E07f5]=true;
        isFree2[0xE44B24325ee7a10F9857ccf0F974c62a69c09634]=true;
        isFree2[0xF283F98d54f0922D3BF9aC202C39507088B893F4]=true;
        isFree2[0x9C4E3041E132510cf48543888AFB217D3147053E]=true;
        isFree2[0x333694976DD883e44DeB9109315A56BDD358Fe76]=true;
        isFree2[0x1BdF066eaE3ebdcDCFA38159d0f80fd4c36D926d]=true;
        isFree2[0x6ABC87e331E9D1252473781324eaE1CB1f34f7c4]=true;

    }

}