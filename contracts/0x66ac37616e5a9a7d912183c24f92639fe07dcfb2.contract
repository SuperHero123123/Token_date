{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/BitMaps.sol)\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largely inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\nlibrary BitMaps {\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = 1 << (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n}\n"
    },
    "contracts/interface/IMOBLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMOBLock {\r\n    function lockTreasury(address adr, uint256 amount) external;\r\n\r\n    function treasuryAvailableClaim(address adr, uint256 percent)\r\n        external\r\n        view\r\n        returns (uint256 avl, uint256 claimed);\r\n\r\n    function releaseTreasury(address adr, uint256 percent)\r\n        external\r\n        returns (uint256);\r\n\r\n    function lockNFT(\r\n        address adr,\r\n        uint256 init,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function addLiq(\r\n        address adr,\r\n        uint256 amount,\r\n        uint256 addedLp\r\n    ) external;\r\n\r\n    function releaseNFT(address adr, uint256 percent)\r\n        external\r\n        returns (uint256 released, uint256 blackhole);\r\n\r\n    function nftAvailableClaim(address adr, uint256 percent)\r\n        external\r\n        view\r\n        returns (uint256 avl, uint256 claimed);\r\n}\r\n"
    },
    "contracts/interface/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interface/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/interface/IPancakeRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPancakeRouter01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/library/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/library/PancakeLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary PancakeLibrary {\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\r\n        require(tokenA != tokenB, 'PancakeLibrary: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'PancakeLibrary: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex\"ff\",\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'   //mainnet\r\n            )))));\r\n    }\r\n}"
    },
    "contracts/library/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, 'ds-math-add-overflow');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\r\n    }\r\n}\r\n"
    },
    "contracts/MOB.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/BitMaps.sol\";\r\nimport \"./library/Math.sol\";\r\nimport \"./library/SafeMath.sol\";\r\nimport \"./library/PancakeLibrary.sol\";\r\nimport \"./interface/IPancakeRouter01.sol\";\r\nimport \"./interface/IPancakePair.sol\";\r\nimport \"./interface/IPancakeFactory.sol\";\r\nimport \"./interface/IMOBLock.sol\";\r\nimport \"./Rel.sol\";\r\n\r\ncontract MOB is IERC20, IERC20Metadata, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using BitMaps for BitMaps.BitMap;\r\n\r\n    struct BuyOrder {\r\n        uint256 timestamp;\r\n        uint256 price;\r\n        uint256 amount;\r\n        uint256 claimed;\r\n    }\r\n\r\n    event addFeeWl(address indexed adr);\r\n\r\n    event removeFeeWl(address indexed adr);\r\n\r\n    event addBotWl(address indexed adr);\r\n\r\n    event removeBotWl(address indexed adr);\r\n\r\n    event addBL(address indexed adr);\r\n\r\n    event removeBL(address indexed adr);\r\n\r\n    event distributeLpFee(uint256 amount);\r\n\r\n    event distributeNftFee(uint256 amount);\r\n\r\n    address private constant ROUTER_ADDRESS =\r\n        0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    address private constant USDT_ADDRESS =\r\n        0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    uint256 public constant LP_DIS_AMOUNT = 3000 * 1e18;\r\n\r\n    uint256 public constant NFT_DIS_AMOUNT = 6000 * 1e18;\r\n\r\n    uint256 public constant initPrice = 1e16;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    address public communityAddress;\r\n\r\n    address public techAddress;\r\n\r\n    address public netAddress;\r\n\r\n    address public relAddress;\r\n\r\n    address public lockAddress;\r\n\r\n    address public comTreasury;\r\n\r\n    address public techTreasury;\r\n\r\n    uint256 public startTradeTime = 2**200;\r\n\r\n    mapping(address => BuyOrder[]) public buyOrderPerAccount;\r\n\r\n    address public pair;\r\n\r\n    mapping(address => uint256) public buyPerAccount;\r\n\r\n    mapping(address => uint256) public sellPerAccount;\r\n\r\n    mapping(address => uint256) public feePerAccount;\r\n\r\n    BitMaps.BitMap private feeWhitelist;\r\n\r\n    BitMaps.BitMap private botWhitelist;\r\n\r\n    BitMaps.BitMap private bList;\r\n\r\n    uint256 public lpFeeDisAmount;\r\n\r\n    uint256 public lpFee;\r\n\r\n    uint256 public nftFeeDisAmount;\r\n\r\n    uint256 public nftFee;\r\n\r\n    constructor(\r\n        address _receiver,\r\n        address _genesis,\r\n        address _techAddress,\r\n        address _communityAddress,\r\n        address _netAddress,\r\n        address _comTreasury,\r\n        address _techTreasury,\r\n        address _relAddress\r\n    ) {\r\n        _name = \"MobileCoin\";\r\n        _symbol = \"MOB\";\r\n        techAddress = _techAddress;\r\n        communityAddress = _communityAddress;\r\n        relAddress = _relAddress;\r\n        comTreasury = _comTreasury;\r\n        techTreasury = _techTreasury;\r\n        netAddress = _netAddress;\r\n        pair = IPancakeFactory(IPancakeRouter01(ROUTER_ADDRESS).factory())\r\n            .createPair(address(this), USDT_ADDRESS);\r\n        _mint(_receiver, 1000000 * 10**decimals());\r\n        addFeeWhitelist(_genesis);\r\n        addFeeWhitelist(_receiver);\r\n        addFeeWhitelist(techAddress);\r\n        addFeeWhitelist(communityAddress);\r\n    }\r\n\r\n    function setLockAdress(address adr) external onlyOwner {\r\n        lockAddress = adr;\r\n    }\r\n\r\n    function setStartTradeTime(uint256 startTime) external onlyOwner {\r\n        startTradeTime = startTime;\r\n    }\r\n\r\n    function airdropTreasury() external onlyOwner {\r\n        IMOBLock lock = IMOBLock(lockAddress);\r\n        uint256 amount = 1000000 * 10**decimals();\r\n        _mint(lockAddress, amount);\r\n        lock.lockTreasury(comTreasury, amount);\r\n        amount = 1000000 * 10**decimals();\r\n        _mint(lockAddress, amount);\r\n        lock.lockTreasury(techTreasury, amount);\r\n    }\r\n\r\n    function price() public view returns (uint256) {\r\n        (uint256 r0, uint256 r1, ) = IPancakePair(pair).getReserves();\r\n        if (r0 > 0 && r1 > 0) {\r\n            return (r0 * 1e18) / r1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function treasuryClaim() external {\r\n        require(\r\n            msg.sender == comTreasury || msg.sender == techTreasury,\r\n            \"not allowed call\"\r\n        );\r\n        uint256 k = (price() * 10) / initPrice;\r\n        require(k >= 15, \"nothing claim\");\r\n        uint256 percent = ((k - 10) / 5) * 2;\r\n        if (percent > 100) {\r\n            percent = 100;\r\n        }\r\n        uint256 amount = IMOBLock(lockAddress).releaseTreasury(\r\n            msg.sender,\r\n            percent\r\n        );\r\n        _balances[lockAddress] -= amount;\r\n        _balances[msg.sender] += amount;\r\n        emit Transfer(lockAddress, msg.sender, amount);\r\n    }\r\n\r\n    function airdropNFT(address[] calldata adr, uint256[] calldata amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(adr.length == amount.length, \"length error\");\r\n        require(adr.length <= 1100, \"length max 1100\");\r\n        IMOBLock lock = IMOBLock(lockAddress);\r\n        for (uint256 i = 0; i < adr.length; ++i) {\r\n            uint256 init = amount[i] / 2;\r\n            uint256 rest = amount[i] - init;\r\n            _mint(adr[i], init);\r\n            _mint(lockAddress, rest);\r\n            lock.lockNFT(adr[i], init, rest);\r\n            addBlist(adr[i]);\r\n        }\r\n    }\r\n\r\n    function nftClaim() external {\r\n        uint256 begin = startTradeTime + 30 days * 3;\r\n        require(block.timestamp > begin, \"nothing claim\");\r\n        uint256 percent = ((block.timestamp - begin) / 30 days) * 3;\r\n        if (percent > 100) {\r\n            percent = 100;\r\n        }\r\n        (uint256 released, uint256 blackhole) = IMOBLock(lockAddress)\r\n            .releaseNFT(msg.sender, percent);\r\n        _balances[lockAddress] -= (released + blackhole);\r\n        _balances[msg.sender] += released;\r\n        emit Transfer(lockAddress, msg.sender, released);\r\n        if (blackhole > 0) {\r\n            _burn(lockAddress, blackhole);\r\n        }\r\n    }\r\n\r\n    function availableClaim()\r\n        public\r\n        view\r\n        returns (uint256 avl, uint256 claimed)\r\n    {\r\n        return availableClaim(msg.sender);\r\n    }\r\n\r\n    function availableClaim(address adr)\r\n        public\r\n        view\r\n        returns (uint256 avl, uint256 claimed)\r\n    {\r\n        uint256 mp = price() * 100;\r\n        for (uint256 i = 0; i < buyOrderPerAccount[adr].length; ++i) {\r\n            BuyOrder memory bo = buyOrderPerAccount[adr][i];\r\n            claimed += bo.claimed;\r\n            uint256 k = mp / bo.price;\r\n            if (k < 115) {\r\n                continue;\r\n            }\r\n            uint256 percent = ((k - 100) / 15) * 2;\r\n            if (percent > 100) {\r\n                percent = 100;\r\n            }\r\n            uint256 release = (percent * bo.amount) / 100;\r\n            if (release <= bo.claimed) {\r\n                continue;\r\n            }\r\n            avl += (release - bo.claimed);\r\n        }\r\n    }\r\n\r\n    function treasuryAvailableClaim()\r\n        public\r\n        view\r\n        returns (uint256 avl, uint256 claimed)\r\n    {\r\n        return treasuryAvailableClaim(msg.sender);\r\n    }\r\n\r\n    function treasuryAvailableClaim(address adr)\r\n        public\r\n        view\r\n        returns (uint256 avl, uint256 claimed)\r\n    {\r\n        require(adr == comTreasury || adr == techTreasury, \"not allowed call\");\r\n        uint256 k = (price() * 10) / initPrice;\r\n        if (k >= 15) {\r\n            uint256 percent = ((k - 10) / 5) * 2;\r\n            if (percent > 100) {\r\n                percent = 100;\r\n            }\r\n            (avl, claimed) = IMOBLock(lockAddress).treasuryAvailableClaim(\r\n                msg.sender,\r\n                percent\r\n            );\r\n        } else {\r\n            (avl, claimed) = IMOBLock(lockAddress).treasuryAvailableClaim(\r\n                msg.sender,\r\n                0\r\n            );\r\n        }\r\n    }\r\n\r\n    function nftAvailableClaim()\r\n        public\r\n        view\r\n        returns (uint256 avl, uint256 claimed)\r\n    {\r\n        return nftAvailableClaim(msg.sender);\r\n    }\r\n\r\n    function nftAvailableClaim(address adr)\r\n        public\r\n        view\r\n        returns (uint256 avl, uint256 claimed)\r\n    {\r\n        uint256 begin = startTradeTime + 30 days * 3;\r\n        if (block.timestamp > begin) {\r\n            uint256 percent = ((block.timestamp - begin) / 30 days) * 3;\r\n            if (percent > 100) {\r\n                percent = 100;\r\n            }\r\n            (avl, claimed) = IMOBLock(lockAddress).nftAvailableClaim(\r\n                adr,\r\n                percent\r\n            );\r\n        }\r\n    }\r\n\r\n    function buyOrderLength(address adr) public view returns (uint256) {\r\n        return buyOrderPerAccount[adr].length;\r\n    }\r\n\r\n    function buyOrderList(\r\n        address adr,\r\n        uint256 pageIndex,\r\n        uint256 pageSize\r\n    ) public view returns (BuyOrder[] memory) {\r\n        uint256 mp = price() * 100;\r\n        uint256 len = buyOrderPerAccount[adr].length;\r\n        if (len == 0) {\r\n            return new BuyOrder[](0);\r\n        }\r\n        BuyOrder[] memory list = new BuyOrder[](\r\n            pageIndex * pageSize <= len\r\n                ? pageSize\r\n                : len - (pageIndex - 1) * pageSize\r\n        );\r\n        uint256 start = len - 1 - (pageIndex - 1) * pageSize;\r\n        uint256 end = start > list.length ? start - list.length + 1 : 0;\r\n        for (uint256 i = start; i >= end; ) {\r\n            BuyOrder memory bo = buyOrderPerAccount[adr][i];\r\n            uint256 k = mp / bo.price;\r\n            if (k < 115) {\r\n                list[start - i] = BuyOrder(\r\n                    bo.timestamp,\r\n                    bo.price,\r\n                    bo.amount,\r\n                    bo.claimed\r\n                );\r\n            } else {\r\n                uint256 percent = ((k - 100) / 15) * 2;\r\n                if (percent > 100) {\r\n                    percent = 100;\r\n                }\r\n                uint256 release = (percent * bo.amount) / 100;\r\n                list[start - i] = BuyOrder(\r\n                    bo.timestamp,\r\n                    bo.price,\r\n                    bo.amount,\r\n                    release\r\n                );\r\n            }\r\n            if (i > 0) {\r\n                --i;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    function claim() external {\r\n        uint256 amount;\r\n        uint256 mp = price() * 100;\r\n        for (uint256 i = 0; i < buyOrderPerAccount[msg.sender].length; ++i) {\r\n            BuyOrder memory bo = buyOrderPerAccount[msg.sender][i];\r\n            uint256 k = mp / bo.price;\r\n            if (k < 115) {\r\n                continue;\r\n            }\r\n            uint256 percent = ((k - 100) / 15) * 2;\r\n            if (percent > 100) {\r\n                percent = 100;\r\n            }\r\n            uint256 release = (percent * bo.amount) / 100;\r\n            if (release <= bo.claimed) {\r\n                continue;\r\n            }\r\n            amount += (release - bo.claimed);\r\n            buyOrderPerAccount[msg.sender][i].claimed = release;\r\n        }\r\n        if (amount > 0) {\r\n            _balances[lockAddress] -= amount;\r\n            _balances[msg.sender] += amount;\r\n            emit Transfer(lockAddress, msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function addFeeWhitelist(address adr) public onlyOwner {\r\n        feeWhitelist.set(uint256(uint160(adr)));\r\n        emit addFeeWl(adr);\r\n    }\r\n\r\n    function removeFeeWhitelist(address adr) public onlyOwner {\r\n        feeWhitelist.unset(uint256(uint160(adr)));\r\n        emit removeFeeWl(adr);\r\n    }\r\n\r\n    function getFeeWhitelist(address adr) public view returns (bool) {\r\n        return feeWhitelist.get(uint256(uint160(adr)));\r\n    }\r\n\r\n    function addBotWhitelist(address adr) public onlyOwner {\r\n        botWhitelist.set(uint256(uint160(adr)));\r\n        emit addBotWl(adr);\r\n    }\r\n\r\n    function removeBotWhitelist(address adr) public onlyOwner {\r\n        botWhitelist.unset(uint256(uint160(adr)));\r\n        emit removeBotWl(adr);\r\n    }\r\n\r\n    function getBotWhitelist(address adr) public view returns (bool) {\r\n        return botWhitelist.get(uint256(uint160(adr)));\r\n    }\r\n\r\n    function addBlist(address adr) public onlyOwner {\r\n        bList.set(uint256(uint160(adr)));\r\n        emit addBL(adr);\r\n    }\r\n\r\n    function removeBlist(address adr) public {\r\n        require(\r\n            msg.sender == owner() || msg.sender == lockAddress,\r\n            \"not allowed call\"\r\n        );\r\n        bList.unset(uint256(uint160(adr)));\r\n        emit removeBL(adr);\r\n    }\r\n\r\n    function getBlist(address adr) public view returns (bool) {\r\n        return bList.get(uint256(uint160(adr)));\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (to.isContract() && to != pair && to != lockAddress) {\r\n            revert(\"can't transfer to contract\");\r\n        }\r\n\r\n        uint256 tranType = 0;\r\n        uint112 r0;\r\n        uint112 r1;\r\n        uint256 balanceA;\r\n        uint256 curPrice;\r\n        if (to == pair) {\r\n            (r0, r1, ) = IPancakePair(pair).getReserves();\r\n            uint256 amountA;\r\n            if (r0 > 0 && r1 > 0) {\r\n                amountA = IPancakeRouter01(ROUTER_ADDRESS).quote(\r\n                    amount,\r\n                    r1,\r\n                    r0\r\n                );\r\n            }\r\n            balanceA = IERC20(USDT_ADDRESS).balanceOf(pair);\r\n            if (balanceA < r0 + amountA) {\r\n                tranType = 1;\r\n            } else {\r\n                tranType = 2;\r\n            }\r\n        }\r\n        if (from == pair) {\r\n            (r0, r1, ) = IPancakePair(pair).getReserves();\r\n            uint256 amountA;\r\n            if (r0 > 0 && r1 > 0) {\r\n                amountA = IPancakeRouter01(ROUTER_ADDRESS).getAmountIn(\r\n                    amount,\r\n                    r0,\r\n                    r1\r\n                );\r\n            }\r\n            balanceA = IERC20(USDT_ADDRESS).balanceOf(pair);\r\n            if (balanceA >= r0 + amountA) {\r\n                require(to == lockAddress, \"to must be lockAddress\");\r\n                tranType = 3;\r\n                curPrice = ((balanceA - r0) * 1e18) / amount;\r\n            } else {\r\n                tranType = 4;\r\n            }\r\n        }\r\n\r\n        if (block.timestamp >= startTradeTime) {\r\n            if (bList.get(uint256(uint160(tx.origin)))) {\r\n                revert(\"not allowed transfer\");\r\n            }\r\n            if (tranType <= 2 && bList.get(uint256(uint160(from)))) {\r\n                revert(\"not allowed transfer\");\r\n            }\r\n            if (tranType == 3 && bList.get(uint256(uint160(tx.origin)))) {\r\n                revert(\"not allowed transfer\");\r\n            }\r\n            if (tranType == 4 && bList.get(uint256(uint160(to)))) {\r\n                revert(\"not allowed transfer\");\r\n            }\r\n        } else if (tranType != 2) {\r\n            revert(\"not allowed now\");\r\n        }\r\n\r\n        uint256 oldBalance = balanceOf(from);\r\n        require(oldBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = oldBalance - amount;\r\n        }\r\n\r\n        uint256 subAmount;\r\n        if (tranType == 1) {\r\n            if (!feeWhitelist.get(uint256(uint160(from)))) {\r\n                uint256 marketAmount = (amount * 20) / 1000;\r\n                marketSellReward(from, amount, marketAmount);\r\n                subAmount += marketAmount;\r\n                subAmount += shareFee(\r\n                    from,\r\n                    address(this),\r\n                    (amount * 20) / 1000,\r\n                    1\r\n                );\r\n                subAmount += shareFee(\r\n                    from,\r\n                    address(this),\r\n                    (amount * 15) / 1000,\r\n                    2\r\n                );\r\n                subAmount += _burn(from, (amount * 10) / 1000);\r\n                subAmount += shareFee(\r\n                    from,\r\n                    communityAddress,\r\n                    (amount * 7) / 1000,\r\n                    0\r\n                );\r\n                subAmount += shareFee(\r\n                    from,\r\n                    techAddress,\r\n                    (amount * 8) / 1000,\r\n                    0\r\n                );\r\n            }\r\n            sellPerAccount[from] += amount;\r\n        } else if (tranType == 2) {\r\n            if (block.timestamp < startTradeTime) {\r\n                (uint256 addedLp, ) = calLiquidity(balanceA, amount, r0, r1);\r\n                _burn(from, _balances[from]);\r\n                _balances[from] = 0;\r\n                IMOBLock(lockAddress).addLiq(from, amount, addedLp);\r\n            }\r\n        } else if (tranType == 3) {\r\n            if (!feeWhitelist.get(uint256(uint160(tx.origin)))) {\r\n                uint256 marketAmount = (amount * 20) / 1000;\r\n                marketBuyReward(tx.origin, amount, marketAmount);\r\n                subAmount += marketAmount;\r\n                subAmount += shareFee(\r\n                    tx.origin,\r\n                    address(this),\r\n                    (amount * 20) / 1000,\r\n                    1\r\n                );\r\n                subAmount += shareFee(\r\n                    tx.origin,\r\n                    address(this),\r\n                    (amount * 15) / 1000,\r\n                    2\r\n                );\r\n                subAmount += _burn(tx.origin, (amount * 10) / 1000);\r\n                subAmount += shareFee(\r\n                    tx.origin,\r\n                    communityAddress,\r\n                    (amount * 7) / 1000,\r\n                    0\r\n                );\r\n                subAmount += shareFee(\r\n                    tx.origin,\r\n                    techAddress,\r\n                    (amount * 8) / 1000,\r\n                    0\r\n                );\r\n            }\r\n            BuyOrder memory bo = BuyOrder(\r\n                block.timestamp,\r\n                curPrice,\r\n                amount - subAmount,\r\n                0\r\n            );\r\n            buyOrderPerAccount[tx.origin].push(bo);\r\n            buyPerAccount[tx.origin] += (amount - subAmount);\r\n        }\r\n\r\n        uint256 toAmount = amount - subAmount;\r\n        _balances[to] += toAmount;\r\n        emit Transfer(from, to, toAmount);\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint112 r0,\r\n        uint112 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = IPancakePair(pair).totalSupply();\r\n        address feeTo = IPancakeFactory(\r\n            IPancakeRouter01(ROUTER_ADDRESS).factory()\r\n        ).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = IPancakePair(pair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(uint256(r0).mul(r1));\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator = pairTotalSupply\r\n                        .mul(rootK.sub(rootKLast))\r\n                        .mul(8);\r\n                    uint256 denominator = rootK.mul(17).add(rootKLast.mul(8));\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function shareFee(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 t\r\n    ) private returns (uint256) {\r\n        _balances[to] += amount;\r\n        feePerAccount[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n        if (t == 1) {\r\n            lpFee += amount;\r\n            uint256 r = lpFee / LP_DIS_AMOUNT;\r\n            if (r > 0) {\r\n                lpFee = lpFee % LP_DIS_AMOUNT;\r\n                lpFeeDisAmount += LP_DIS_AMOUNT * r;\r\n                emit distributeLpFee(LP_DIS_AMOUNT * r);\r\n            }\r\n        } else if (t == 2) {\r\n            nftFee += amount;\r\n            uint256 r = nftFee / NFT_DIS_AMOUNT;\r\n            if (r > 0) {\r\n                nftFee = nftFee % NFT_DIS_AMOUNT;\r\n                nftFeeDisAmount += NFT_DIS_AMOUNT * r;\r\n                emit distributeNftFee(NFT_DIS_AMOUNT * r);\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function marketBuyReward(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 restAmount\r\n    ) private {\r\n        Rel rel = Rel(relAddress);\r\n        address p = rel.parents(to);\r\n        for (uint256 i = 1; i <= 5 && p != address(0) && p != address(1); ++i) {\r\n            uint256 pAmount;\r\n            if (i == 1) {\r\n                pAmount = (amount * 6) / 1000;\r\n            } else if (i == 2) {\r\n                pAmount = (amount * 5) / 1000;\r\n            } else if (i == 3) {\r\n                pAmount = (amount * 4) / 1000;\r\n            } else if (i == 4) {\r\n                pAmount = (amount * 3) / 1000;\r\n            } else {\r\n                pAmount = restAmount;\r\n            }\r\n            _balances[p] += pAmount;\r\n            feePerAccount[p] += pAmount;\r\n            emit Transfer(to, p, pAmount);\r\n            restAmount -= pAmount;\r\n            p = rel.parents(p);\r\n        }\r\n        if (restAmount > 0) {\r\n            _balances[netAddress] += restAmount;\r\n            feePerAccount[netAddress] += restAmount;\r\n            emit Transfer(to, netAddress, restAmount);\r\n        }\r\n    }\r\n\r\n    function marketSellReward(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 restAmount\r\n    ) private {\r\n        Rel rel = Rel(relAddress);\r\n        address p = rel.parents(to);\r\n        for (uint256 i = 1; i <= 3 && p != address(0) && p != address(1); ++i) {\r\n            uint256 pAmount;\r\n            if (i == 1) {\r\n                pAmount = (amount * 8) / 1000;\r\n            } else if (i == 2) {\r\n                pAmount = (amount * 6) / 1000;\r\n            } else {\r\n                pAmount = restAmount;\r\n            }\r\n            _balances[p] += pAmount;\r\n            feePerAccount[p] += pAmount;\r\n            emit Transfer(to, p, pAmount);\r\n            restAmount -= pAmount;\r\n            p = rel.parents(p);\r\n        }\r\n        if (restAmount > 0) {\r\n            _balances[netAddress] += restAmount;\r\n            feePerAccount[netAddress] += restAmount;\r\n            emit Transfer(to, netAddress, restAmount);\r\n        }\r\n    }\r\n\r\n    function disLpFee(address[] calldata addr, uint256[] calldata amount)\r\n        external\r\n    {\r\n        require(\r\n            botWhitelist.get(uint256(uint160(msg.sender))),\r\n            \"not allowed call\"\r\n        );\r\n        require(addr.length == amount.length, \"addrLen!=amountLen\");\r\n        require(addr.length <= 500, \"addrLen max 500\");\r\n        uint256 total;\r\n        for (uint256 i = 0; i < addr.length; ++i) {\r\n            address adr = addr[i];\r\n            uint256 a = amount[i];\r\n            _transfer(address(this), adr, a);\r\n            total += a;\r\n        }\r\n        lpFeeDisAmount -= total;\r\n    }\r\n\r\n    function disNftFee(address[] calldata addr, uint256[] calldata amount)\r\n        external\r\n    {\r\n        require(\r\n            botWhitelist.get(uint256(uint160(msg.sender))),\r\n            \"not allowed call\"\r\n        );\r\n        require(addr.length == amount.length, \"addrLen!=amountLen\");\r\n        require(addr.length <= 500, \"addrLen max 500\");\r\n        uint256 total;\r\n        for (uint256 i = 0; i < addr.length; ++i) {\r\n            address adr = addr[i];\r\n            uint256 a = amount[i];\r\n            _transfer(address(this), adr, a);\r\n            total += a;\r\n        }\r\n        nftFeeDisAmount -= total;\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        require(_totalSupply <= 25000000 * 10**decimals(), \"max mint\");\r\n        _balances[account] += amount;\r\n\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) private returns (uint256) {\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n        return amount;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getInfo(address[] calldata addr)\r\n        external\r\n        view\r\n        returns (uint256[4][] memory r)\r\n    {\r\n        uint256 lp = IPancakePair(pair).totalSupply();\r\n        uint256 tokenAmount = balanceOf(pair);\r\n        r = new uint256[4][](addr.length);\r\n        for (uint256 i = 0; i < addr.length; ++i) {\r\n            uint256 lpBalance = IPancakePair(pair).balanceOf(addr[i]);\r\n            r[i] = [\r\n                lp > 0 ? (lpBalance * tokenAmount) / lp : 0,\r\n                feePerAccount[addr[i]],\r\n                buyPerAccount[addr[i]],\r\n                sellPerAccount[addr[i]]\r\n            ];\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/Rel.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Rel is Ownable {\r\n    event Bind(address indexed user, address indexed parent);\r\n\r\n    mapping(address => address) public parents;\r\n\r\n    mapping(bytes32 => address[]) public children;\r\n\r\n    constructor(address receiver, address genesis) {\r\n        parents[genesis] = address(1);\r\n        emit Bind(genesis, address(1));\r\n        parents[receiver] = genesis;\r\n        addChild(receiver, genesis);\r\n        emit Bind(receiver, genesis);\r\n    }\r\n\r\n    function bind(address parent) external {\r\n        require(parents[msg.sender] == address(0), \"already bind\");\r\n        require(parents[parent] != address(0), \"parent invalid\");\r\n        parents[msg.sender] = parent;\r\n        addChild(msg.sender, parent);\r\n        emit Bind(msg.sender, parent);\r\n    }\r\n\r\n    function addChild(address user, address p) private {\r\n        for (uint256 i = 1; i <= 5 && p != address(0) && p != address(1); ++i) {\r\n            children[keccak256(abi.encode(p, i))].push(user);\r\n            p = parents[p];\r\n        }\r\n    }\r\n\r\n    function getChildren(address user, uint256 level)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return children[keccak256(abi.encode(user, level))];\r\n    }\r\n\r\n    function getChildrenLength(address user, uint256 level)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return children[keccak256(abi.encode(user, level))].length;\r\n    }\r\n\r\n    function getChildrenLength(address user) external view returns (uint256) {\r\n        uint256 len;\r\n        for (uint256 i = 1; i <= 5; ++i) {\r\n            len += children[keccak256(abi.encode(user, i))].length;\r\n        }\r\n        return len;\r\n    }\r\n\r\n    function getChildren(\r\n        address user,\r\n        uint256 level,\r\n        uint256 pageIndex,\r\n        uint256 pageSize\r\n    ) external view returns (address[] memory) {\r\n        bytes32 key = keccak256(abi.encode(user, level));\r\n        uint256 len = children[key].length;\r\n        address[] memory list = new address[](\r\n            pageIndex * pageSize <= len\r\n                ? pageSize\r\n                : len - (pageIndex - 1) * pageSize\r\n        );\r\n        uint256 start = (pageIndex - 1) * pageSize;\r\n        for (uint256 i = start; i < start + list.length; ++i) {\r\n            list[i - start] = children[key][i];\r\n        }\r\n        return list;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}