{{
  "language": "Solidity",
  "sources": {
    "contracts/Deri.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ncontract Deri {\r\n\r\n    event ChangeController(address oldController, address newController);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    string public constant name = 'Deri';\r\n\r\n    string public constant symbol = 'DERI';\r\n\r\n    uint8 public constant decimals = 18;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    address public controller;\r\n\r\n    mapping (address => uint256) internal balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowances;\r\n\r\n    modifier _controller_() {\r\n        require(msg.sender == controller, 'Deri._controller_: can only be called by controller');\r\n        _;\r\n    }\r\n\r\n    constructor () {\r\n        controller = msg.sender;\r\n        emit ChangeController(address(0), controller);\r\n    }\r\n\r\n    function setController(address newController) public _controller_ {\r\n        require(newController != address(0), 'Deri.setController: to 0 address');\r\n        emit ChangeController(controller, newController);\r\n        controller = newController;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        require(spender != address(0), 'Deri.approve: to 0 address');\r\n        allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public returns (bool) {\r\n        require(to != address(0), 'Deri.transfer: to 0 address');\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\r\n        require(to != address(0), 'Deri.transferFrom: to 0 address');\r\n\r\n        uint256 oldAllowance = allowances[from][msg.sender];\r\n        if (msg.sender != from && oldAllowance != type(uint256).max) {\r\n            require(oldAllowance >= amount, 'Deri.transferFrom: amount exceeds allowance');\r\n            uint256 newAllowance = oldAllowance - amount;\r\n            allowances[from][msg.sender] = newAllowance;\r\n            emit Approval(from, msg.sender, newAllowance);\r\n        }\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function mint(address account, uint256 amount) public _controller_ {\r\n        totalSupply += amount;\r\n        balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function burn(address account, uint256 amount) public _controller_ {\r\n        require(balances[account] >= amount, 'Deri.burn: amount exceeds balance');\r\n        balances[account] -= amount;\r\n        totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal {\r\n        require(balances[from] >= amount, 'Deri._transfer: amount exceeds balance');\r\n        balances[from] -= amount;\r\n        balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}