{{
  "language": "Solidity",
  "sources": {
    "contracts/Dynamic.sol": {
      "content": "/**\n *Submitted for verification at BscScan.com on 2023-01-30\n*/\n\n//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n/**\n ________      ___    ___ ________   ________  _____ ______   ___  ________     \n|\\   ___ \\    |\\  \\  /  /|\\   ___  \\|\\   __  \\|\\   _ \\  _   \\|\\  \\|\\   ____\\    \n\\ \\  \\_|\\ \\   \\ \\  \\/  / | \\  \\\\ \\  \\ \\  \\|\\  \\ \\  \\\\\\__\\ \\  \\ \\  \\ \\  \\___|    \n \\ \\  \\ \\\\ \\   \\ \\    / / \\ \\  \\\\ \\  \\ \\   __  \\ \\  \\\\|__| \\  \\ \\  \\ \\  \\       \n  \\ \\  \\_\\\\ \\   \\/  /  /   \\ \\  \\\\ \\  \\ \\  \\ \\  \\ \\  \\    \\ \\  \\ \\  \\ \\  \\____  \n   \\ \\_______\\__/  / /      \\ \\__\\\\ \\__\\ \\__\\ \\__\\ \\__\\    \\ \\__\\ \\__\\ \\_______\\\n    \\|_______|\\___/ /        \\|__| \\|__|\\|__|\\|__|\\|__|     \\|__|\\|__|\\|_______|\n             \\|___|/                                                            \n */\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n    \n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\n}\n\ncontract Dynamic is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee; // wallets excluded from fee\n    mapping(address => uint256) private _tokenSold;\n\n    mapping(address => uint256) private _startTime;\n    mapping(address => uint256) private _blockTime;\n\n    uint256 public _maxSoldAmount;\n    uint256 private _totalSupply;\n    uint8 private _decimals;\n    string private _symbol;\n    string private _name;\n    uint256 public _taxFee;\n    uint256 public _minBalance;\n\n    uint256 public defaultTaxFee;\n    uint256 public defaultLiquidity;\n    uint256 public defaultTreasury;\n    uint256 public defaultMarketing;\n\n    address public uniswapV2Pair;\n    address payable public _treasuryWallet;\n    address payable public _marketingWallet;\n\n    bool public inSwap = false;\n    bool public swapEnabled = true;\n\n    IUniswapV2Router02 public uniswapV2Router; // pancakeswap v2 router\n\n    modifier lockTheSwap() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    /**\n     * @dev Initialize params for tokenomics\n     */\n\n    constructor() {\n        _name = unicode\"Dynamic\";\n        _symbol = \"DYNA\";\n        _decimals = 18;\n        _totalSupply = 10**9 * 10**18;\n        _balances[msg.sender] = _totalSupply;\n\n        defaultTaxFee = 600; // 6%\n        defaultLiquidity = 200;\n        defaultTreasury = 200;\n        defaultMarketing = 200;\n\n        _taxFee = defaultTaxFee;\n        _minBalance = 10**6 * 10**18; // 0.1% total supply\n        _maxSoldAmount = 5 * 10**6 * 10**18;\n\n        _treasuryWallet = payable(0xA8Ff6C807654c5B2B55f188e9a7Ce31C8d192353);\n        _marketingWallet = payable(0xcCdc33e238E091fF10824D80829aEb41dd1f8712);\n\n        // BSC MainNet router\n        //0x10ED43C718714eb63d5aA57B78B54704E256024E\n        // BSC TestNet router\n        // 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\n        \n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\n        );\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router = _uniswapV2Router;\n\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_treasuryWallet] = true;\n        _isExcludedFromFee[_marketingWallet] = true;\n\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n\n    function getOwner() external view override returns (address) {\n        return owner();\n    }\n\n    /**\n     * @dev Returns the token decimals.\n     */\n\n    function decimals() external view override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Returns the token symbol.\n     */\n\n    function symbol() external view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the token name.\n     */\n\n    function name() external view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {BEP20-totalSupply}.\n     */\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {BEP20-balanceOf}.\n     */\n\n    //function balanceOf(address account) external override view returns (uint256) {\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function setDefaultTaxFee(\n        uint256 _defaultTaxFee,\n        uint256 _defaultLiquidity,\n        uint256 _defaultTreasury,\n        uint256 _defaultMarketing\n    ) public onlyOwner {\n        require(\n            _defaultTaxFee ==\n                _defaultLiquidity.add(_defaultTreasury).add(_defaultMarketing),\n            \"_defaultTaxFee must equal to sum of _defaultLiquidity, _defaultTreasury and _defaultMarketing\"\n        );\n        require(\n            _defaultTaxFee <= 2000,\n            \"_defaultTaxFee must less than or equal to 20%\"\n        );\n        defaultTaxFee = _defaultTaxFee;\n        defaultLiquidity = _defaultLiquidity;\n        defaultTreasury = _defaultTreasury;\n        defaultMarketing = _defaultMarketing;\n        _taxFee = defaultTaxFee;\n    }\n\n    /**\n     * @dev See {BEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n\n    function transfer(address recipient, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-allowance}.\n     */\n\n    function allowance(address owner, address spender)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {BEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"BEP20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"BEP20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        require(from != address(0), \"BEP20: transfer from the zero address\");\n        require(to != address(0), \"BEP20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n        bool takeFee = true;\n\n        if (!inSwap && swapEnabled && to == uniswapV2Pair) {\n            // limit max sold\n            if (_tokenSold[from] == 0) {\n                _startTime[from] = block.timestamp;\n            }\n\n            _tokenSold[from] = _tokenSold[from] + amount;\n\n            if (block.timestamp < _startTime[from] + (1 days)) {\n                require(\n                    _tokenSold[from] <= _maxSoldAmount,\n                    \"Sold amount exceeds the maxTxAmount.\"\n                );\n            } else {\n                _startTime[from] = block.timestamp;\n                _tokenSold[from] = 0;\n            }\n\n            // transfer tokens\n            uint256 dynaBalance = balanceOf(address(this));\n            if (dynaBalance > _minBalance) {\n                transferTokens(dynaBalance);\n            }\n\n            if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n                takeFee = false;\n            }\n        } else {\n            takeFee = false;\n        }\n\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev transfer tokens to liqudity, treasury wallet and marketing wallet\n     */\n\n    function transferTokens(uint256 tokenBalance) private lockTheSwap {\n        uint256 liquidityTokens = tokenBalance.mul(defaultLiquidity).div(\n            defaultTaxFee.mul(2)\n        );\n        uint256 otherBNBTokens = tokenBalance.sub(liquidityTokens);\n        uint256 initialBalance = address(this).balance;\n        swapTokensForEth(otherBNBTokens);\n\n        uint256 newBalance = address(this).balance.sub(initialBalance);\n        uint256 liquidityCapacity = newBalance.mul(defaultLiquidity).div(\n            defaultLiquidity.add(defaultTreasury.mul(2)).add(defaultMarketing.mul(2))\n        ); // liquidity = 1/3 total\n        addLiqudity(liquidityTokens, liquidityCapacity);\n\n        uint256 treasuryCapacity = newBalance.sub(liquidityCapacity);\n        uint256 treasuryBNB = treasuryCapacity.mul(defaultTreasury).div(\n            defaultTreasury.add(defaultMarketing)\n        ); // 2% for the treasury wallet, 2% for the marketing wallet\n        _treasuryWallet.transfer(treasuryBNB);\n\n        uint256 marketingBNB = treasuryCapacity.sub(treasuryBNB);\n        _marketingWallet.transfer(marketingBNB);\n    }\n\n    /**\n     * @dev Swap tokens from dyna to bnb\n     */\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev Add dyna token and bnb as same ratio on pancakeswap router\n     */\n\n    function addLiqudity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add amount to contract\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n    }\n\n    /**\n     * @dev the Owner can swap regarding the dyna token's amount of contract balance\n     * this is for manual function\n     */\n\n    function contractBalanceSwap() external onlyOwner {\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n\n    /**\n     * @dev the Owner can send regarding the dyna token's amount of contract balance\n     * this is for manual function\n     * 0.1BNB will remain in contract balance for swap and transfer fees.\n     */\n\n    function contractBalanceSend(uint256 amount, address payable _destAddr)\n        external\n        onlyOwner\n    {\n        uint256 contractETHBalance = address(this).balance - 1 * 10**17;\n        if (contractETHBalance > amount) {\n            _destAddr.transfer(amount);\n        }\n    }\n\n    /**\n     * @dev remove all fees\n     */\n\n    function removeAllFee() private {\n        if (_taxFee == 0) return;\n        _taxFee = 0;\n    }\n\n    /**\n     * @dev set all fees\n     */\n\n    function restoreAllFee() private {\n        _taxFee = defaultTaxFee;\n    }\n\n    /**\n     * @dev transfer tokens with amount\n     */\n\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bool isTakeFee\n    ) private {\n        if (!isTakeFee) removeAllFee();\n        _transferStandard(sender, recipient, amount);\n        if (!isTakeFee) restoreAllFee();\n    }\n\n    function _transferStandard(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private {\n        uint256 fee = amount.mul(_taxFee).div(10000); // for 3% fee\n        //_beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(\n            senderBalance >= amount,\n            \"BEP20: transfer amount exceeds balance\"\n        );\n        _balances[sender] = senderBalance - amount;\n        uint256 amountnew = amount - fee;\n        _balances[recipient] += (amountnew);\n\n        if (fee > 0) {\n            _balances[address(this)] += (fee);\n            emit Transfer(sender, address(this), fee);\n        }\n\n        emit Transfer(sender, recipient, amountnew);\n    }\n\n    /**\n     * @dev set Max sold amount\n     */\n\n    function _setMaxSoldAmount(uint256 maxvalue) external onlyOwner {\n        require(maxvalue >= 10**6 * 10**18, \"_maxSoldAmount must be greater than or equal to 0.1% total supply\");\n        _maxSoldAmount = maxvalue;\n    }\n\n    /**\n     * @dev set min balance for transferring\n     */\n\n    function _setMinBalance(uint256 minValue) external onlyOwner {\n        _minBalance = minValue;\n    }\n\n    /**\n     * @dev determine whether we apply tax fee or not\n     */\n\n    function _setApplyContractFee(bool isFee) external onlyOwner {\n        if (isFee) {\n            _taxFee = defaultTaxFee;\n        } else {\n            _taxFee = 0;\n        }\n    }\n\n    function _setTreasuryWalletAddress(address treasuryWalletAddr) external onlyOwner {\n        _treasuryWallet = payable(treasuryWalletAddr);\n    }\n\n    function _setMarketingWalletAddress(address marketingWalletAddr)\n        external\n        onlyOwner\n    {\n        _marketingWallet = payable(marketingWalletAddr);\n    }\n\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}