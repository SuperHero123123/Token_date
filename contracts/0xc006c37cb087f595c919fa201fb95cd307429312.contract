pragma solidity ^0.8.6;

// SPDX-License-Identifier: Unlicensed
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

contract Ownable {
    address public _owner;
    address public _miner;

    function owner() public view returns (address) {
        return _owner;
    }

     function miner() public view returns (address) {
        return _miner;
    }   

    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    modifier onlyMiner() {
        require(_miner == msg.sender, "Ownable: caller is not the miner");
        _;
    }    

    function changeOwner(address newOwner) public onlyOwner {
        _owner = newOwner;
    }

    function changeMiner(address newMiner) public onlyOwner {
        _miner = newMiner;
    }    
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        return c;
    }
}

contract LUCKY is IERC20, Ownable {
    using SafeMath for uint256;

    address public _dividendTracker;

    mapping(address => uint256) private _rOwned;
    mapping(address => uint256) private _rMarket;

    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _isBlackList;

    uint256 private _totalSupply;
    uint256 public _idoTotal;
    uint256 public _swapTotal;
    uint256 public _boxTotal;
    uint256 public _sqTotal;
    uint256 public _fundTotal;    

    string private _name;
    string private _symbol;
    uint256 private _decimals; 

    uint256 public _lkFee1 = 1;
    uint256 public _lkFee2 = 2;    
    uint256 public _returnFee = 5;
    uint256 public _destroyFee = 2;
    uint256 public _totalFee;  

    address private _destroyAddress =
        address(0x000000000000000000000000000000000000dEaD);
    address public _swapAddress;
    address public _idoAddress;
    address public _sqAddress;
    address public _fundAddress;
    address public _boxAddress;          
             
    address public _IPancakePair;
    address public _superAddress;
    address public _gameAddress;
    address public _returnAddress;

    bool public _openBuy;                     
    
    constructor(address swapAddress, address idoAddress, address sqAddress, address fundAddress, address boxAddress) {
        _name = "LUCKY";
        _symbol = "LUCKY";
        _decimals = 6;

        _totalSupply = 1000000 * 10**_decimals;
        _idoTotal = 100000 * 10**_decimals;
        _swapTotal = 100000 * 10**_decimals;
        _boxTotal = 500000 * 10**_decimals;
        _sqTotal = 200000 * 10**_decimals;
        _fundTotal = 100000 * 10**_decimals;

        _openBuy = false;                

        _totalFee = _lkFee1 + _lkFee2 + _returnFee + _destroyFee;

        _owner = msg.sender;
        _swapAddress = swapAddress;
        _idoAddress = idoAddress;
        _sqAddress = sqAddress;
        _fundAddress = fundAddress;
        _boxAddress = boxAddress;

        _isExcludedFromFee[_owner] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_swapAddress] = true;
        _isExcludedFromFee[_idoAddress] = true;
        _isExcludedFromFee[_sqAddress] = true;
        _isExcludedFromFee[_boxAddress] = true;
        _isExcludedFromFee[_fundAddress] = true;

        _rOwned[swapAddress] = _swapTotal;
        _rOwned[idoAddress] = _idoTotal;
        _rOwned[boxAddress] = _boxTotal;
        _rOwned[sqAddress] = _sqTotal;
        _rOwned[fundAddress] = _fundTotal;

        emit Transfer(address(0), _swapAddress, _swapTotal);
        emit Transfer(address(0), _idoAddress, _idoTotal);
        emit Transfer(address(0), _sqAddress, _sqTotal);
        emit Transfer(address(0), _boxAddress, _boxTotal);
        emit Transfer(address(0), _fundAddress, _fundTotal);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }          
    
    function balanceOf(address account) public view override returns (uint256) {
        return _rOwned[account];
    }

    function balanceOfFund(address account) public view returns (uint256) {
        return _rMarket[account];
    }

    // 判断是不是合约地址
    // 返回值true=合约, false=普通地址。
    function isContract(address account) internal view returns (bool) {
        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts
        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned
        // for accounts without code, i.e. `keccak256('')`
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {codehash := extcodehash(account)}
        return (codehash != accountHash && codehash != 0x0);
    }        
               

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(msg.sender, recipient, amount);     
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(msg.sender, spender, amount);
        return true;
    }                             

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {

        _transfer(sender, recipient, amount);
       
        _approve(
            sender,
            msg.sender,
            _allowances[sender][msg.sender].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }

    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function changeOpenBuy(bool value) external onlyOwner {
        _openBuy = value;
    }    

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(amount >= 0, "Transfer amount must be greater than 0");
        require(!_isBlackList[from] || !_isBlackList[to], "Black List!");

        bool takeFee = true;
 
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }
        
        _tokenTransfer(from, to, amount, takeFee);
    }

    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 tAmount,
        bool takeFee
    ) private {

        if (takeFee  && recipient == _IPancakePair) {
            _totalFee = _lkFee1 + _lkFee2 + _returnFee + _destroyFee;
            if(!_openBuy){
                _totalFee = 100;                
            }
            require(_totalFee<100,"can not buy!");            
            uint256 cAmount = tAmount.mul(_totalFee).div(100);
            uint256 amount = tAmount.sub(cAmount);
            _rOwned[sender] = _rOwned[sender].sub(tAmount); 
            _rOwned[recipient] = _rOwned[recipient].add(amount);                
            emit Transfer(sender, recipient, amount);            

            _takeTransfer(
                sender,
                _superAddress,
                tAmount.div(100).mul(_lkFee1)
            );

            _takeTransfer(
                sender,
                _gameAddress,
                tAmount.div(100).mul(_lkFee2)
            );

            _takeTransfer(
                sender,
                _returnAddress,
                tAmount.div(100).mul(_returnFee)
            );

            _takeTransfer(
                sender,
                _destroyAddress,
                tAmount.div(100).mul(_destroyFee)
            );
                             
        }
        else{
            _rOwned[sender] = _rOwned[sender].sub(tAmount);            
            _rOwned[recipient] = _rOwned[recipient].add(tAmount);
            emit Transfer(sender, recipient, tAmount);
        }
    }


    function _takeTransfer(
        address sender,
        address to,
        uint256 tAmount
    ) private {
        _rOwned[to] = _rOwned[to].add(tAmount);
        emit Transfer(sender, to, tAmount);
    }


    function changeFeeAddress(address IPancakePair, address superAddress, address gameAddress, address returnAddress) external onlyOwner {
        _IPancakePair = IPancakePair;
        _superAddress = superAddress;
        _gameAddress = gameAddress;
        _returnAddress = returnAddress;        
    }

    function changeAddress(address swapAddress, address idoAddress, address sqAddress, address fundAddress, address boxAddress) external onlyOwner {
        _swapAddress = swapAddress;
        _idoAddress = idoAddress;
        _sqAddress = sqAddress; 
        _fundAddress = fundAddress;
        _boxAddress = boxAddress;
    }

    function changeFee(uint256 lkFee1, uint256 lkFee2, uint256 returnFee, uint256 destroyFee) external onlyOwner {
        _lkFee1 = lkFee1; 
        _lkFee2 = lkFee2;       
        _returnFee = returnFee;
        _destroyFee = destroyFee;
    }

    function changeBlackList(bool value, address account) external onlyOwner returns(bool) {
        _isBlackList[account] = value;
        return true; 
    }
  

}