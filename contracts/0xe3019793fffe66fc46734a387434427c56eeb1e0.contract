/**
 *Submitted for verification at BscScan.com on 2022-03-22
*/

// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.6;

interface IBEP20 {

    function totalSupply() external view returns (uint256);

    function decimals() external view returns (uint8);

    function symbol() external view returns (string memory);

    function name() external view returns (string memory);

    function getOwner() external view returns (address);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address _owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}


library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

// pragma solidity >=0.5.0;

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint) external view returns (address pair);

    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}


// pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);

    function symbol() external pure returns (string memory);

    function decimals() external pure returns (uint8);

    function totalSupply() external view returns (uint);

    function balanceOf(address owner) external view returns (uint);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);

    function transfer(address to, uint value) external returns (bool);

    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);

    function PERMIT_TYPEHASH() external pure returns (bytes32);

    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);

    function factory() external view returns (address);

    function token0() external view returns (address);

    function token1() external view returns (address);

    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);

    function price0CumulativeLast() external view returns (uint);

    function price1CumulativeLast() external view returns (uint);

    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);

    function burn(address to) external returns (uint amount0, uint amount1);

    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;

    function skim(address to) external;

    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;

interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function WHT() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);

    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);

    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);

    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}



// pragma solidity >=0.6.2;

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract EOH is IBEP20 {

    using SafeMath for uint256;

    mapping (address => address) private parentMap;//bind the ralationship
    mapping (address => bool) private olduserMap;//bind the ralationship
    mapping (address => bool) private transferFromMap;//is from transferFrom
    uint8 private transferFeeOnOff=1; //1 fee 2 nofee
    mapping (address => bool) private BL;

    uint8 public feeBuyMarketing = 2;//including parent agent fees 3 .5 .5 .5 .5
    uint8 public feeBuyDead = 6;

    uint8 public feeTransMarketing = 5;//including parent agent fees 3 .5 .5 .5 .5
    uint8 public feeTransDead = 1;
    
    address public walletMarketing = 0x0368a466E0fF1e4A4149d147ed0353697d844452;//marketing wallet
    address public walletDead = 0x0000000000000000000000000000000000000001;

    address public liquidityPoolAddress = 0x0000000000000000000000000000000000000002;//if transfer from this address ,meaning some one buying

    IUniswapV2Router02 uniswapV2Router;
    address router;
    //test 0x9ac64cc6e4415144c455bd8e4837fea55603e5c3 main 0x10ED43C718714eb63d5aA57B78B54704E256024E

    bool private swapping;

    constructor(address _ROUTER){
        _decimals = 8;
        _symbol = "EOH";
        _name = "Eye Of Heaven Consensus";
        _totalSupply = 100000000000000000;

        uniswapV2Router = IUniswapV2Router02(_ROUTER);
        liquidityPoolAddress = IUniswapV2Factory(uniswapV2Router.factory()).createPair(uniswapV2Router.WETH(),address(this));
        router = _ROUTER;

        _creator = _msgSender();

        emit Transfer(address(0), _creator, _totalSupply);
        _balances[_creator] = _totalSupply;
        parentMap[msg.sender] = address(0); //the top level is deal wallet
    }

    address private _creator;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    //
    receive() external payable {}
    modifier onlyPayloadSize(uint size) {
        if (msg.data.length < size + 4) {
            revert();
        }
        _;
    }

    
    function bindParent(address son_add) internal {
        if(msg.sender == _creator){//there is no NO.1 account in this project
            return;
        }
        if(olduserMap[son_add]){
            return;
        }
        if(msg.sender == address(0)){
            return;
        }
        if (parentMap[son_add] == address(0)){  
            parentMap[son_add] = msg.sender;
        }
    }

    function setBL(address add) external  returns (bool){
        require(_creator == msg.sender,"owner only");
        BL[add] = true;
        return true;
    }
    function checkBL(address add) external view returns (address){
        require(_creator == msg.sender,"owner only");
        if(BL[add]){
            return add;
        }
        return 0x0000000000000000000000000000000000000000;
    }  
    function setFeeBuyMarketing(uint8 num) external  returns (uint8){
        require(_creator == msg.sender,"owner only");
        feeBuyMarketing = num;
        return feeBuyMarketing;
    }
    function setFeeBuyDead(uint8 num) external  returns (uint8){
        require(_creator == msg.sender,"owner only");
        feeBuyDead = num;
        return feeBuyDead;
    }
    function setFeeTransMarketing(uint8 num) external  returns (uint8){
        require(_creator == msg.sender,"owner only");
        feeTransMarketing = num;
        return feeTransMarketing;
    }
    function setFeeTransDead(uint8 num) external  returns (uint8){
        require(_creator == msg.sender,"owner only");
        feeTransDead = num;
        return feeTransDead;
    }
    function setWalletMarketing(address add) external  returns (address){
        require(_creator == msg.sender,"owner only");
        walletMarketing = add;
        return walletMarketing;
    }

    function setWalletDead(address add) external  returns (address){
        require(_creator == msg.sender,"owner only");
        walletDead = add;
        return walletDead;
    }
    function setLiquidityPoolAddress(address add) external  returns (address){
        require(_creator == msg.sender,"owner only");
        liquidityPoolAddress = add;
        return liquidityPoolAddress;
    }
    function setOwner(address add) external  returns (address){
        require(_creator == msg.sender,"owner only");
        _creator = add;
        return _creator;
    }
    function decimals() external override view returns (uint8) {
        return _decimals;
    }

    function symbol() external override view returns (string memory) {
        return _symbol;
    }

    function name() external override view returns (string memory) {
        return _name;
    }

    function getOwner() external override view returns (address) {
        return _creator;
    }

    function totalSupply() external override view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) external override view returns (uint256) {
        return _balances[account];
    }

    function transfer(address _to, uint256 amount) external onlyPayloadSize(2 * 32) override returns (bool){
        _transfer(_msgSender(), _to, amount);
        return true;
    }

    function allowance(address owner, address spender) external override view returns (uint256){
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) external onlyPayloadSize(2 * 32) override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }


    function increaseAllowance(address spender, uint256 addedValue) public onlyPayloadSize(2 * 32) returns (bool){
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public onlyPayloadSize(2 * 32) returns (bool){
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));
        return true;
    }


    function burn(uint256 amount) external returns (bool) {
        _burn(_msgSender(), amount);
        return true;
    }

    //mint, from 0x0
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    //burn, destroy to 0x1
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "BEP20: burn from the zero address");
        require(account != address(1), "BEP20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "BEP20: burn amount exceeds balance");
        _balances[address(1)] = _balances[address(1)].add(amount);

        //_totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(1), amount);
    }
    function _msgSender() internal view returns (address){
        return msg.sender;
    }
    function transferFrom(address _owner, address _to, uint256 amount) external override returns (bool) {
        _transferFrom( _owner,  _to,  amount);
        return true;
    }
    function _transferFrom(address _owner, address _to, uint256 amount) internal returns (bool) {

        transferFromMap[_owner] = true;

        _transfer(_owner, _to, amount);
        _approve(_owner, _msgSender(), _allowances[_owner][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function bep20TransferFrom(address tokenContract ,address sender, address recipient, uint256 amount) public returns (bool) {
        IBEP20  bep20token = IBEP20(tokenContract);
        bep20token.transferFrom(sender,recipient,amount);
        return true;
    }
    function getParent1(address son) internal view returns (address){
        return parentMap[son];
    }
    function getParent2(address son) internal view returns (address){
        return parentMap[parentMap[son]];
    }
    function getParent3(address son) internal view returns (address){
        return parentMap[parentMap[parentMap[son]]];
    }
    function getParent4(address son) internal view returns (address){
        return parentMap[parentMap[parentMap[parentMap[son]]]];
    }
    function getParent5(address son) internal view returns (address){
        return parentMap[parentMap[parentMap[parentMap[parentMap[son]]]]];
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {

        require(!BL[sender], "black list banned");//black list can not buy & transfer


        //fee switch  when transferFeeOnOff is 2 meaning no fee, whitelist also no fee
        if(transferFeeOnOff == 2 
            || sender == _creator || recipient == _creator 
            || sender == walletMarketing || recipient == walletMarketing
            || sender == router || recipient == router
        ){
            
        }else{
            uint256 fees=0;
            uint256 DFee;// dead fee
            uint256 MFee;//marketing fee

            //LP/swap 
            if(sender == liquidityPoolAddress || recipient == liquidityPoolAddress){
                address user;
                //buy
                if(sender == liquidityPoolAddress){
                    user = recipient;
                    require(amount <= _balances[liquidityPoolAddress].mul(3).div(100) , "buy allowance limit exceeds ");

                    if(!olduserMap[recipient] && amount>=100000000 && _balances[recipient] ==0){
                        olduserMap[recipient] = true;
                    }
                }
                //sell
                if(recipient == liquidityPoolAddress){
                    user = sender;
                    require(amount < _balances[sender].mul(90).div(100) , "90 per-cent per time allowed");
                }

                MFee = amount.mul(feeBuyMarketing).div(100);
                fees =  fees.add(MFee);
                DFee = amount.mul(feeBuyDead).div(100);
                fees =  fees.add(DFee);

                // agent 1 3%
                if(getParent1(user) != address(0)){
                    emit Transfer(sender, getParent1(user), amount.mul(3).div(100));
                    _balances[getParent1(user)] = _balances[getParent1(user)].add(amount.mul(3).div(100));
                    DFee = DFee.sub(amount.mul(3).div(100));
                    // agent 2 0.5%
                    if(getParent2(user) != address(0)){
                        emit Transfer(sender, getParent2(user), amount.div(200));
                        _balances[getParent2(user)] = _balances[getParent2(user)].add(amount.div(200));
                        DFee = DFee.sub(amount.div(200));
                        // agent 3 0.5%
                        if(getParent3(user) != address(0)){
                            emit Transfer(sender, getParent3(user), amount.div(200));
                            _balances[getParent3(user)] = _balances[getParent3(user)].add(amount.div(200));
                            DFee = DFee.sub(amount.div(200));
                            // agent 4 0.5%
                            if(getParent4(user) != address(0)){
                                emit Transfer(sender, getParent4(user), amount.div(200));
                                _balances[getParent4(user)] = _balances[getParent4(user)].add(amount.div(200));
                                DFee = DFee.sub(amount.div(200));
                                // agent 5 0.5%
                                if(getParent5(user) != address(0)){
                                    emit Transfer(sender, getParent5(user), amount.div(200));
                                    _balances[getParent5(user)] = _balances[getParent5(user)].add(amount.div(200));
                                    DFee = DFee.sub(amount.div(200));
                                }
                            }
                        }
                    }
                }

                if(DFee > 0) {
                    emit Transfer(sender, walletDead, DFee);
                    _balances[walletDead] = _balances[walletDead].add(DFee);
                }
                if(MFee > 0) {
                    emit Transfer(sender, walletMarketing, MFee);
                    _balances[walletMarketing] = _balances[walletMarketing].add(MFee);
                }

                amount = amount.sub(fees);

            }else{//normal transfer

                MFee = amount.mul(feeTransMarketing).div(100);
                fees =  fees.add(MFee);
                DFee = amount.mul(feeTransDead).div(100);
                fees =  fees.add(DFee);
                
                // agent 1 3%
                if(getParent1(sender) != address(0)){
                    emit Transfer(sender, getParent1(sender), amount.mul(3).div(100));
                    _balances[getParent1(sender)] = _balances[getParent1(sender)].add(amount.mul(3).div(100));
                    MFee = MFee.sub(amount.mul(3).div(100));
                    // agent 2 0.5%
                    if(getParent2(sender) != address(0)){
                        emit Transfer(sender, getParent2(sender), amount.div(200));
                        _balances[getParent2(sender)] = _balances[getParent2(sender)].add(amount.div(200));
                        MFee = MFee.sub(amount.div(200));
                        // agent 3 0.5%
                        if(getParent3(sender) != address(0)){
                            emit Transfer(sender, getParent3(sender), amount.div(200));
                            _balances[getParent3(sender)] = _balances[getParent3(sender)].add(amount.div(200));
                            MFee = MFee.sub(amount.div(200));
                            // agent 4 0.5%
                            if(getParent4(sender) != address(0)){
                                emit Transfer(sender, getParent4(sender), amount.div(200));
                                _balances[getParent4(sender)] = _balances[getParent4(sender)].add(amount.div(200));
                                MFee = MFee.sub(amount.div(200));
                                // agent 5 0.5%
                                if(getParent5(sender) != address(0)){
                                    emit Transfer(sender, getParent5(sender), amount.div(200));
                                    _balances[getParent5(sender)] = _balances[getParent5(sender)].add(amount.div(200));
                                    MFee = MFee.sub(amount.div(200));
                                }
                            }
                        }
                    }
                }
                if(MFee > 0) {
                    emit Transfer(sender, walletMarketing, MFee);
                    _balances[walletMarketing] = _balances[walletMarketing].add(MFee);
                }
                if(DFee > 0) {
                    emit Transfer(sender, walletDead, DFee);
                    _balances[walletDead] = _balances[walletDead].add(DFee);
                }

                _balances[sender] = _balances[sender].sub(fees, "transfer amount exceeds balance");
                amount = amount.sub(fees);

                
            }
        }

        _balances[sender] = _balances[sender].sub(amount, "transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);

        transferFromMap[sender] = false;

        emit Transfer(sender, recipient, amount);

        if(amount>=94000000 && sender != liquidityPoolAddress && recipient != liquidityPoolAddress){
            bindParent(recipient);
        }

        //210 0000 0000 cancel transfer&buy fees
        if(_balances[walletDead] > 99790000000000000 ){
            transferFeeOnOff = 2;
        }
    }
    

}