pragma solidity ^0.8.3;
// SPDX-License-Identifier: Unlicensed

// The link contract interface is used to connect the phase two contract to the token contract
interface LinkContract{
    function _execute() external returns(uint);  
}

interface IERC20 {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256); 

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);
    
    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
 
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor (){
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function geUnlockTime() public view returns (uint256) {
        return _lockTime;
    }

    //Locks the contract for owner for the amount of time provided
    function lock(uint256 timeInSeconds) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = block.timestamp + timeInSeconds;
        emit OwnershipTransferred(_owner, address(0));
    }
    
    //Unlocks the contract for owner when _lockTime is exceeds
    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(block.timestamp > _lockTime , "Contract is locked");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}

// pragma solidity >=0.5.0;
interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}
// pragma solidity >=0.5.0;
interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}

// pragma solidity >=0.6.2;
interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

// pragma solidity >=0.6.2;
interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

contract DDrops is Ownable, IERC20 {
    
    using SafeMath for uint256;

    mapping (address => uint) private _balances;
    mapping (address => mapping (address => uint)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) private _isExcludedFromCooldown;
    mapping (address => bool) private _isExcludedFromMaxBuyMaxSell;
    mapping (address => bool) private _isBlacklisted;

    bool private _phase2 = false;
    bool private _canBurn = false;
    bool private _blacklistMode = true;
    bool private _cooldownModeEnabled = true;
    uint private _cooldownTimerInterval = 60;
    mapping (address => uint) private _cooldownTimer;
    
    string private constant _name = "DDrops";
    string private constant _symbol = "DOP";
    uint8 private constant _decimals = 9;
    uint private constant _totalSupply = 3375 * 10 ** 5 * 10 ** _decimals;
    
    receive () external payable {}

    uint private _buyContributionFee;
    uint private _sellContributionFee;
    uint private _previousBuyContributionFee;
    uint private _previousSellContributionFee;

    uint private _maxBuy;
    uint private _maxSell;
    
    uint private _maxTrxAmount =  _totalSupply;
    uint private _amountToLiquify = 1 * 10 ** 5 * 10 ** _decimals;
    
    address private _treasureWalletAddress;
    address private _developementWalletAddress;
    address private _uniswapV2RouterAddress;
    address private _linkContractAddress;

    
    IUniswapV2Router02 private _uniswapV2Router;
    address private _uniswapV2Pair;
    
    bool private _lock;
    bool private _swapAndLiquifyEnabled = true;

    event SwapAndLiquifiedUpdate (bool value);  
    
    /** Getter functions for private variables **/
     function isSwapEnabled() public view returns (bool){
        return _swapAndLiquifyEnabled;
    }
    function isBlackListMode() public view returns (bool){
        return _blacklistMode;
    }
    function isCoolDownMode() public view returns (bool){
        return _cooldownModeEnabled;
    }
    function getTreasureWallet() public view returns (address) {
        return _treasureWalletAddress;
    }    
    function getMaxBuy() public view returns (uint){
        return _maxBuy;
    }
    function getMaxSell() public view returns (uint){
        return _maxSell;
    }
    function getBuyContributionFee() public view returns (uint){
        return _buyContributionFee;
    }
    function getSellContributionFee() public view returns (uint){
        return _sellContributionFee;
    }
    function getCooldownTimeInterval() public view returns (uint){
        return _cooldownTimerInterval;
    }
    function isExcludedFromFee(address account) public view returns(bool){
        return _isExcludedFromFee[account];
    }
    function getMaxTrxAmount() public view returns (uint){
        return _maxTrxAmount;
    }

    /***** onlyOwner functions to change private parameters *****/

    //Enable burn through dxSale
    function setCanBurn(bool _value) external onlyOwner{
        _canBurn = _value;
    }

    //Use te exclude/include account form maxBuy and maxSell
    function excludedFromMaxBuyMaxSell(address _account) external onlyOwner{
        _isExcludedFromMaxBuyMaxSell[_account] = true;
    }

    function includedInMaxBuyMaxSell(address _account) external onlyOwner{
        _isExcludedFromMaxBuyMaxSell[_account] = false;
    }

    // enable cooldown between trades and set the timeinterval between trades
    function setCooldownMode(bool _value, uint _timeInterval) external onlyOwner {
        _cooldownModeEnabled = _value;
        _cooldownTimerInterval = _timeInterval;
    }
    //Enable blacklisting
    function setBlacklistMode(bool _value) external onlyOwner{
        _blacklistMode = _value;
    }
    //Add or remove one or more addresses from the black list, make sure to send enough gas
    function manage_blacklist(address[] calldata _addresses, bool _value) external onlyOwner {
        for (uint256 i; i < _addresses.length; ++i) {
            _isBlacklisted[_addresses[i]] = _value;
        }
    }
    // Set uniswapV2RouterAddress
    function setRouterAddress(address _newRouterAddress, bool _migrate) external onlyOwner{
        _uniswapV2RouterAddress = _newRouterAddress;
        IUniswapV2Router02 __uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);
        _uniswapV2Router = __uniswapV2Router;
        if(_migrate == true) {_uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());}
    }    
    // Set total amount of tokens that can be traded per transaction
    function setMaxTrxAmount (uint _newMaxTrxAmount) external onlyOwner returns (bool){
        _maxTrxAmount = _newMaxTrxAmount;
        return true;
    }
    // Set amount of tokens to swap for BNB if this is set to more than the maxTrxAmount maxTrxAmount is used instead
    function setAmountToLiquify(uint _newAmountToLiquify) external onlyOwner returns (bool){
        _amountToLiquify = _newAmountToLiquify;
        return true;
    }
    // Set the amount of BUY contribution fee, limited to max 15% 
    function setBuyContributionFee(uint _newBuyContributionFee) external onlyOwner returns (bool){
        require(_newBuyContributionFee <= 50);
        _buyContributionFee = _newBuyContributionFee;
        return true;
    }
    // Set the amount of SELL contribution fee, limited to max 20%
    function setSellContributionFee(uint _newSellContributionFee) external onlyOwner returns (bool){
        require(_newSellContributionFee <= 50);
        _sellContributionFee = _newSellContributionFee;
        return true;
    }
    function setSwapAndLiquifyEnabled(bool _newValue) external onlyOwner returns (bool){
        _swapAndLiquifyEnabled = _newValue;
        
        emit SwapAndLiquifiedUpdate(_newValue);
        return true;
    }
    
    function setDevelopementWallet(address _newDevelopementWallet) external onlyOwner returns (bool){
        _developementWalletAddress = _newDevelopementWallet;
        return true;
    }
    
     function setTreasureWallet(address _newTreasureWallet) external onlyOwner returns (bool){
        _treasureWalletAddress = _newTreasureWallet;
        return true;
    }
    
    function excludeFromFee(address _account) external onlyOwner{
        _isExcludedFromFee[_account] = true;
    }
    
     function includeInFee(address _account) external onlyOwner{
        _isExcludedFromFee[_account] = false;
    }

    function excludeFromCooldown(address _account) external onlyOwner{
        _isExcludedFromCooldown[_account] = true;
    }

    function includeInCooldown(address _account) external onlyOwner{
        _isExcludedFromCooldown[_account] = false;
    }

    function setPhase2(bool _newValue) external onlyOwner{
        _phase2 = _newValue;
    }

    function setMaxBuy(uint _newMaxBuy) external onlyOwner{
        _maxBuy = _newMaxBuy;
    }
    function setMaxSell(uint _newMaxSell) external onlyOwner{
        _maxSell = _newMaxSell;
    }
    /******************* End of onlyOwner functions*********************/
    modifier noReEntry {
        _lock = true;
        _;
        _lock = false;
    }
    
    constructor() {

        _maxBuy = 1000000*10**_decimals;
        _maxSell = 400000*10**_decimals;
        _maxTrxAmount = 10000000*10**_decimals;
        _balances[_msgSender()] = 3375 * 10 ** 5 * 10 ** _decimals;
        
        _buyContributionFee = 50; //this is also the normal transaction fee
        _sellContributionFee = 50;

        _treasureWalletAddress = 0x6260845ea07Bfe5A8B5463b83B1d3B2c53D2dCE8;
        _developementWalletAddress = 0xE1032FF98B26b634393612E59819DcEe39F8c4b8;
        _uniswapV2RouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;

        IUniswapV2Router02 __uniswapV2Router = IUniswapV2Router02(_uniswapV2RouterAddress);
        _uniswapV2Pair = IUniswapV2Factory(__uniswapV2Router.factory()).createPair(address(this), __uniswapV2Router.WETH());
        _uniswapV2Router = __uniswapV2Router;
        
        //exclude owner,and this contract form fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;

        _isExcludedFromMaxBuyMaxSell[address(this)] = true;
        _isExcludedFromMaxBuyMaxSell[owner()] = true;

        _isExcludedFromCooldown[owner()] = true;
        _isExcludedFromCooldown[address(this)] = true;
        
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }
    
    function burn(uint _amount) public {
        require(_amount > 0, "Burn amount must be greater than zero");
        require(_amount <= _balances[msg.sender], "Not enough fonds to complete the transaction");
        _balances[msg.sender] = _balances[msg.sender].sub(_amount);
        _balances[0x000000000000000000000000000000000000dEaD] = _balances[0x000000000000000000000000000000000000dEaD].add(_amount);
        
    }
    
    function name() public pure returns (string memory){
        return _name;
    }
    
    function symbol() public pure returns (string memory){
        return _symbol;
    }
    
    function decimals() public pure returns (uint8){
        return _decimals;
        
    }
    
    function totalSupply() public pure override returns (uint256){
        return _totalSupply;
    }
    
    function balanceOf(address account) public view override returns (uint256){
        return _balances[account];
    }

     function allowance(address owner, address spender) public view override returns (uint256){
        return _allowances[owner][spender];
    }

    function transfer(address _recipient, uint256 _amount) public override returns (bool){
        _transfer(_msgSender(), _recipient, _amount);
        return true;
    }
    
    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool){
        _transfer(_sender, _recipient, _amount);
        _approve(_sender, _msgSender(), _allowances[_sender][_msgSender()].sub(_amount, "ERC20: Transfer amount exceeds allowance"));
        return true;
    }

    function _transfer(address _from, address _to, uint _amount) private{
        require(_from != address(0), "ERC20: transfer from the zero address");
        if (_canBurn == false) {require(_to != address(0), "ERC20: transfer to the zero address");}
        require(_amount > 0, "Transfer amount must be greater than zero");
        require(_amount <= _balances[_from], "Insufficient funds");
        
        if(_from != owner() && _to != owner()) {require(_amount <= _maxTrxAmount, "Transfer amount exceeds the maxTrxAmount.");}

        // Check for cooldownTimer
        if (
            _from == _uniswapV2Pair &&
            _cooldownModeEnabled &&
            !_isExcludedFromCooldown[_to]
            ){
            require(_cooldownTimer[_to] < block.timestamp,"You have to wait before making a new transaction");
            _cooldownTimer[_to] = block.timestamp + _cooldownTimerInterval;
        }
        else if(
            _to == _uniswapV2Pair &&
            _cooldownModeEnabled &&
            !_isExcludedFromCooldown[_from]
            ){
            require(_cooldownTimer[_from] < block.timestamp,"You have to wait before making a new transaction");
            _cooldownTimer[_from] = block.timestamp + _cooldownTimerInterval;
        }

        // Requiring that maxBuy and maxSell are respected
        if(_from == _uniswapV2Pair && !_isExcludedFromMaxBuyMaxSell[_to]) require(_amount <= _maxBuy,"Token amount exceeds maxBuy");
        if(_to == _uniswapV2Pair && !_isExcludedFromMaxBuyMaxSell[_from]) require(_amount <= _maxSell,"Token amount exceeds maxSell");

        // Check for blacklist
        if(_blacklistMode){require(!_isBlacklisted[_from] && !_isBlacklisted[_to],"Transaction between these two accounts is blacklisted");}       
        
            
        uint256 contractTokenBalance = balanceOf(address(this));
            
        if(contractTokenBalance >= _maxTrxAmount)
        {
            contractTokenBalance = _maxTrxAmount;
        }
        
        bool overMinTokenBalance = contractTokenBalance >= _amountToLiquify;
        
        if (
            _swapAndLiquifyEnabled &&
            overMinTokenBalance &&
            _from != _uniswapV2Pair &&
            _phase2 == false &&
            !_lock
        ) {
            contractTokenBalance =_amountToLiquify;
            //send funds to wallets
            swapAndLiquify(contractTokenBalance);
        }else if(
            _swapAndLiquifyEnabled &&
            overMinTokenBalance &&
            _from != _uniswapV2Pair &&
            _phase2 == true &&
            !_lock
        ){
            LinkContract _link = LinkContract(_linkContractAddress);
            _balances[address(this)] = _balances[address(this)].sub(contractTokenBalance);
            _balances[_linkContractAddress] = _balances[_linkContractAddress].add(contractTokenBalance);
            _link._execute();

        }
        //indicates if fee should be deducted from transfer
        bool takeFee = true;
        
        //if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcludedFromFee[_from] || _isExcludedFromFee[_to]){
            takeFee = false;
        }
        //Here we initiate the transfer fuction
        _transferToken(_from, _to, _amount, takeFee);
    }
    
    function _transferToken(address _from, address _to, uint _amount, bool takeFee) private {

        if(!takeFee) removeAllFee();

        uint _takeContribution;
        //Code Below: decide if its a buy or sell order and adjust tax accoirdingly    
        if (_to == _uniswapV2Pair){
            _takeContribution = _calculateAbsoluteSellContributionFee(_amount);
        }else{
            _takeContribution = _calculateAbsoluteBuyContributionFee(_amount);
        }
        uint trAmountToRecipient = _amount.sub(_takeContribution);
        uint trAmountToContract = _takeContribution;

        _balances[_from] = _balances[_from].sub(_amount);
        _balances[_to] = _balances[_to].add(trAmountToRecipient);
        _balances[address(this)] = _balances[address(this)].add(trAmountToContract);
        
        if(!takeFee){restoreAllFee();}

        emit Transfer(_from, _to, _amount);
    }
    
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    
     function _approve(address _owner, address _spender, uint256 _amount) private {
        require(_owner != address(0), "ERC20: approve from the zero address");
        require(_spender != address(0), "ERC20: approve to the zero address");

        _allowances[_owner][_spender] = _amount;
        emit Approval(_owner, _spender, _amount);
    }
    
    function swapAndLiquify(uint256 contractTokenBalance) private noReEntry{
        
        uint256 initialBalance = address(this).balance;

        // here we swap DOP for BNB
        _swapTokensForBnb(contractTokenBalance);

        // how much BNB did we just swap into?
        uint256 newBalance = address(this).balance.sub(initialBalance);
        
        //here we share the fee between the two wallets, treasureWallet = 4%, developementWallet = 2% from a total of 6% fee which results into a 60/40 ratio;
        uint256 _developementWalletAmount = newBalance.div(100).mul(40);
        uint256 _treasureWalletAmount = newBalance.div(100).mul(60);
        
        //here we send the funds to the designated wallets
        sendValue(payable(_developementWalletAddress), _developementWalletAmount);
        sendValue(payable(_treasureWalletAddress), _treasureWalletAmount);
    }
    
    //This function swaps DOP for BNB
    function _swapTokensForBnb(uint256 tokenAmount) private{
        // generate the uniswap pair path of token -> wbnb
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = _uniswapV2Router.WETH();

        _approve(address(this), address(_uniswapV2Router), tokenAmount);

        // make the swap
        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of BNB
            path,
            address(this),
            block.timestamp
        );
    }
    
    function removeAllFee() private {
        if((_buyContributionFee == 0)&&(_sellContributionFee == 0)) return;
        
        _previousBuyContributionFee = _buyContributionFee;
        _previousSellContributionFee = _sellContributionFee;
         
        _buyContributionFee = _sellContributionFee = 0;    
    }
    
    function restoreAllFee() private {
        _buyContributionFee = _previousBuyContributionFee;
        _sellContributionFee = _previousSellContributionFee;
    }
    //Note buyContributionFee is the same as reqular transaction fee 
    function _calculateAbsoluteBuyContributionFee(uint amount) internal view returns (uint){
        return amount.mul(_buyContributionFee).div(10**2);
    }

    function _calculateAbsoluteSellContributionFee(uint amount) internal view returns (uint){
        return amount.mul(_sellContributionFee).div(10**2);
    }
    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }    
}