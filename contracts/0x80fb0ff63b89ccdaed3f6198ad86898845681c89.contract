{{
  "language": "Solidity",
  "sources": {
    "/contracts/MVCC.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../contracts/interfaces/IPancakeFactory.sol\";\r\nimport \"../contracts/interfaces/IPancakeRouter01.sol\";\r\nimport \"../contracts/interfaces/IPancakeRouter02.sol\";\r\nimport \"../contracts/interfaces/IPancakePair.sol\";\r\n\r\ncontract MVCC is Context, IERC20, Ownable {\r\n    string private constant _name = \"MVCC TOKEN\";\r\n    string private constant _symbol = \"MVCC\";\r\n    uint8 private constant _decimals = 18;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 10000000 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    address[] private _excluded;\r\n    address public referralFeeReceiver;\r\n    address public superNodeFeeReceiver;\r\n\r\n    uint256 public referralFee = 5; \r\n    uint256 public superNodeFee = 2; \r\n    uint256 public liquidityFee = 2;  \r\n    uint256 public taxFee = 1; // reflection\r\n    uint256 public swapThreshold = _tTotal * 1/1000; //0.1%;\r\n    \r\n    // auto liquidity\r\n    bool public _swapAndLiquifyEnabled = true;\r\n    bool _inSwapAndLiquify;\r\n\r\n    IPancakeRouter02 public _pancakeRouter;\r\n    address public _pancakePair;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public _isExcludedFromAutoLiquidity;\r\n\r\n    modifier lockTheSwap {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor (address _referralFeeReceiver, address _superNodeFeeReceiver) {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        \r\n        // uniswap\r\n        //Testnet 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n        //Mainnet 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        _pancakeRouter = pancakeRouter;\r\n        _pancakePair = IPancakeFactory(pancakeRouter.factory())\r\n            .createPair(address(this), pancakeRouter.WETH());\r\n        \r\n        // exclude system contracts\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_referralFeeReceiver] = true;\r\n        _isExcludedFromFee[_superNodeFeeReceiver] = true;\r\n\r\n        _isExcludedFromAutoLiquidity[_pancakePair] = true;\r\n        _isExcludedFromAutoLiquidity[address(_pancakeRouter)] = true;\r\n\r\n        referralFeeReceiver = _referralFeeReceiver;\r\n        superNodeFeeReceiver = _superNodeFeeReceiver;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() external pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        bool isOverMinTokenBalance = contractTokenBalance >= swapThreshold;\r\n        if (\r\n            isOverMinTokenBalance &&\r\n            !_inSwapAndLiquify &&\r\n            !_isExcludedFromAutoLiquidity[from] &&\r\n            _swapAndLiquifyEnabled\r\n        ) {\r\n            swapAndLiquify(contractTokenBalance);\r\n        }\r\n\r\n        bool takeFee = true;\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            takeFee = false;\r\n        }\r\n        tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) internal lockTheSwap {\r\n        // split the contract balance into halves\r\n        uint256 half = contractTokenBalance / 2;\r\n        uint256 otherHalf = contractTokenBalance - half;\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        swapTokensForBnb(half); // <- this breaks the BNB -> HATE swap when swap+liquify is triggered\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = address(this).balance - initialBalance;\r\n\r\n        // add liquidity to uniswap\r\n        addLiquidity(otherHalf, newBalance);\r\n        \r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForBnb(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _pancakeRouter.WETH();\r\n\r\n        _approve(address(this), address(_pancakeRouter), tokenAmount);\r\n\r\n        // make the swap\r\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapTokensForBnb(tokenAmount);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) internal {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_pancakeRouter), tokenAmount);\r\n\r\n        // add the liquidity\r\n        _pancakeRouter.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        emit AddLiquidity(tokenAmount, bnbAmount);\r\n    }\r\n\r\n    function deliver(uint256 tAmount) external {\r\n        address sender = _msgSender();\r\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\r\n\r\n        (, uint256 tFee, uint256 tLiquidity, uint256 tReferral, uint256 tSuperNode) = getTValues(tAmount);\r\n        uint256 currentRate = getRate();\r\n        (uint256 rAmount,,, uint256 rReferralFee, uint256 rSuperNodeFee) = getRValues(tAmount, tFee, tLiquidity, tReferral, tSuperNode, currentRate);\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[referralFeeReceiver] = _rOwned[referralFeeReceiver] + rReferralFee;\r\n        _rOwned[superNodeFeeReceiver] = _rOwned[superNodeFeeReceiver] + rSuperNodeFee;\r\n        _rTotal = _rTotal - rAmount;\r\n        _tFeeTotal = _tFeeTotal + tAmount;\r\n\r\n        emit Deliver(tAmount);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n\r\n        uint256 currentRate = getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) internal {\r\n        uint256 previousTaxFee = taxFee;\r\n        uint256 previousLiquidityFee = liquidityFee;\r\n        uint256 previousReferralFee = referralFee;\r\n        uint256 previousSuperNodeFee = superNodeFee;\r\n        \r\n        if (!takeFee) {\r\n            taxFee = 0;\r\n            liquidityFee = 0;\r\n            referralFee = 0;\r\n            superNodeFee = 0;\r\n        }\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if (!takeFee) {\r\n            taxFee = previousTaxFee;\r\n            liquidityFee = previousLiquidityFee;\r\n            referralFee = previousReferralFee;\r\n            superNodeFee = previousSuperNodeFee;\r\n        }\r\n    }\r\n\r\n    function transferStandard(address sender, address recipient, uint256 tAmount) internal {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tReferral, uint256 tSuperNode) = getTValues(tAmount);\r\n        uint256 currentRate = getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee,,) = getRValues(tAmount, tFee, tReferral, tSuperNode, tLiquidity, currentRate);\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n\r\n        takeTransactionFee(address(this), tLiquidity, currentRate);\r\n        takeTransactionFee(referralFeeReceiver, tReferral, currentRate);\r\n        takeTransactionFee(superNodeFeeReceiver, tSuperNode, currentRate);\r\n        reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function transferBothExcluded(address sender, address recipient, uint256 tAmount) internal {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tReferral, uint256 tSuperNode) = getTValues(tAmount);\r\n        uint256 currentRate = getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee,,) = getRValues(tAmount, tFee, tReferral, tSuperNode, tLiquidity, currentRate);\r\n\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n\r\n        takeTransactionFee(address(this), tLiquidity, currentRate);\r\n        reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function transferToExcluded(address sender, address recipient, uint256 tAmount) internal {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tReferral, uint256 tSuperNode) = getTValues(tAmount);\r\n        uint256 currentRate = getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee,,) = getRValues(tAmount, tFee, tReferral, tSuperNode, tLiquidity, currentRate);\r\n\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n\r\n        takeTransactionFee(address(this), tLiquidity, currentRate);\r\n        reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function transferFromExcluded(address sender, address recipient, uint256 tAmount) internal {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tReferral, uint256 tSuperNode) = getTValues(tAmount);\r\n        uint256 currentRate = getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee,,) = getRValues(tAmount, tFee, tReferral, tSuperNode, tLiquidity, currentRate);\r\n\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        \r\n        takeTransactionFee(address(this), tLiquidity, currentRate);\r\n        reflectFee(rFee, tFee);\r\n\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function reflectFee(uint256 rFee, uint256 tFee) internal {\r\n        _rTotal    = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tFee;\r\n    }\r\n\r\n    function takeTransactionFee(address to, uint256 tAmount, uint256 currentRate) internal {\r\n        if (tAmount <= 0) { return; }\r\n\r\n        uint256 rAmount = tAmount * currentRate;\r\n        _rOwned[to] = _rOwned[to] + rAmount;\r\n        if (_isExcluded[to]) {\r\n            _tOwned[to] = _tOwned[to] + tAmount;\r\n        }\r\n\r\n        emit Transfer(address(this), to, tAmount);\r\n    }\r\n    \r\n    function calculateFee(uint256 amount, uint256 fee) internal pure returns (uint256) {\r\n        return amount * fee / 100;\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isExcludedFromReward(address account) external view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function rescueToken(address tokenAddress, address to) external onlyOwner {\r\n        uint256 contractBalance = IERC20(tokenAddress).balanceOf(address(this));\r\n        IERC20(tokenAddress).transfer(to, contractBalance);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // ===================================================================\r\n    // GETTERS\r\n    // ===================================================================\r\n\r\n    function getTValues(uint256 tAmount) internal view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        uint256 tFee = calculateFee(tAmount, taxFee);\r\n        uint256 tLiquidity = calculateFee(tAmount, liquidityFee);\r\n        uint256 tReferral = calculateFee(tAmount, referralFee);\r\n        uint256 tSuperNode = calculateFee(tAmount, superNodeFee);\r\n        uint256 tTransferAmount = tAmount - (tFee + tLiquidity + tReferral + tSuperNode);\r\n        return (tTransferAmount, tFee, tLiquidity, tReferral, tSuperNode);\r\n    }\r\n\r\n    function getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tReferral, uint256 tSuperNode, uint256 currentRate) \r\n    internal pure returns (uint256, uint256, uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rLiquidity = tLiquidity * currentRate;\r\n        uint256 rReferral = tReferral * currentRate;\r\n        uint256 rSuperNode = tSuperNode * currentRate;\r\n        uint256 rTransferAmount = rAmount - (rFee + rLiquidity + rReferral + rSuperNode);\r\n        return (rAmount, rTransferAmount, rFee, rReferral, rSuperNode);\r\n    }\r\n\r\n    function getRate() internal view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function getCurrentSupply() internal view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    // ===================================================================\r\n    // SETTERS\r\n    // ===================================================================\r\n\r\n    function setExcludeFromReward(address account) external onlyOwner {\r\n        require(account != address(0), \"Address zero\");\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n\r\n        emit SetExcludeFromReward(account);\r\n    }\r\n\r\n    function setIncludeInReward(address account) external onlyOwner {\r\n        require(account != address(0), \"Address zero\");\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        emit SetIncludeInReward(account);\r\n    }\r\n\r\n    function setReferralFeeReceiver(address newReferralFeeReceiver) external onlyOwner {\r\n        require(newReferralFeeReceiver != address(0), \"Address zero\");\r\n        referralFeeReceiver = newReferralFeeReceiver;\r\n\r\n        emit SetReferralFeeReceiver(newReferralFeeReceiver);\r\n    }\r\n\r\n    function setSuperNodeFeeReceiver(address newSuperNodeFeeReceiver) external onlyOwner {\r\n        require(newSuperNodeFeeReceiver != address(0), \"Address zero\");\r\n        superNodeFeeReceiver = newSuperNodeFeeReceiver;\r\n\r\n        emit SetSuperNodeFeeReceiver(newSuperNodeFeeReceiver);\r\n    }\r\n\r\n    function setExcludedFromFee(address addr, bool e) external onlyOwner {\r\n        require(addr != address(0), \"Address zero\");\r\n        _isExcludedFromFee[addr] = e;\r\n\r\n        emit SetExcludedFromFee(addr, e);\r\n    }\r\n    \r\n    function setTaxFeePercent(uint256 newTaxFee) external onlyOwner {\r\n        require(newTaxFee <= 5, \"Exceeded 5 percent\");\r\n        taxFee = newTaxFee;\r\n\r\n        emit SetTaxFeePercent(newTaxFee);\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 newLiquidityFee) external onlyOwner {\r\n        require(newLiquidityFee <= 5, \"Exceeded 5 percent\");\r\n        liquidityFee = newLiquidityFee;\r\n\r\n        emit SetLiquidityFeePercent(newLiquidityFee);\r\n    }\r\n\r\n    function setReferralFeePercent(uint256 newReferralFee) external onlyOwner {\r\n        require(newReferralFee <= 5, \"Exceeded 5 percent\");\r\n        referralFee = newReferralFee;\r\n\r\n        emit SetReferralFeePercent(newReferralFee);\r\n    }\r\n\r\n    function setSuperNodeFeePercent(uint256 newSuperNodeFee) external onlyOwner {\r\n        require(newSuperNodeFee <= 5, \"Exceeded 5 percent\");\r\n        superNodeFee = newSuperNodeFee;\r\n\r\n        emit SetSuperNodeFeePercent(newSuperNodeFee);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool e) external onlyOwner {\r\n        _swapAndLiquifyEnabled = e;\r\n\r\n        emit SwapAndLiquifyEnabledUpdated(e);\r\n    }\r\n\r\n    function setSwapThreshold(uint256 newSwapThreshold) external onlyOwner {\r\n        require(newSwapThreshold > 0, \"must be larger than zero\");\r\n        swapThreshold = newSwapThreshold;\r\n\r\n        emit SetSwapThreshold(newSwapThreshold);\r\n    }\r\n    \r\n    function setUniswapRouter(address newUniswapRouter) external onlyOwner {\r\n        require(newUniswapRouter != address(0), \"Address zero\");\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(newUniswapRouter);\r\n        _pancakeRouter = pancakeRouter;\r\n\r\n        emit SetUniswapRouter(newUniswapRouter);\r\n    }\r\n\r\n    function setUniswapPair(address newUniswapPair) external onlyOwner {\r\n        require(newUniswapPair != address(0), \"Address zero\");\r\n        _pancakePair = newUniswapPair;\r\n\r\n        emit SetUniswapPair(newUniswapPair);\r\n    }\r\n\r\n    function setExcludedFromAutoLiquidity(address addr, bool b) external onlyOwner {\r\n        require(addr != address(0), \"Address zero\");\r\n        _isExcludedFromAutoLiquidity[addr] = b;\r\n\r\n        emit SetExcludedFromAutoLiquidity(addr, b);\r\n    }\r\n\r\n    // ===================================================================\r\n    // EVENTS\r\n    // ===================================================================\r\n\r\n    event Deliver(uint256 tAmount);\r\n    event SetExcludeFromReward(address account);\r\n    event SetIncludeInReward(address account);\r\n    event SetReferralFeeReceiver(address referralWallet);\r\n    event SetSuperNodeFeeReceiver(address superNodeWallet);\r\n    event SetExcludedFromFee(address account, bool e);\r\n    event SetTaxFeePercent(uint256 taxFee);\r\n    event SetLiquidityFeePercent(uint256 liquidityFee);\r\n    event SetReferralFeePercent(uint256 referralFee);\r\n    event SetSuperNodeFeePercent(uint256 superNodeFee);\r\n    event SetSwapAndLiquifyEnabled(bool e);\r\n    event SetSwapThreshold(uint256 swapThreshold);\r\n    event SetUniswapRouter(address uniswapRouter);\r\n    event SetUniswapPair(address uniswapPair);\r\n    event SetExcludedFromAutoLiquidity(address a, bool b);\r\n    event RescueToken(address tokenAddress, address to);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapTokensForBnb(uint256 tokenAmount);\r\n    event AddLiquidity(uint256 tokenAmount, uint256 bnbAmount);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiquidity);\r\n}"
    },
    "/contracts/interfaces/IPancakeRouter02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.6.2;\r\n\r\nimport \"./IPancakeRouter01.sol\";\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"
    },
    "/contracts/interfaces/IPancakeRouter01.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}\r\n"
    },
    "/contracts/interfaces/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "/contracts/interfaces/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}