//SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMath {
    /**
     * @dev Returns the addition of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the substraction of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.
     *
     * _Available since v3.4._
     */
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
        // benefit is lost if 'b' is also tested.
        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    /**
     * @dev Returns the division of two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.
     *
     * _Available since v3.4._
     */
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    /**
     * @dev Returns the addition of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `+` operator.
     *
     * Requirements:
     *
     * - Addition cannot overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting on
     * overflow (when the result is negative).
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    /**
     * @dev Returns the multiplication of two unsigned integers, reverting on
     * overflow.
     *
     * Counterpart to Solidity's `*` operator.
     *
     * Requirements:
     *
     * - Multiplication cannot overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting on
     * division by zero. The result is rounded towards zero.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting when dividing by zero.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    /**
     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on
     * overflow (when the result is negative).
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {trySub}.
     *
     * Counterpart to Solidity's `-` operator.
     *
     * Requirements:
     *
     * - Subtraction cannot overflow.
     */
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    /**
     * @dev Returns the integer division of two unsigned integers, reverting with custom message on
     * division by zero. The result is rounded towards zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryDiv}.
     *
     * Counterpart to Solidity's `/` operator. Note: this function uses a
     * `revert` opcode (which leaves remaining gas untouched) while Solidity
     * uses an invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    /**
     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
     * reverting with custom message when dividing by zero.
     *
     * CAUTION: This function is deprecated because it requires allocating memory for the error
     * message unnecessarily. For custom revert reasons use {tryMod}.
     *
     * Counterpart to Solidity's `%` operator. This function uses a `revert`
     * opcode (which leaves remaining gas untouched) while Solidity uses an
     * invalid opcode to revert (consuming all remaining gas).
     *
     * Requirements:
     *
     * - The divisor cannot be zero.
     */
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol

// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)


// File: @openzeppelin/contracts/token/ERC20/IERC20.sol

// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)


/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

abstract contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor(
        string memory name_,
        string memory symbol_,
        uint8 decimals_
    ) {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }
}





// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


interface IPancakeRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,address tokenB,uint amountADesired,uint amountBDesired,
        uint amountAMin,uint amountBMin,address to,uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,uint amountTokenDesired,uint amountTokenMin,
        uint amountETHMin,address to,uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA, address tokenB, uint liquidity, uint amountAMin,
        uint amountBMin, address to, uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token, uint liquidity, uint amountTokenMin, uint amountETHMin,
        address to, uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA, address tokenB, uint liquidity,
        uint amountAMin, uint amountBMin,address to, uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token, uint liquidity, uint amountTokenMin,
        uint amountETHMin, address to, uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external payable returns (uint[] memory amounts);

    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external returns (uint[] memory amounts);

    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external returns (uint[] memory amounts);

    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external payable returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);

    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);

    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);

    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token, uint liquidity,uint amountTokenMin,
        uint amountETHMin,address to,uint deadline
    ) external returns (uint amountETH);

    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,uint liquidity,uint amountTokenMin,
        uint amountETHMin,address to,uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,uint amountOutMin,
        address[] calldata path,address to,uint deadline
    ) external;

    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,address[] calldata path,address to,uint deadline
    ) external payable;

    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,uint amountOutMin,address[] calldata path,
        address to,uint deadline
    ) external;
}

interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

interface IRewardsPool{
    function sync(uint256 rewards) external;
}

interface IRelation {
    function viewParentWallet() external  view returns (address);
    function viewDividendWallet() external view returns(address[] memory);
    function parentOf(address account) external  view returns (address);
    function parentLayers(address account, uint8 layer) external view returns (address[] memory);
    function bind(address inviter, address child) external;

}

contract OpenProtocol is Ownable, ERC20Detailed {
    using SafeMath for uint256;


    uint256 private _totalSupply;
    mapping(address => uint256) private _rOwned;
    mapping(address => mapping(address => uint256)) private _allowances;

    uint8 private constant DECIMALS = 18;
    uint256 private constant MAX = ~uint256(0);
    uint256 private _tTotal;
    uint256 private _rTotal;
    uint256 private _rRate;
    uint256 public maxSupply;
    mapping(address => bool) private _noIssue;
    mapping(address => uint256) private _nOwned;

    IPancakeRouter02 public uniswapV2Router;
    address public uniswapV2Pair;
  
    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;
    address public USDT;
    
    address public relation;
    address public rewardsPoolWallet = 0x2bfd3d51d3D66e1aC0Bbe23dC519475BF4404752;
    address public luckLotteryWallet = 0x6590A7a42b00F33A314B265DD814B077c09f3Bd2;
    address public ecologyWallet = 0x912723C48731C85Be8d7EE5E574b7A38dE0cdD6C;
    address public operationWallet = 0x64d89845FC03aeE2CeaC2Af6bed76F0984B50CAd;
    address public idoWallet = 0x0c056dAc2BCdEc2b3259cd8CA553D5C8d2E4E5fB;
    
    uint256[] public dividendRates = [20, 10, 10, 10, 10];
    uint256 public liquidityFee = 20;
    
    uint256 public rewardsPoolFee = 30;
    uint256 public luckLotteryFee = 15;
    uint256 public destroyFee = 15;
    uint256 public ecologyFee = 20;

    uint256 public rebaseRate;
    uint256 public rebaseIntervalMinutes;
    uint256 public lastRebasedTime;
    bool private _autoRebase;
    bool public contractEnabled = true;
    uint256 public launchedAt;

    bool public swapAndLiquidityEnabled = true;
    uint256 public numTokenSellToLiquidity = 100000 * 10**DECIMALS;
    
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) public _blacklist;
    mapping(address => bool) private _supportContract;

    event Swap(uint256 tokensSwapped);
    event Rebase(uint256 currentTime, uint256 epoch, uint256 rebaseRate);

    constructor() ERC20Detailed("Open Protocol Token", "OPP", DECIMALS) {
        relation = 0xBa7a8d764fE50f01fb4392e8a796C640F90a15eC;
        USDT = 0x55d398326f99059fF775485246999027B3197955;

        maxSupply = 1_000_000_000 *  10 ** DECIMALS;
        _tTotal = 222_081_500 * 10 ** DECIMALS;
        _rTotal = (MAX - (MAX % _tTotal));
        _nOwned[_msgSender()] = _tTotal;

        uniswapV2Router = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(USDT, address(this));

        _noIssue[uniswapV2Pair] = true;
        _noIssue[rewardsPoolWallet] = true;
        _noIssue[luckLotteryWallet] = true;
        _noIssue[idoWallet] = true;
        _noIssue[address(this)] = true;
        _noIssue[address(uniswapV2Router)] = true;
        _noIssue[owner()] = true;
        _noIssue[DEAD] = true;

        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[luckLotteryWallet] = true;
        _isExcludedFromFee[rewardsPoolWallet] = true;
        _isExcludedFromFee[idoWallet] = true;
        _isExcludedFromFee[0xdF1d24b46f683606C7769A274c1525d0a96CFc7a] = true;

        _supportContract[uniswapV2Pair] = true;
        _supportContract[address(this)] = true;
        _supportContract[address(uniswapV2Router)] = true;
        _supportContract[rewardsPoolWallet] = true;
        _supportContract[luckLotteryWallet] = true;
        _supportContract[idoWallet] = true;


        _autoRebase = false;
        rebaseRate = 23437;
        rebaseIntervalMinutes = 15;

        _approve(address(this), address(uniswapV2Router), 2 ** 256 - 1);

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    receive() external payable { }

    function totalSupply() external view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _noIssue[account] ? _nOwned[account] : tokenFromReflection(_rOwned[account]);
    }

    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {
        require(rAmount <= _rTotal,"Amount must be less than total reflections");
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function autoRebase() public view returns (bool) {
        return _autoRebase;
    }

    function shouldRebase() internal view returns (bool) {
        return _autoRebase && _tTotal < MAX &&  _msgSender() != uniswapV2Pair  &&
        block.timestamp >= (lastRebasedTime + rebaseIntervalMinutes * 60);
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

   
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }


    function _approve(address owner,address spender,uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function executeRebase() external {
        require(shouldRebase(),"executeRebase: condition not met");
        rebase();
    }

    function nextRebaseTotal() public view returns (uint256) {
        return _tTotal * (10 ** 8 + rebaseRate) / 10 ** 8;
    }

    function rebase() internal {
        uint256 deltaTime = block.timestamp - lastRebasedTime;
        uint256 epoch = deltaTime.div(rebaseIntervalMinutes * 60);
        uint256 rebaseTotal = _tTotal;
        for (uint256 i = 0; i < epoch;) {
            rebaseTotal = rebaseTotal * (10 ** 8 + rebaseRate) / 10 ** 8;
            unchecked {
                i++;
            }
        }
        if(rebaseTotal <= maxSupply){
            _tTotal = rebaseTotal;
        }
        lastRebasedTime = lastRebasedTime.add(epoch.mul(rebaseIntervalMinutes * 60));

        emit Rebase(block.timestamp, epoch, rebaseTotal);
    }

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _transfer(address sender, address recipient, uint256 amount) internal  {
        require(amount > 0, "ERC20: transfer amount must be positive");
        require(!_blacklist[sender] && !_blacklist[recipient], "transfer: fail");

        if(contractEnabled && isContract(msg.sender)){
            require(_supportContract[msg.sender], "transfer: not support");
        }
            
        if(contractEnabled && isContract(recipient)){
            require(_supportContract[recipient], "transfer: not support");
        }

        if (launchedAt == 0 && sender == uniswapV2Pair) {
            launchedAt = block.number;
        }

        if (block.number < launchedAt + 3 && !_isExcludedFromFee[recipient]) {
            _blacklist[recipient] = true;
        }

        if(shouldRebase()){
            rebase();
        }
        swap(sender, recipient);

        if(!isContract(sender) && !isContract(recipient) && 
            IRelation(relation).parentOf(recipient) == address(0)){
            IRelation(relation).bind(sender, recipient);
        }

        uint256 currentRate = _getRate();
        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
            _basicTransfer(sender, recipient, amount, currentRate); 
            return;
        }

        uint256 totalFeeAmount;
        if(recipient == uniswapV2Pair) {
            uint256 poolAmount;
            uint256 lotteryAmount;
            uint256 ecologyAmount;
            (totalFeeAmount, poolAmount, lotteryAmount, ecologyAmount) = _getSellTValues(amount);
            _basicTransfer(sender, rewardsPoolWallet, poolAmount, currentRate);
            //sync rewards  
            IRewardsPool(rewardsPoolWallet).sync(poolAmount);
           
            _basicTransfer(sender, luckLotteryWallet, lotteryAmount, currentRate);
            _basicTransfer(sender, ecologyWallet, ecologyAmount, currentRate);

            uint256 destroyAmount = calculateTaxFee(amount, destroyFee);
            _basicTransfer(sender, DEAD, destroyAmount, currentRate);
            totalFeeAmount = totalFeeAmount.add(destroyAmount);
                
        }else if (sender == uniswapV2Pair){
            uint256 liquidityFeeAmount = calculateTaxFee(amount, liquidityFee);
            _basicTransfer(sender, address(this), liquidityFeeAmount, currentRate);
            
            if(IRelation(relation).parentOf(recipient) == address(0)){
                uint256 burnRate;
                for(uint8 i = 0; i < dividendRates.length;){
                    burnRate = burnRate.add(dividendRates[i]);
                    unchecked{
                        i++;
                    }
                }

                totalFeeAmount = calculateTaxFee(amount, burnRate);
                _basicTransfer(sender, DEAD, totalFeeAmount, currentRate);

            }else{
                totalFeeAmount = _distribute(sender, recipient, amount, currentRate);
            }
            
            totalFeeAmount = totalFeeAmount.add(liquidityFeeAmount);
        }

        _basicTransfer(sender, recipient, amount.sub(totalFeeAmount), currentRate);
    }   

    function _distribute(address sender, address recipient, uint256 amount, uint256 currentRate) private returns (uint256){
        address[] memory parentLayers = IRelation(relation).parentLayers(recipient, uint8(dividendRates.length));
        address[] memory dividendWallets = IRelation(relation).viewDividendWallet();
        address parent = IRelation(relation).viewParentWallet();
       
        uint256 feeAmount;
        bool isParent = false;
        for(uint8 i = 0; i < dividendRates.length;){
            address layerAddress = parentLayers[i];
            if(!isParent && layerAddress == parent){
                isParent = true;
            }

            layerAddress = isParent ? layerAddress == address(0) ? DEAD : layerAddress : 
                            layerAddress == address(0) ? dividendWallets[i] : layerAddress;

            uint256 transferAmount = calculateTaxFee(amount, dividendRates[i]);
            _basicTransfer(sender, layerAddress, transferAmount, currentRate);
            feeAmount = feeAmount.add(transferAmount);

            unchecked {
                i++;
            }
        }

        return feeAmount;
    }

    function swap(address from, address to) private {
        uint256 contractTokenBalance =  balanceOf(address(this));
        bool shouldSell = contractTokenBalance >= numTokenSellToLiquidity;

        if (
            swapAndLiquidityEnabled && shouldSell && from != uniswapV2Pair && 
            !(from == address(this) && to == address(uniswapV2Pair))
        ){
            // swap tokens for usdt
            swapTokenForUSDT(numTokenSellToLiquidity); 

            emit Swap(numTokenSellToLiquidity);
        }

    }

    function swapTokenForUSDT(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> usdt
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = USDT;

        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of token
            path,
            operationWallet,
            block.timestamp
        );
    }


    function _basicTransfer(address sender, address recipient, uint256 amount, uint256 currentRate) internal {
        uint256 rAmount = amount.mul(currentRate);
        if(_noIssue[sender]){
            _nOwned[sender] = _nOwned[sender].sub(amount);
        }else{
            _rOwned[sender] = _rOwned[sender].sub(rAmount);
        }

        if(_noIssue[recipient]){
            _nOwned[recipient] = _nOwned[recipient].add(amount);
        }else{
            _rOwned[recipient] = _rOwned[recipient].add(rAmount);
        }

        emit Transfer(sender, recipient, amount);
    }

    function _getSellTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {
        uint256 tRewardsPool = calculateTaxFee(tAmount, rewardsPoolFee);
        uint256 tLuckLottery = calculateTaxFee(tAmount, luckLotteryFee);
        uint256 tEcology = calculateTaxFee(tAmount, ecologyFee);
        uint256 tFee = tRewardsPool.add(tLuckLottery).add(tEcology);
        
        return (tFee, tRewardsPool, tLuckLottery, tEcology);
    }

    function calculateTaxFee(uint256 amount, uint256 taxFee) private pure returns (uint256) {
        return amount.mul(taxFee).div(1000);
    }

    function excludeFromFee(address[] memory  users, bool flag) external onlyOwner {
        for(uint256 i = 0; i < users.length; i++){
            _isExcludedFromFee[users[i]] = flag;
        }
    }

    function setNoIssue(address[] memory users, bool flag) external onlyOwner {
        for(uint256 i = 0; i < users.length; i++){
            _noIssue[users[i]] = flag;
        }
    }

    function setBlacklist(address[] memory users, bool flag) external onlyOwner {
        for(uint256 i = 0; i < users.length; i++){
            _blacklist[users[i]] = flag;
        }
    }


    function setSupportContract(address[] memory addrs, bool flag) external onlyOwner {
        for(uint256 i = 0; i < addrs.length; i++){
           _supportContract[addrs[i]] =  flag;
        }
      
    }

    function setDividendConfig(uint256[] memory rates) external onlyOwner {
        dividendRates = rates;
    }

    function setNumTokenSellToLiquidity(uint256 amount) external onlyOwner {
        require(amount > 0, "liquidity: wrong amount");
        numTokenSellToLiquidity = amount;
    }

    function setSwapAndLiquidity(bool enabled) external onlyOwner {
        swapAndLiquidityEnabled = enabled;
    }

    function setContractEnabled(bool enabled) external onlyOwner {
        contractEnabled = enabled;
    }

    function setRebaseEnabled(bool enabled) external onlyOwner {
        if (enabled) {
            lastRebasedTime = block.timestamp;
        }
        _autoRebase = enabled;
    }

    function setRebaseInterval(uint256 time) external onlyOwner {
        require(time > 0, "rebase: wrong time");
        rebaseIntervalMinutes = time;
    }

    function setRebaseRate(uint256 rate) external onlyOwner {
        require(rate > 0, "rebase: wrong rate");
        rebaseRate = rate;
    }

    function setRelation(address newRelation) external onlyOwner {
        require(newRelation != address(0), "wrong relation");
        relation = newRelation;
    }

    function setOperatorWallet(address operator) external onlyOwner {
        require(operator != address(0), "wrong operator");
        operationWallet = operator;
    }

    function setRewardsPool(address pool) external onlyOwner {
        require(pool != address(0), "wrong rewards pool");
        rewardsPoolWallet = pool;
        _noIssue[rewardsPoolWallet] = true;
        _supportContract[rewardsPoolWallet] = true;
        _isExcludedFromFee[rewardsPoolWallet] = true;
    }

     function setLucktLottery(address lottery) external onlyOwner {
        require(lottery != address(0), "wrong lottery address");
        luckLotteryWallet = lottery;
        _noIssue[luckLotteryWallet] = true;
        _supportContract[luckLotteryWallet] = true;
        _isExcludedFromFee[luckLotteryWallet] = true;
    }

    function syncRewardsPool(uint256 amount) external onlyOwner {
        _basicTransfer(address(this), rewardsPoolWallet, amount, 1);
        IRewardsPool(rewardsPoolWallet).sync(amount);
    }

    function isContract(address _addr) internal view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(_addr)
        }
        return size > 0;
    }
}