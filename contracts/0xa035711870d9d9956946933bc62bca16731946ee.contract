{"BHCTOKEN.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./IBHCDAO.sol\";\nimport \"./IBHCShareDiv.sol\";\nimport \"./IBHCLpDiv.sol\";\nimport \"./ISwapRouter.sol\";\nimport \"./ISwapFactory.sol\";\nimport \"./Ownable.sol\";\nimport \"./SafeMath.sol\";\nimport \"./IERC20.sol\";\n\ncontract BHCTOKEN is Ownable {\n    using SafeMath for uint256;\n\n    string private _name;\n    string private _symbol;\n    uint256 private _totalSupply;\n    mapping(address =\u003e uint256) private _balances;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n    bool private _isBlackOpen = true;\n    mapping(address =\u003e bool) private _isExcludedFromFee;\n    mapping(address =\u003e bool) private _blacklist;\n\n    address public daoAddress;\n\n    address public swapPair;\n    address public shareAddress;\n    uint256 public shareBuyFee = 100;\n    uint256 public shareSellFee = 200;\n    address public lpDivAddress;\n    uint256 public lpDivBuyFee = 100;\n    uint256 public lpDivSellFee = 100;\n    address public marketAddress;\n    uint256 public marketFee = 100;\n    uint256 public buyBurnFee = 0;\n    address public upShareAddress;\n    uint256[] public upShareFees = [50, 20, 20, 20, 10, 10, 10, 10];\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    event ProcessedLpDividendTracker(\n        uint256 iterations,\n        uint256 claims,\n        uint256 lastProcessedIndex,\n        bool indexed automatic,\n        address indexed processor\n    );\n\n    constructor(\n        address _router,\n        address _usdt,\n        address _dao,\n        address _share,\n        address _lpDiv,\n        address _market,\n        address _upShare\n    ) {\n        _name = \"BHC\";\n        _symbol = \"BHC\";\n\n        address swapFactory = ISwapRouter(_router).factory();\n        swapPair = ISwapFactory(swapFactory).createPair(address(this), _usdt);\n\n        daoAddress = _dao;\n        shareAddress = _share;\n        lpDivAddress = _lpDiv;\n        marketAddress = _market;\n        upShareAddress = _upShare;\n\n        address sender = _msgSender();\n        _totalSupply = 10000000 * 10**9;\n        _balances[sender] = _totalSupply;\n        emit Transfer(address(0), sender, _totalSupply);\n\n        _isExcludedFromFee[sender] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[address(0xdead)] = true;\n        _isExcludedFromFee[shareAddress] = true;\n        _isExcludedFromFee[lpDivAddress] = true;\n        _isExcludedFromFee[marketAddress] = true;\n        _isExcludedFromFee[upShareAddress] = true;\n    }\n\n    receive() external payable {}\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 9;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function isBlack(address account) public view returns (bool) {\n        return _blacklist[account];\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        returns (bool)\n    {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        returns (bool)\n    {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(\n            currentAllowance \u003e= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n        return true;\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance \u003e= amount,\n                \"ERC20: insufficient allowance\"\n            );\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function setShare(\n        address share,\n        uint256 buyFee,\n        uint256 sellFee\n    ) public onlyOwner {\n        shareAddress = share;\n        shareBuyFee = buyFee;\n        shareSellFee = sellFee;\n    }\n\n    function setLpDiv(\n        address lpdiv,\n        uint256 buyFee,\n        uint256 sellFee\n    ) public onlyOwner {\n        lpDivAddress = lpdiv;\n        lpDivBuyFee = buyFee;\n        lpDivSellFee = sellFee;\n    }\n\n    function setMarket(address market, uint256 fee) public onlyOwner {\n        marketAddress = market;\n        marketFee = fee;\n    }\n\n    function setBuyBurnFee(uint256 fee) public onlyOwner {\n        buyBurnFee = fee;\n    }\n\n    function setUpShare(address upShare, uint256[] memory fees)\n        public\n        onlyOwner\n    {\n        upShareAddress = upShare;\n        upShareFees = fees;\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function setBlacklist(address _address, bool _flag) external onlyOwner {\n        _blacklist[_address] = _flag;\n    }\n\n    function setIsBlackOpen(bool _open) external onlyOwner {\n        _isBlackOpen = _open;\n    }\n\n    function setClaim(\n        address payable to,\n        address token,\n        uint256 amount\n    ) external onlyOwner {\n        if (token == address(0)) {\n            (bool success, ) = to.call{value: amount}(\"\");\n            require(\n                success,\n                \"Error: unable to send value, to may have reverted\"\n            );\n        } else IERC20(token).transfer(to, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount \u003e 0, \"ERC20: Transfer amount must be greater than zero\");\n        uint256 fromBalance = _balances[from];\n        require(\n            fromBalance \u003e= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n            unchecked {\n                _balances[from] = fromBalance - amount;\n            }\n            _balances[to] += amount;\n            emit Transfer(from, to, amount);\n        } else {\n            require(\n                !_blacklist[from] \u0026\u0026 !_blacklist[to],\n                \"ERC20: the current user is in the blacklist and cannot be transferred\"\n            );\n            if (from == swapPair) {\n                if (_isBlackOpen) _blacklist[to] = true;\n                _tokenBuyWithFee(from, to, amount);\n            } else {\n                _tokenSellWithFee(from, to, amount);\n            }\n            try IBHCLpDiv(lpDivAddress).process() returns (\n                uint256 iterations,\n                uint256 claims,\n                uint256 lastProcessedIndex\n            ) {\n                emit ProcessedLpDividendTracker(\n                    iterations,\n                    claims,\n                    lastProcessedIndex,\n                    true,\n                    tx.origin\n                );\n            } catch {}\n        }\n    }\n\n    function _tokenBuyWithFee(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        // Share fee\n        uint256 shareAmount = amount.mul(shareBuyFee).div(10000);\n        if (shareAmount \u003e 0) {\n            _balances[shareAddress] = _balances[shareAddress].add(shareAmount);\n            IBHCShareDiv(shareAddress).distributeDividends(shareAmount);\n            emit Transfer(from, shareAddress, shareAmount);\n        }\n        // Lp Div fee\n        uint256 lpDivAmount = amount.mul(lpDivBuyFee).div(10000);\n        if (lpDivAmount \u003e 0) {\n            _balances[lpDivAddress] = _balances[lpDivAddress].add(lpDivAmount);\n            IBHCLpDiv(lpDivAddress).distributeDividends(lpDivAmount);\n            emit Transfer(from, lpDivAddress, lpDivAmount);\n        }\n        // Marketing fee\n        uint256 marketAmount = amount.mul(marketFee).div(10000);\n        if (marketAmount \u003e 0) {\n            _balances[marketAddress] = _balances[marketAddress].add(\n                marketAmount\n            );\n            emit Transfer(from, marketAddress, marketAmount);\n        }\n        // Burn fee\n        uint256 burnAmount = amount.mul(buyBurnFee).div(10000);\n        if (burnAmount \u003e 0) {\n            address burnAddress = address(0xdead);\n            _balances[burnAddress] = _balances[burnAddress].add(burnAmount);\n            emit Transfer(from, burnAddress, burnAmount);\n        }\n        // Ramain amount\n        _balances[from] = _balances[from].sub(amount);\n        uint256 toAmount = amount\n            .sub(shareAmount)\n            .sub(lpDivAmount)\n            .sub(marketAmount)\n            .sub(burnAmount);\n        _balances[to] = _balances[to].add(toAmount);\n        emit Transfer(from, to, toAmount);\n        // Up Levels share\n        IBHCDAO BHCDAO = IBHCDAO(daoAddress);\n        address parent = BHCDAO.getParent(to);\n        for (uint8 i = 0; i \u003c upShareFees.length; i++) {\n            if (parent == address(0)) break;\n            uint256 upShareAmount = amount.mul(upShareFees[i]).div(10000);\n            if (\n                upShareAmount \u003e 0 \u0026\u0026 _balances[upShareAddress] \u003e upShareAmount\n            ) {\n                _balances[upShareAddress] = _balances[upShareAddress].sub(\n                    upShareAmount\n                );\n                _balances[parent] = _balances[parent].add(upShareAmount);\n                emit Transfer(upShareAddress, parent, upShareAmount);\n                parent = BHCDAO.getParent(parent);\n            }\n        }\n    }\n\n    function _tokenSellWithFee(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        // Share fee\n        uint256 shareAmount = amount.mul(shareSellFee).div(10000);\n        if (shareAmount \u003e 0) {\n            _balances[shareAddress] = _balances[shareAddress].add(shareAmount);\n            IBHCShareDiv(shareAddress).distributeDividends(shareAmount);\n            emit Transfer(from, shareAddress, shareAmount);\n        }\n        // Lp Div fee\n        uint256 lpDivAmount = amount.mul(lpDivSellFee).div(10000);\n        if (lpDivAmount \u003e 0) {\n            _balances[lpDivAddress] = _balances[lpDivAddress].add(lpDivAmount);\n            IBHCLpDiv(lpDivAddress).distributeDividends(lpDivAmount);\n            emit Transfer(from, lpDivAddress, lpDivAmount);\n        }\n        // Ramain amount\n        _balances[from] = _balances[from].sub(amount);\n        // Set cannot be sold out\n        if (_balances[from] == 0) {\n            _balances[from] = amount.div(10000);\n            amount = amount.sub(_balances[from]);\n        }\n        uint256 toAmount = amount.sub(shareAmount).sub(lpDivAmount);\n        _balances[to] = _balances[to].add(toAmount);\n        emit Transfer(from, to, toAmount);\n    }\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"IBHCDAO.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ninterface IBHCDAO {\n    function getParent(address user) external view returns (address parent);\n\n    function getChildren(address user)\n        external\n        view\n        returns (address[] memory children);\n}\n"},"IBHCLpDiv.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ninterface IBHCLpDiv {\n    function distributeDividends(uint256 amount) external;\n\n    function process()\n        external\n        returns (\n            uint256,\n            uint256,\n            uint256\n        );\n}\n"},"IBHCShareDiv.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ninterface IBHCShareDiv {\n    function getTokensDividends(address user)\n        external\n        view\n        returns (\n            uint256 total,\n            uint256 withdrawn,\n            uint256 withdrawable\n        );\n\n    function addUser(address user, uint256 value) external;\n\n    function claim(address user) external;\n\n    function distributeDividends(uint256 amount) external;\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"ISwapFactory.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ninterface ISwapFactory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n"},"ISwapRouter.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\ninterface ISwapRouter {\n    function factory() external pure returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler\u0027s built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c \u003c a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b \u003e a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n            // benefit is lost if \u0027b\u0027 is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003c= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b \u003e 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"}}