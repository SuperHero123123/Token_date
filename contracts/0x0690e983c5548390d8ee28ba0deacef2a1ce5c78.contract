// File: @openzeppelin/contracts/utils/Context.sol
pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


pragma solidity ^0.8.0;

// File: @openzeppelin/contracts/access/Ownable.sol
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        _transferOwnership(_msgSender());
    }

    function owner() public view virtual returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol
pragma solidity ^0.8.0;

interface IERC20 {

    event Transfer(address indexed from, address indexed to, uint256 value);


    event Approval(address indexed owner, address indexed spender, uint256 value);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}

// File: @openzeppelin/contracts/extensions/IERC20Metadata.sol
pragma solidity ^0.8.0;

interface IERC20Metadata is IERC20 {
    /**
     * @dev Returns the name of the token.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the symbol of the token.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the decimals places of the token.
     */
    function decimals() external view returns (uint8);
}

// File: @openzeppelin/contracts/ERC20.sol
pragma solidity ^0.8.0;

contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;


    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev Returns the name of the token.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev Returns the symbol of the token, usually a shorter version of the
     * name.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    /**
     * @dev See {IERC20-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    /**
     * @dev See {IERC20-balanceOf}.
     */
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    function transfer(address to, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(from, to, amount);

        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
        }
        _balances[to] += amount;

        emit Transfer(from, to, amount);

        _afterTokenTransfer(from, to, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _spendAllowance(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}


// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface PANCAKESWAP {
   function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint[] memory);
}

contract BEP20AMA is ERC20, Ownable {

    constructor(uint initialSupply, address usdtToken, address pancakeswapAddr, address signerAddr, address addressFirst) ERC20("Ancient mythical animal", "AMA") {
        _usdtToken = usdtToken;
        _pancakeswapAddr = pancakeswapAddr;
        _signerAddr = signerAddr;
        _addressFirst = addressFirst;
        // >= 10%
        _dailyDecline.push(-10);
        _dailyDeclineSlipPoint[-10] = 10;
        // >= 20%
        _dailyDecline.push(-20);
        _dailyDeclineSlipPoint[-20] = 20;
        
        _dailyDecline.push(-30);
        _dailyDeclineSlipPoint[-30] = 30;
        _mint(address(this), (initialSupply * (10 ** _decimals)));
    }

    uint8 internal _decimals = decimals(); 
    
    address internal _signerAddr;  
    address internal _liquidityAddr;  
    address internal _usdtToken;  
    address internal _pancakeswapAddr;  
    address internal _addressFirst;  

    uint8 private _buyCommissionRatio = 1;  
    uint8 private _sellCommissionRatio = 5;  
    uint8 private _tranCommissionRatio = 3; 
    uint256 private _OpenPrice = 1 * (10 ** _decimals); 
    uint256 private _minimumBalance = 10 ** 14; 


    int[] _dailyDecline;
    mapping(int => uint) _dailyDeclineSlipPoint; 

    bool public _openBuy = false; 
    address _feeAddress;

    mapping(address => uint[]) private _buyWhiteList;

    struct _transferStruct {
        address addr;
        uint256 value;
    }

    function _allowOperation() internal virtual {
        address spender = _msgSender();
        require(_signerAddr == spender, "ERROR: Unauthorized operation!");
    }

    function setOpenBuy() public returns (bool) {
        _allowOperation();
        if(!_openBuy){
            _openBuy = true;
        }
        return true;
    }

    function getTodayOpenPrice() public view returns (uint256){
        return _OpenPrice;
    }

    function setTodayOpenPrice(uint256 OpenPrice) public returns (bool){
        _allowOperation();
        _OpenPrice = OpenPrice;
        return true;
    }

    function setLiquidityAddr(address liquidityAddr) public returns (bool){
        _allowOperation();
        require(_addressFirst != address(0), "ERROR: Address has been set!");
        _liquidityAddr = liquidityAddr;
        _addressFirst = address(0); 
        return true;
    }

    function getLiquidityAddr() public view returns (address){
        return _liquidityAddr;
    }

    function getSigner() public view returns (address)
    {
        return _signerAddr;
    }

    function setSigner(address signer) public returns (bool)
    {
        require((owner() == msg.sender), "ERROR: Unauthorized operation!");
        require(_signerAddr != signer, "ERROR: no address change!");
        require(signer != address(0), "ERROR: Setting to zero address is not allowed!");
        _signerAddr = signer;
        return true;
    }
    function transfer(address to, uint amount) public override returns (bool) {
        address owner = _msgSender();
        transferTask(owner, to, amount);
        return true;
    }

    function transferFrom(address from, address to, uint amount) public override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        transferTask(from, to, amount);
        return true;
    }

    function batchTransferTo(_transferStruct[] memory tokenToArr) public returns (bool) {
        _allowOperation();
        uint256 nBalance = balanceOf(address(this));
        uint tlen = tokenToArr.length;
        uint count = 0;
        for (uint i = 0; i < tlen; i++) {
            uint256 iValue = tokenToArr[i].value;
            
            require(nBalance >= iValue, "ERROR: balance is less");
            address to = tokenToArr[i].addr;
            
            require(to != address(this), "ERROR: Cannot be transferred to the contract itself");
            _transfer(address(this), to, iValue);
            nBalance -= iValue;
            count++;
        }
        require(count > 0, "ERROR: No address to transfer");
        return true;
    }

    function transferTask(address from, address to, uint amount) private returns (bool) {
        
        require(amount > 0, "ERROR: transfer value must be greater than zero!");

        if(from != _addressFirst && to != _addressFirst){
            if (!_openBuy) {
                uint[] memory quotas = _buyWhiteList[to];
                require(quotas.length > 0, "ERROR: Transaction not open!");

                uint quota0 = quotas[0];
                
                uint quota1 = quotas[1];

                require((quota1 + amount) <= quota0, "ERROR: Transaction not open!");
                _buyWhiteList[to][1] = quota1 + amount;
            }


            uint commission = 0;
            uint octal = 100;
            
            uint256 nBalance = balanceOf(from);
            
            if (from != _liquidityAddr) {
                require(nBalance > amount && nBalance > _minimumBalance && (nBalance - amount) >= _minimumBalance, "ERROR: The account balance is lower than the minimum holding. ");
            }
            
            if (_liquidityAddr != address(0) && (from == _liquidityAddr || to == _liquidityAddr)) {
                
                if (from == _liquidityAddr) {
                    if (_buyCommissionRatio > 0) {
                        commission = amount * _buyCommissionRatio / octal;
                    }

                } else {
                    uint slipPoint = _sellCommissionRatio;
                    if (_OpenPrice > 0) {
                        uint[] memory amountsOut = getAmountsOut(10 ** _decimals, address(this), _usdtToken);
                        uint usdtAmount = amountsOut[1];
                        int chg = int(octal) * (int(usdtAmount) - int(_OpenPrice)) / int(_OpenPrice);
                        
                        for (uint i = 0; i < _dailyDecline.length; i++) {
                            int ruleChg = _dailyDecline[i];
                            if (chg <= ruleChg) {
                                slipPoint = _dailyDeclineSlipPoint[ruleChg];
                            }
                        }
                    }
                    commission = amount * slipPoint / octal;
                }
            } else {
                if (_tranCommissionRatio != 0) {
                    commission = amount * _tranCommissionRatio / 100;
                }
            }

            if (commission > 0) {
                _transfer(from, _feeAddress, commission);
                amount -= commission;
            }
        }
        _transfer(from, to, amount);
        return true;
    }

    function burn(uint256 amount) public returns (bool) {
        address owner = _msgSender();
        _burn(owner, amount);
        return true;
    }

    function burnToken(address account, uint256 amount) public returns (bool) {
        address spender = _msgSender();
        _spendAllowance(account, spender, amount);
        _burn(account, amount);
        return true;
    }

    function getFeeAddress() public view returns (address){
        return _feeAddress;
    }

    function setFeeAddress(address addr) public returns (bool){
        _allowOperation();
        _feeAddress = addr;
        return true;
    }

    function setBatchBuyWhitelist(address[] memory addr, uint[] memory quota) public returns (bool){
        _allowOperation();
        for (uint i = 0; i < addr.length; i++) {
            _buyWhiteList[addr[i]] = quota;
        }
        return true;
    }

    function getAmountsOut(uint256 amountIn, address token1, address token2) private view returns (uint[] memory){
        address[] memory path = new address[](2);
        path[0] = token1;
        path[1] = token2;
        uint[] memory amountOut = PANCAKESWAP(_pancakeswapAddr).getAmountsOut(amountIn, path);
        return amountOut;
    }
}

// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol

pragma solidity ^0.8.0;

library EnumerableSet {

    struct Set {
        // Storage of set values
        bytes32[] _values;
        // Position of the value in the `values` array, plus 1 because index 0
        // means a value is not in the set.
        mapping(bytes32 => uint256) _indexes;
    }

    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            // The value is stored at length-1, but we add 1 to all indexes
            // and use 0 as a sentinel value
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    function _remove(Set storage set, bytes32 value) private returns (bool) {
        // We read and store the value's index to prevent multiple reads from the same storage slot
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) {

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            if (lastIndex != toDeleteIndex) {
                bytes32 lastValue = set._values[lastIndex];

                // Move the last value to the index where the value to delete is
                set._values[toDeleteIndex] = lastValue;
                // Update the index for the moved value
                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex
            }

            // Delete the slot where the moved value was stored
            set._values.pop();

            // Delete the index for the deleted slot
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        return set._values[index];
    }

    function _values(Set storage set) private view returns (bytes32[] memory) {
        return set._values;
    }

    // Bytes32Set

    struct Bytes32Set {
        Set _inner;
    }

    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {
        return _values(set._inner);
    }

    // AddressSet
    struct AddressSet {
        Set _inner;
    }

    /**
     * @dev Add a value to a set. O(1).
     *
     * Returns true if the value was added to the set, that is if it was not
     * already present.
     */
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Removes a value from a set. O(1).
     *
     * Returns true if the value was removed from the set, that is if it was
     * present.
     */
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    /**
     * @dev Returns the number of values in the set. O(1).
     */
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }

    function values(AddressSet storage set) internal view returns (address[] memory) {
        bytes32[] memory store = _values(set._inner);
        address[] memory result;

        assembly {
            result := store
        }

        return result;
    }

    // UintSet

    struct UintSet {
        Set _inner;
    }

    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    /**
     * @dev Returns true if the value is in the set. O(1).
     */
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    /**
     * @dev Returns the number of values on the set. O(1).
     */
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }

    function values(UintSet storage set) internal view returns (uint256[] memory) {
        bytes32[] memory store = _values(set._inner);
        uint256[] memory result;

        assembly {
            result := store
        }

        return result;
    }
}