{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/Cashier.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\npragma solidity ^0.8.17;\n\n/**\n * BEP20 standard interface.\n */\ninterface IBEP20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * Allows for contract ownership along with multi-address authorization\n */\nabstract contract Auth {\n    address internal owner;\n    mapping (address => bool) internal authorizations;\n\n    constructor(address _owner) {\n        owner = _owner;\n        authorizations[_owner] = true;\n    }\n\n    /**\n     * Function modifier to require caller to be contract owner\n     */\n    modifier onlyOwner() {\n        require(isOwner(msg.sender), \"!OWNER\"); _;\n    }\n\n    /**\n     * Function modifier to require caller to be authorized\n     */\n    modifier authorized() {\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\n    }\n\n    /**\n     * Authorize address. Owner only\n     */\n    function authorize(address adr) public onlyOwner {\n        authorizations[adr] = true;\n    }\n\n    /**\n     * Remove address' authorization. Owner only\n     */\n    function unauthorize(address adr) public onlyOwner {\n        authorizations[adr] = false;\n    }\n\n    /**\n     * Check if address is owner\n     */\n    function isOwner(address account) public view returns (bool) {\n        return account == owner;\n    }\n\n    /**\n     * Return address' authorization status\n     */\n    function isAuthorized(address adr) public view returns (bool) {\n        return authorizations[adr];\n    }\n\n    /**\n     * Transfer ownership to new address. Caller must be owner. Leaves old owner authorized\n     */\n    function transferOwnership(address payable adr) public onlyOwner {\n        owner = adr;\n        authorizations[adr] = true;\n        emit OwnershipTransferred(adr);\n    }\n\n    event OwnershipTransferred(address owner);\n}\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\n}\n\ninterface IDividendDistributor {\n    function setShare(address shareholder, uint256 amount) external;\n    function deposit() external payable;\n    function process(uint256 gas) external;\n    function getUnpaidEarnings(address shareHolder) external view returns(uint256);\n    function getClaimedDividends(address shareHolder) external view returns(uint256); \n    function claimDividend(address shareHolder, bool swapTo8Bit) external;\n    function setRewardToken(address newToken) external;\n    function getCurrentIndex() external view returns(uint256);\n    function getShareHolderIndex(address shareHolder) external view returns(uint256);\n    \n}\n\ncontract DividendDistributor is IDividendDistributor {\n    using SafeMath for uint256;\n\n    address public _token;\n    IERC20 public rewardToken;\n\n    struct Share {\n        uint256 amount;\n        uint256 totalExcluded;\n        uint256 totalRealised;\n    }\n    \n    IDEXRouter router;\n\n    address[] shareholders;\n    mapping (address => uint256) shareholderIndexes;\n    mapping (address => uint256) shareholderClaims;\n\n    mapping (address => Share) public shares;\n\n    uint256 public totalShares;\n    uint256 public totalDividends;\n    uint256 public totalDistributed;\n    uint256 public dividendsPerShare;\n    uint256 public dividendsPerShareAccuracyFactor = 10 ** 36;\n\n    uint256 currentIndex;\n\n    modifier onlyToken() {\n        require(msg.sender == _token); _;\n    }\n\n    constructor (address _rewardToken, address _router) {\n        router = _router != address(0)\n            ? IDEXRouter(_router)\n            : IDEXRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);\n        _token = msg.sender;\n        rewardToken = IERC20(_rewardToken);\n    }\n\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\n        if(shares[shareholder].amount > 0){\n            distributeDividend(shareholder, false);\n        }\n\n        if(amount > 0 && shares[shareholder].amount == 0){\n            addShareholder(shareholder);\n        }else if(amount == 0 && shares[shareholder].amount > 0){\n            removeShareholder(shareholder);\n        }\n\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\n        shares[shareholder].amount = amount;\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\n    }\n\n    function deposit() public payable {\n        if(msg.value == 0){\n            return;\n        }\n        address[] memory path = new address[](2);\n        path[0] = IDEXRouter(router).WETH();\n        path[1] = address(rewardToken);\n        uint256 beforeBalance = rewardToken.balanceOf(address(this));\n        IDEXRouter(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value : msg.value}(\n            0,\n            path,\n            address(this),\n            block.timestamp            \n        );\n        uint256 receivedTokens = rewardToken.balanceOf(address(this)) - beforeBalance;\n        totalDividends = totalDividends.add(receivedTokens);\n        dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(receivedTokens).div(totalShares));\n    }\n\n    function process(uint256 gas) external override onlyToken {\n        uint256 shareholderCount = shareholders.length;\n\n        if(shareholderCount == 0) { return; }\n\n        uint256 gasUsed = 0;\n        uint256 gasLeft = gasleft();\n\n        uint256 iterations = 0;\n        uint256 maxIteration = shareholderCount > 5 ? 5 : shareholderCount;\n        \n        while(gasUsed < gas && iterations < maxIteration) {\n            if(currentIndex >= shareholderCount){\n                currentIndex = 0;\n            }\n\n            distributeDividend(shareholders[currentIndex], false);\n\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\n            gasLeft = gasleft();\n            currentIndex++;\n            iterations++;\n        }\n    }\n\n    function distributeDividend(address shareholder, bool swapTo8Bit) internal {\n        if(shares[shareholder].amount == 0){ return; }\n\n        uint256 amount = getUnpaidEarnings(shareholder);\n        if(amount > 0){\n            totalDistributed = totalDistributed.add(amount);\n            if(swapTo8Bit){\n                uint256 eb = IERC20(_token).balanceOf(address(this));\n                SwapTo8Bit(amount);\n                uint256 received8Bit = IERC20(_token).balanceOf(address(this)) - eb;\n                IERC20(_token).transfer(shareholder, received8Bit);\n            }else{\n                rewardToken.transfer(shareholder, amount);\n            }\n            shareholderClaims[shareholder] = block.timestamp;\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised.add(amount);\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\n        }\n    }\n    \n    function claimDividend(address shareHolder, bool swapTo8Bit) external {\n        distributeDividend(shareHolder, swapTo8Bit);\n    }\n\n    function getClaimedDividends(address shareHolder) external view returns(uint256) {\n        return shares[shareHolder].totalRealised;\n    }\n\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\n        if(shares[shareholder].amount == 0){ return 0; }\n\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\n\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\n\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\n    }\n\n    function setRewardToken(address _newToken) public onlyToken{\n        rewardToken = IERC20(_newToken);\n    }\n\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\n    }\n\n    function addShareholder(address shareholder) internal {\n        shareholderIndexes[shareholder] = shareholders.length;\n        shareholders.push(shareholder);\n    }\n\n    function removeShareholder(address shareholder) internal {\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\n        shareholders.pop();\n    }\n    function getCurrentIndex() external view returns(uint256){\n        return currentIndex;\n    }\n\n    function getShareHolderIndex(address shareHolder) external view returns(uint256){\n        return shareholderIndexes[shareHolder];\n    }\n\n    function SwapTo8Bit(uint256 btcAmount) internal {\n        address[] memory path = new address[](2);\n        path[0] = address(rewardToken); \n        path[1] = IDEXRouter(router).WETH();\n        uint256 beforeBalance = address(this).balance; \n\n        rewardToken.approve(address(router), ~uint256(0));\n        IERC20(_token).approve(address(router), ~uint256(0));\n\n        IDEXRouter(router).swapExactTokensForETHSupportingFeeOnTransferTokens(\n           btcAmount,\n           0,\n           path,\n           address(this),\n           block.timestamp \n        );\n\n        uint256 receivedTokens = address(this).balance - beforeBalance;\n\n        if(receivedTokens > 0){\n            address[] memory path2 = new address[](2);\n            path2[0] = IDEXRouter(router).WETH();\n            path2[1] = _token;\n            IDEXRouter(router).swapExactETHForTokensSupportingFeeOnTransferTokens{value : receivedTokens}(\n                0,\n                path2,\n                address(this),\n                block.timestamp            \n            );\n        }\n    }\n    \n    receive() external payable{\n        if(msg.sender != address(router)){\n            deposit();\n        }\n    }\n}"
    },
    "contracts/EightBit.sol": {
      "content": "\n//SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./Cashier.sol\";\n\npragma solidity ^0.8.17;\n\ninterface DexFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface DexRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\n}\n\n\ncontract EightBit is ERC20, Ownable {\n    using Address for address;\n\n    struct Tax {\n        uint256 marketingTax;\n        uint256 devTax;\n        uint256 lpTax;\n        uint256 refTax;\n        uint256 buybackTax;\n    }\n    \n    // what % each one gets?\n    struct taxShares{\n        uint256 marketingShare;\n        uint256 devShare;\n        uint256 lpShare;\n        uint256 refShare;\n        uint256 buybackShare;\n    }\n\n    //pairToRouter returns the router address that belong to the pair address\n    mapping(address=>address) public pairToRouter;\n\n    //dexBuyTotalTaxes/dexSellTotalTaxes = total tax for each router, to reduce storage access, we store total tax in a mapping to only access it one time\n    //during calculations  \n    mapping(address=>uint256) public dexBuyTotalTaxes;\n    mapping(address=>uint256) public dexSellTotalTaxes;\n\n    //dexBuyTaxes/dexSellTaxes are different taxes for different routers\n    mapping(address=>Tax) public dexBuyTaxes;\n    mapping(address=>Tax) public dexSellTaxes; \n\n    //Transfer tax, since its not between pair and holders, we can not specify it to a router\n    Tax public transferTax;\n    uint256 public totalTransferTax = 5;\n\n    //dexAccumolatedTaxes = total taxes that got accumulated in buys/sells/transfers for each dex (router)   \n    mapping(address=>uint256) public dexAccumolatedTaxes;\n\n    /**\n     * tax share for each router, each router (Dex) accumolates its taxes seperately from otehr dexes, hence we also consider different tax distributions for\n     * each one\n     */\n    mapping(address=>taxShares) public dexTaxShares;\n    \n    uint256 private constant _totalSupply = 1e8 * 1e18;\n\n    /**\n     * defaultRouter : default router that is used in the contract (pancakeswap v1 is choosed because it has the most volume on the bsc)\n     * defaultPair : the default pancakeswap pair\n     * isPair : checkign whether an address is a pair or not\n     */\n    DexRouter public defaultRouter;\n    address public defaultPair;\n    mapping(address=>bool) public isPair;\n    \n    /**\n     * whitelisted => wallets are excluded from every limit\n     * pairBuyTaxExcludes => wallets are excluded from buy taxes for a specifiec pair\n     * pairSellTaxExcludes => wallets are excluded from sell taxes for a specifiec pair\n     * transferTaxExcluded => wallets are excluded from transfer taxes ( no specifiec pair )\n     * dividendExcluded => wallets are excluded from receiving rewards (BTC)\n     * maxWalletExcludes => wallets are exluced from max wallet\n     */\n    mapping(address=>bool) public whitelisted;\n    mapping(address=>mapping(address=>bool)) pairBuyTaxExcludes; \n    mapping(address=>mapping(address=>bool)) pairSellTaxExcludes; \n    mapping(address=>bool) public transferTaxExcludes; \n    mapping(address=>bool) public dividendExcludes;\n    mapping(address=>bool) public maxWalletExcludes;\n\n    //swapAndLiquifyEnabled => when set to true, auto liquidity works\n    bool public swapAndLiquifyEnabled = true;\n\n    //isSwapping => to lock the swapps when we are swapping taxes to ether\n    bool public isSwapping = false;\n\n    //max wallet, its set to 1% by default, and can not be less than 1%\n    uint256 public maxWallet = (_totalSupply * 1) / 100;\n\n    //trading status, its set to false by default, after enabling the trade can not be disabled\n    bool public tradingStatus = false;\n\n    //Wallets, taxes are sent to this wallets in ether shape using a low level call, we made sure that this wallets can not be a contract, so that they can not\n    //revert receiving ether in their receive function\n    address public MarketingWallet = 0x179a9CB9C80B0d05B131325090F00D8Ca5113679;\n    address public devWallet = 0x9AB074d242acA64544Ebbe9212F6e8BadB6dC366;\n    address public buyBackWallet = 0xb9309c0D8313eE46E9747309b6414390633666f3;\n\n    //dividend tracker that is responsible for BTC reflectins, ether is instantly swapped to BTC after reachign the contract either throught the deposit functino\n    //or receive()\n    DividendDistributor public cashier;\n\n    //processGas for dividend tracker to divide BTC reflections, this value can not be more than 750, 000\n    uint256 public processGas;\n\n    /**\n     * antiDump => set to off by default\n     * when antiDump is on, non-exlucded wallets are not able to sell/transfer more than antiDumpLimit, if they do, they can not sell/transfer for next \n     * (antiDumpCooldown) seconds\n     */\n    bool public antiDump;\n    uint256 public antiDumpLimit;\n    uint256 public antiDumpCoolDown;\n    mapping(address=>uint256) lastTradeTime;\n\n    constructor(address _rewardToken, address _router) ERC20(\"8BitEARN\", \"8Bit\") {\n        defaultRouter = DexRouter(_router);\n        defaultPair = DexFactory(defaultRouter.factory())\n            .createPair(address(this), defaultRouter.WETH());\n        pairToRouter[defaultPair] = _router;\n        isPair[defaultPair] = true;\n\n        cashier = new DividendDistributor(_rewardToken, _router);\n\n        whitelisted[msg.sender] = true;\n        whitelisted[_router] = true;\n        whitelisted[address(cashier)] = true;\n        whitelisted[address(this)] = true;\n        whitelisted[MarketingWallet] = true;\n        whitelisted[devWallet] = true;\n        whitelisted[buyBackWallet] = true;\n        whitelisted[address(0)] = true;\n\n        dividendExcludes[msg.sender] = true;\n        dividendExcludes[defaultPair] = true;\n        dividendExcludes[address(defaultRouter)] = true;\n        dividendExcludes[address(cashier)] = true;\n        dividendExcludes[address(0)] = true;\n        dividendExcludes[MarketingWallet] = true;\n        dividendExcludes[devWallet] = true;\n        dividendExcludes[buyBackWallet] = true;\n\n        dexBuyTaxes[address(defaultRouter)] = Tax(2, 2, 1, 4, 1);\n        dexSellTaxes[address(defaultRouter)] = Tax(2, 2, 1, 4, 1);\n        dexTaxShares[address(defaultRouter)] = taxShares(2, 2, 1, 4 ,1);\n        dexBuyTotalTaxes[address(defaultRouter)] = 10;\n        dexSellTotalTaxes[address(defaultRouter)] = 10;\n\n        _mint(msg.sender, _totalSupply);\n    }\n\n    /**\n     * functions used to set process gas \n     */\n    function setProcessGas(uint256 gas) external onlyOwner{\n        require(gas < 750000, \"can not set process gas more than 750000\");\n        processGas = gas;\n    }\n\n\n    //addPair is used to add a new pair for the token, pair should be added alongside its router\n    function addPair(address _pair, address _router) external onlyOwner{\n       require(isPair[_pair] == false, \"pair is already added\");\n       isPair[_pair] = true; \n       pairToRouter[_pair] = _router;\n       dividendExcludes[_pair] = true;\n       dividendExcludes[_router] = true;\n    }\n\n\n    //removePair is used to delete a pair from the token\n    function removePair(address _pair) external onlyOwner{\n        //transferring accumolated taxes to default router before deleting the pair\n        require(isPair[_pair], \"address is not a pair\");\n        address router = pairToRouter[_pair];\n        if(address(router) != address(defaultRouter)){\n            dexAccumolatedTaxes[address(defaultRouter)] += dexAccumolatedTaxes[router];\n            dexAccumolatedTaxes[router] = 0;\n        } \n        isPair[_pair] = false;\n        pairToRouter[_pair] = address(0);\n    }\n\n\n    //used to set a default pair for our token, default pair is set to pancakeswap v2 by default \n    function setDefaultPair(address _pair, address _router) external onlyOwner{\n        require(isPair[_pair], \"address is not a pair, add it to pairs using addPair function\");\n\n        //transferring accumolated taxes to new router\n        uint256 accTaxes = dexAccumolatedTaxes[address(defaultRouter)];\n        dexAccumolatedTaxes[address(defaultRouter)] = 0;\n        dexAccumolatedTaxes[_router] = accTaxes;\n\n        //setting default pair\n        defaultPair = _pair;\n        defaultRouter = DexRouter(_router);\n    }\n\n\n    //used to set sell taxes for each pair\n    function setPairSellTax(address _router, uint256 _refTax, uint256 _marTax, uint256 _devTax, uint256 _lpTax, uint256 _bbTax) external onlyOwner{\n        Tax memory tax = dexSellTaxes[_router];\n        tax.buybackTax = _bbTax;\n        tax.lpTax = _lpTax;\n        tax.devTax = _devTax;\n        tax.marketingTax = _marTax;\n        tax.refTax = _refTax;\n        require(_refTax + _marTax + _devTax + _lpTax + _bbTax <= 10, \"can not set taxes over 10%\");\n        dexSellTotalTaxes[_router] = _refTax + _marTax + _devTax + _lpTax + _bbTax;\n        dexSellTaxes[_router] = tax;\n    }\n    \n    //used to set buy taxes for each pair\n    function setPairBuyTaxes(address _router, uint256 _refTax, uint256 _marTax, uint256 _devTax, uint256 _lpTax, uint256 _bbTax) external onlyOwner{\n        Tax memory tax = dexBuyTaxes[_router];\n        tax.buybackTax = _bbTax;\n        tax.lpTax = _lpTax;\n        tax.devTax = _devTax;\n        tax.marketingTax = _marTax;\n        tax.refTax = _refTax;\n        require(_refTax + _marTax + _devTax + _lpTax + _bbTax <= 10, \"can not set taxes over 10%\");\n        dexBuyTotalTaxes[_router] = _refTax + _marTax + _devTax + _lpTax + _bbTax;\n        dexBuyTaxes[_router] = tax;\n    }\n\n    //used to set transfer taxes, transfer taxes are added to default router taxex\n    function setTransferTaxes(uint256 _refTax, uint256 _marTax, uint256 _devTax, uint256 _lpTax, uint256 _bbTax) external onlyOwner{\n        Tax memory tax = transferTax;\n        tax.buybackTax = _bbTax;\n        tax.lpTax = _lpTax;\n        tax.devTax = _devTax;\n        tax.marketingTax = _marTax;\n        tax.refTax = _refTax;\n        require(_refTax + _marTax + _devTax + _lpTax + _bbTax <= 10, \"can not set taxes over 10%\");\n        transferTax = tax; \n    }\n\n    //used to set tax distribution for each dex\n    function setTaxShares(address _router, uint256 _refShare, uint256 _marShare, uint256 _devShare, uint256 _lpShare, uint256 _bbShare) external onlyOwner{\n        uint256 shareSum = _refShare + _marShare + _devShare + _lpShare + _bbShare;\n        require(shareSum == 100, \"sum of taxes should be dividable by 100\");\n        dexTaxShares[_router].buybackShare = _bbShare;\n        dexTaxShares[_router].devShare = _devShare;\n        dexTaxShares[_router].marketingShare = _marShare;\n        dexTaxShares[_router].refShare = _refShare;\n        dexTaxShares[_router].lpShare = _lpShare;\n    }\n\n    //setting marketing wallet, but can not be a contract,\n    function setMarketingWallet(address _newMarketing) external onlyOwner {\n        require(_newMarketing.isContract() == false, \"Cant set marketing wallet to a contract\");\n        require(MarketingWallet != address(0), \"new marketing wallet can not be dead address!\");\n        MarketingWallet = _newMarketing;\n    }\n\n    //setting development wallet, but can not be a contract\n    function setDevelopmentWallet(address _devWallet) external onlyOwner{\n        require(_devWallet.isContract() == false, \"Cant set developement wallet to a contract\");\n        devWallet = _devWallet;\n    }\n\n    //setting buyback wallet, but can not be a contract\n    function setBuyBackWallet(address _buybackWallet) external onlyOwner{\n        require(_buybackWallet.isContract() == false, \"Cant set buyback wallet to a contract\");\n        buyBackWallet = _buybackWallet;\n    }\n\n    //setting max wallet, but can not be less than 0.5% of totalSupply\n    function setMaxWallet(uint256 tokensCount) external onlyOwner {\n        require(tokensCount * 1000 / totalSupply() >= 5, \"can not set max wallet less than 0.5 of total supply\");\n        maxWallet = tokensCount;\n    }\n    \n    //on and off autoliquidity\n    function toggleSwapping() external onlyOwner {\n        swapAndLiquifyEnabled = (swapAndLiquifyEnabled == true) ? false : true;\n    }\n\n    //whitelisting an address from every limit and tax\n    function setWhitelistedStatus(address _holder, bool _status) external onlyOwner{\n        whitelisted[_holder] = _status;\n    }\n\n    //whitelisting a wallet from sell taxes for a dex\n    function excludeFromSellTaxes(address _router, address _holder, bool _status) external onlyOwner{\n        pairSellTaxExcludes[_router][_holder] = _status;\n    }\n\n    //whitelisting a wallet from buy taxes for a dex\n    function excludeFromBuyTaxes(address _router, address _holder, bool _status) external onlyOwner{\n        pairBuyTaxExcludes[_router][_holder] = _status;\n    }\n\n    function excludeFromTransferTaxes(address _holder, bool _status) external onlyOwner{\n       transferTaxExcludes[_holder] = _status; \n    }\n\n    function excludeFromMaxWallet(address _holder, bool _status) external onlyOwner{\n        maxWalletExcludes[_holder] = _status;\n    }\n\n    function setExcludedFromDividend(address _holder, bool _status) external onlyOwner{\n        dividendExcludes[_holder] = _status;\n    }\n\n    function setAntiDumpStatus(bool status) external onlyOwner{\n        antiDump = status;\n    }\n    \n    function setAntiDumpLimit(uint256 newLimit) external onlyOwner{\n        require(newLimit >= 250000 * 1e18, \"can not set limit less than 250, 000 tokesn\");\n        antiDumpLimit = newLimit;\n    }\n\n    function setAntiDumpCooldown(uint256 coolDown) external onlyOwner{\n        require(coolDown <= 86400, \"can not set cooldown more than 24 hours\");\n        antiDumpCoolDown = coolDown;\n    }\n\n    //remaining addresses that are remaining untill _shareHodler receive its reflections in automatically manner\n    function getRemainingToAutoClaim(address _shareHolder) external view returns(uint256){\n        uint256 cindex = cashier.getCurrentIndex();\n        uint256 hindex = cashier.getShareHolderIndex(_shareHolder);\n        uint256 remaining = cindex > hindex ? cindex - hindex : hindex - cindex;\n        return remaining;\n    }\n\n    //used to claim rewards\n    function claimRewards(bool swapTo8Bit) public{\n        cashier.claimDividend(msg.sender, swapTo8Bit);        \n    }\n\n    //getting pending rewards\n    function getPendingRewards(address _holder) external view returns(uint256){\n        return cashier.getUnpaidEarnings(_holder);\n    }\n\n    //getting claimed rewards\n    function getClaimedRewards(address _holder) external view returns(uint256){\n        return cashier.getClaimedDividends(_holder);\n    }\n\n    //enable trading, can not disable trades again\n    function enableTrading() external onlyOwner{\n        require(tradingStatus == false, \"trading is already enabled\");\n        tradingStatus = true;\n    }\n\n\n    function _takeTax(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (whitelisted[_from] || whitelisted[_to]) {\n            return _amount;\n        }\n        require(tradingStatus, \"Trading is not enabled yet!\");\n        bool isBuy = false;\n        bool isSell = false;\n        uint256 totalTax = totalTransferTax;\n        address _router = address(defaultRouter);\n\n        if (isPair[_to] == true) {\n            _router = pairToRouter[_to];\n            totalTax = dexSellTotalTaxes[_router];             \n            if(pairSellTaxExcludes[_router][_from] == true) {\n                totalTax = 0;\n            }\n            isSell = true;\n        } else if (isPair[_from] == true) {\n            _router = pairToRouter[_from];\n            totalTax = dexBuyTotalTaxes[_router];\n            if(pairBuyTaxExcludes[_router][_to] == true) {\n                totalTax = 0;\n            }\n            isBuy = true;\n        }else{\n            if(transferTaxExcludes[_to] || transferTaxExcludes[_from]){\n                return _amount;\n            } \n        }\n        if(!isSell){ //max wallet\n           if(maxWalletExcludes[_to] == false) {\n            require(balanceOf(_to) + _amount <= maxWallet, \"can not hold more than max wallet\");\n           }   \n        }\n        if(!isBuy){\n            if(antiDump){\n                require(_amount < antiDumpLimit, \"Anti Dump Limit\");\n                require(block.timestamp - lastTradeTime[_from] >= antiDumpCoolDown, \"AntiDump Cooldown, please wait!\");\n            }\n            lastTradeTime[_from] = block.timestamp;\n        }\n        uint256 tax = (_amount * totalTax) / 100;\n        //taxes are added for each router seperatlty \n        if(_router != address(0)){\n            dexAccumolatedTaxes[_router] += tax;\n        } \n        if(tax > 0) {\n            super._transfer(_from, address(this), tax);\n        }\n        return (_amount - tax);\n    }\n\n\n    function _transfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal virtual override {\n        require(_from != address(0), \"transfer from address zero\");\n        require(_to != address(0), \"transfer to address zero\");\n        uint256 toTransfer = _takeTax(_from, _to, _amount);\n        if (\n            isPair[_to] &&\n            !whitelisted[_from] &&\n            !whitelisted[_to] &&\n            !isSwapping\n        ) {\n            isSwapping = true;\n            uint256 beforeBalane = balanceOf(address(this));\n            manageTaxes(pairToRouter[_to]);\n            isSwapping = false; \n            //used = amount of tokens that were used in manageTaxes function, we deduct this amount from dexAccumolatedTaxes\n            uint256 used = beforeBalane > balanceOf(address(this))? beforeBalane - balanceOf(address(this)) : 0 ;\n            dexAccumolatedTaxes[pairToRouter[_to]] -= used;\n        }\n        super._transfer(_from, _to, toTransfer);\n\n        if(_from != address(cashier)){\n\n            if(dividendExcludes[_from] == false) {\n                try cashier.setShare(_from, balanceOf(_from)){} catch{}\n            }\n\n            if(dividendExcludes[_to] == false) {\n                try cashier.setShare(_to, balanceOf(_to)){} catch  {}\n            }\n\n            try cashier.process(processGas) {} catch  {}\n        }\n    }\n\n\n    function manageTaxes(address _router) internal {\n        if(_router == address(0)) {\n            return;\n        }\n        uint256 taxAmount = dexAccumolatedTaxes[_router];\n        if(taxAmount > 0){\n            taxShares memory dexTaxShare = dexTaxShares[_router];\n            uint256 totalShares = 100;\n            uint256 lpTokens = (taxAmount * dexTaxShare.lpShare) / totalShares;\n\n            if(swapAndLiquifyEnabled && lpTokens > 0){\n                swapAndLiquify(_router, lpTokens);\n            } \n            totalShares -= dexTaxShare.lpShare;\n            taxAmount -= lpTokens;\n\n            if(taxAmount == 0 || totalShares == 0){\n                return;\n            }\n\n            uint256 beforeBalance = address(this).balance;\n            swapToETH(_router, taxAmount);\n            uint256 received = address(this).balance - beforeBalance;\n            \n            if(received == 0){\n                return;\n            }\n\n            //Marketing wallet\n            if(dexTaxShare.marketingShare > 0){\n                (bool success, ) = MarketingWallet.call{value : (received * dexTaxShare.marketingShare) / totalShares }(\"\"); \n            }\n\n            //dev wallet\n            if(dexTaxShare.devShare > 0){\n                (bool success, ) = devWallet.call{value : (received * dexTaxShare.devShare) / totalShares }(\"\"); \n            }\n\n            //buyBackWallet\n            if(dexTaxShare.buybackShare > 0) {\n                (bool success, ) = buyBackWallet.call{value : (received * dexTaxShare.buybackShare) / totalShares }(\"\"); \n            }\n\n            //reflections\n            if(dexTaxShare.refShare > 0) {\n                (bool success, ) = address(cashier).call{value : (received * dexTaxShare.refShare) / totalShares }(\"\"); \n            }\n        }\n    }\n\n\n    function swapAndLiquify(address _router, uint256 _amount) internal {\n        uint256 firstHalf = _amount / 2;\n        uint256 otherHalf = _amount - firstHalf;\n        uint256 initialETHBalance = address(this).balance;\n\n        //Swapping first half to ETH\n        swapToETH(_router, firstHalf);\n        uint256 received = address(this).balance - initialETHBalance;\n        addLiquidity(_router, otherHalf, received);\n    }\n\n\n    function addLiquidity(address _router, uint256 tokenAmount, uint256 ETHAmount) private {\n        _approve(address(this), address(_router), tokenAmount);\n        DexRouter(_router).addLiquidityETH{value: ETHAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            address(0),\n            block.timestamp\n        );\n    }\n \n\n    function swapToETH(address _router, uint256 _amount) internal {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = DexRouter(_router).WETH();\n        _approve(address(this), address(DexRouter(_router)), _amount);\n        DexRouter(_router).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            _amount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function withdrawStuckETH() external onlyOwner {\n        (bool success, ) = address(msg.sender).call{value: address(this).balance}(\"\");\n        require(success, \"transfering ETH failed\");\n    }\n\n\n    function withdrawStuckTokens(address erc20_token) external onlyOwner {\n        bool success = IERC20(erc20_token).transfer(\n            msg.sender,\n            IERC20(erc20_token).balanceOf(address(this))\n        );\n        require(success, \"trasfering tokens failed!\");\n    }\n\n    function burn(address _from, uint256 _amount, bool reduceSupply) external onlyOwner{\n        require(allowance(_from, msg.sender) >= _amount, \"you dont have enough allowance\");\n        if(reduceSupply){\n            _burn(_from, _amount);\n        }else{\n            _transfer(_from, address(0), _amount);\n        }\n    }\n\n    function getRouterBuyTaxes(address _router) public view returns(Tax memory){\n        return dexBuyTaxes[_router]; \n    }\n\n    function getRouterSellTaxes(address _router) public view returns(Tax memory){\n        return dexSellTaxes[_router]; \n    }\n\n    function isDexBuyTaxExcluded(address _wallet, address _router) public view returns(bool){\n        return pairBuyTaxExcludes[_router][_wallet];\n    }\n\n    function isDexSellTaxExcluded(address _wallet, address _router) public view returns(bool){\n        return pairSellTaxExcludes[_router][_wallet];\n    }\n\n    receive() external payable {}\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}}