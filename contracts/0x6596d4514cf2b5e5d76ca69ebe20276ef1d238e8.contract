pragma solidity ^0.5.17;


interface IERC20 {
    function totalSupply() external view returns (uint);

    function balanceOf(address account) external view returns (uint);

    function transfer(address recipient, uint amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
}

interface IPancakeRouter01 {
    function factory() external pure returns (address);

    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);

    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);

    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);

    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);

    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);

    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
    external
    returns (uint[] memory amounts);

    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
    external
    payable
    returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);

    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);

    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);

    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);

    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakeFactory {

    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);

    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);

    function allPairs(uint) external view returns (address pair);

    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;

    function setFeeToSetter(address) external;
}

interface IWrap
{
    function withdraw() external;
}


library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {codehash := extcodehash(account)}
        return (codehash != 0x0 && codehash != accountHash);
    }
}

library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;

        return c;
    }

    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }

        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        // Solidity only automatically asserts when dividing by 0
        require(b > 0, errorMessage);
        uint c = a / b;

        return c;
    }
}

library SafeERC20 {

    using SafeMath for uint;

    using Address for address;

    function safeTransfer(IERC20 token, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {
        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint value) internal {
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function callOptionalReturn(IERC20 token, bytes memory data) private {
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) {// Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


contract Context {
    constructor () internal {}

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }
}

contract Ownable is Context {

    address public _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () public {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



contract ERC20 is Context, IERC20 {
    using SafeMath for uint;

    mapping (address => uint) public _balances;

    mapping (address => mapping (address => uint)) private _allowances;

    uint private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    constructor (string memory name, string memory symbol, uint8 decimals, uint totalSupply) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        _totalSupply = totalSupply;
    }
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }


    function totalSupply() public view returns (uint) {
        return _totalSupply;
    }
    function balanceOf(address account) public view returns (uint) {
        return _balances[account];
    }
    function transfer(address recipient, uint amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address owner, address spender) public view returns (uint) {
        return _allowances[owner][spender];
    }
    function approve(address spender, uint amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }
    function _transfer(address sender, address recipient, uint amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    function _burn(address account, uint amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }
    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
}

contract AladdinToken is ERC20, Ownable {

    using SafeERC20 for IERC20;

    using Address for address;

    using SafeMath for uint;

    mapping(address => bool) private _whiteList;

    mapping(address => bool) private _blackList;

    uint public minOpAmount = 100 * 10 ** 18;

    address public pancakePair;

    uint public burnFee = 2;

    uint public addLPFee = 2;

    uint public lpBonusFee = 2;

    uint public communityBonusFee = 3;

    uint public jackpotFee = 1;

    uint public maxBurnAmount;

    uint public maxTxRate = 99;

    uint public maxHold = 100 * 10 ** 18;

    address public burnAddress = 0x000000000000000000000000000000000000dEaD;

    mapping(address => bool) private restrictedTxAddress;

    bool  public restrictedTx = true;

    bool public swap = false;

    bool private swaping = false;


    address public disAddress = 0xf8C430484Cce555e2F1448C04FB4051c14bF731c;

    IWrap public wrap = IWrap(0x56162E4F775Dc8eD2f8Ef9C41Dc0eb34dC6D1450);

    IERC20 public usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);

    IPancakeRouter01 public PancakeRouter01 = IPancakeRouter01(0x10ED43C718714eb63d5aA57B78B54704E256024E);


    constructor () public ERC20("Aladdin Token", "ALD", 18, 2100000 * 10 ** 18){
        address msgSender = _msgSender();
        maxBurnAmount =  totalSupply().div(10);
        _balances[msg.sender] = totalSupply();
        emit Transfer(address(0), msgSender, totalSupply());
        pancakePair = IPancakeFactory(PancakeRouter01.factory()).createPair(address(this), address(usdt));
        _whiteList[address(this)] = true;
        _whiteList[msgSender] = true;
        _whiteList[disAddress] = true;
    }

    function _transfer(address sender, address recipient, uint amount) internal {
        require(sender != address(0), "ERC20: transfer sender the zero address");
        require(recipient != address(0), "ERC20: transfer recipient the zero address");
        if (amount == 0) {
            super._transfer(sender, recipient, 0);
            return;
        }
        bool isBlackList = _blackList[sender] || _blackList[recipient];
        require(!isBlackList, "address is ban");
        bool isWhiteList = _whiteList[sender] || _whiteList[recipient];
        if (!isWhiteList) {
            bool isSwap = sender == pancakePair || recipient == pancakePair;
            require(!isSwap || swap, "swap not open");
            if (restrictedTx && sender == pancakePair) {
                require(!restrictedTxAddress[recipient], "restricted tx");
                restrictedTxAddress[recipient] = true;
            }
            require(amount <= this.balanceOf(sender).mul(maxTxRate).div(100), "tx amount is too big");
            uint256 fees = amount.mul(jackpotFee.add(addLPFee).add(burnFee).add(communityBonusFee).add(lpBonusFee)).div(100);
            require(0 == maxHold || recipient == pancakePair || balanceOf(recipient).add(amount.sub(fees)) <= maxHold, "gt max hold");
            amount = amount.sub(fees);
            super._transfer(sender, address(this), fees);
            uint currentBalance = balanceOf(address(this));
            if (currentBalance >= minOpAmount && !swaping && sender != pancakePair) {
                swaping = true;
                //burn
                uint burnAmount = currentBalance.mul(burnFee).div(10);
                uint isBurnAmount = balanceOf(burnAddress);
                if (isBurnAmount.add(burnAmount) > maxBurnAmount) {
                    uint tBurnAmount = maxBurnAmount.sub(isBurnAmount);
                    if (tBurnAmount > 0) {
                        super._transfer(address(this), burnAddress, tBurnAmount);
                    }
                    uint dBurnAmount = burnAmount.sub(tBurnAmount);
                    if (dBurnAmount > 0) {
                        super._transfer(address(this), disAddress, dBurnAmount);
                    }
                } else {
                    super._transfer(address(this), burnAddress, burnAmount);
                }
                //addLP
                _swapAndLiquidity(currentBalance.mul(addLPFee).div(10));
                //swap usdt
                _swapTokensForUsdt(currentBalance.mul(lpBonusFee.add(jackpotFee).add(communityBonusFee)).div(10), disAddress);
                swaping = false;
            }
        }
        super._transfer(sender, recipient, amount);
    }

    function setMinOpAmount(uint amount) external onlyOwner {
        minOpAmount = amount;
    }

    function setMaxBurnAmount(uint amount) external onlyOwner {
        maxBurnAmount = amount;
    }

    function setDisAddress(address _disAddress) external onlyOwner {
        _whiteList[disAddress] = false;
        disAddress = _disAddress;
        _whiteList[disAddress] = true;

    }

    function setWrap(IWrap _wrap) external onlyOwner {
        _whiteList[address(wrap)] = false;
        wrap = _wrap;
        _whiteList[address(wrap)] = true;
    }

    function setMaxTxRate(uint rate) external onlyOwner {
        maxTxRate = rate;
    }

    function setSwap(bool _swap) external onlyOwner {
        swap = _swap;
    }

    function setRestrictedTx(bool _restrictedTx) external onlyOwner {
        restrictedTx = _restrictedTx;
    }

    function setMaxHold(uint _maxHold) external onlyOwner {
        maxHold = _maxHold;
    }

    function setWhiteList(address _address, bool enable) external onlyOwner {
        _whiteList[_address] = enable;
    }

    function setBlackList(address _address, bool enable) external onlyOwner {
        _blackList[_address] = enable;
    }

    function isWhiteList(address _address) external view returns (bool) {
        return _whiteList[_address];
    }

    function batchSetWhiteList(address[] memory _addresses, bool enable) public onlyOwner {
        for(uint256 i = 0; i < _addresses.length; i++) {
            _whiteList[_addresses[i]] = enable;
        }
    }

    function isBlackList(address _address) external view returns (bool) {
        return _blackList[_address];
    }

    function transferForeignToken(address token) external onlyOwner returns (bool _sent){
        require(token != address(this), "Can't let you take all native token");
        uint256 _contractBalance = IERC20(token).balanceOf(address(this));
        _sent = IERC20(token).transfer(_msgSender(), _contractBalance);
    }

    function _swapAndLiquidity(uint256 contractTokenBalance) private {
        uint256 half = contractTokenBalance.div(2);
        uint256 otherHalf = contractTokenBalance.sub(half);
        _swapTokensForUsdt(half, address(wrap));
        uint256 usdtBalance = usdt.balanceOf(address(this));
        _addLiquidityUsdt(otherHalf, usdtBalance);
    }

    function _addLiquidityUsdt(uint256 tokenAmount, uint256 usdtAmount) private {
        _approve(address(this), address(PancakeRouter01), tokenAmount);
        usdt.approve(address(PancakeRouter01), usdtAmount);
        PancakeRouter01.addLiquidity(
            address(this),
            address(usdt),
            tokenAmount,
            usdtAmount,
            0,
            0,
            disAddress,
            block.timestamp
        );
    }

    function _swapTokensForUsdt(uint256 tokenAmount, address to) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = address(usdt);
        _approve(address(this), address(PancakeRouter01), tokenAmount);
        PancakeRouter01.swapExactTokensForTokens(
            tokenAmount,
            0,
            path,
            to,
            block.timestamp
        );
        if (to == address(wrap)) {
            wrap.withdraw();
        }
    }
}