{{
  "language": "Solidity",
  "sources": {
    "contracts/Legio.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./LERC20.sol\";\n\nabstract contract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n\ncontract LegioDAO is LERC20, Ownable, Pausable {\n    mapping(address => uint256) private _balances;\n    uint256 private _totalSupply;// = 1E8 * 1E18;\n\n    address public beneficiaryAddress;\n    uint8 public feePercentage = 6;\n    mapping(address => bool) public isExcludedFromFee;\n    mapping (address => bool) public isBlacklisted;\n    mapping (address => bool) public hasBlacklistPermission;\n\n    event TransferFee(address sender, address recipient, uint256 amount);\n    event SetFeePercentage(uint8 feePercentage);\n    event SetBeneficiaryAddress(address beneficiaryAddress);\n\n    constructor(uint256 totalSupply_, string memory name_, string memory symbol_,\n        address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_,\n        address beneficiaryAddress_) LERC20(\n        0,\n        name_, symbol_,\n        admin_,\n        recoveryAdmin_,\n        timelockPeriod_,\n        lossless_)\n    {\n        _mint(_msgSender(), totalSupply_);\n\n        beneficiaryAddress = beneficiaryAddress_;\n        isExcludedFromFee[msg.sender] = true;\n        hasBlacklistPermission[msg.sender] = true;\n    }\n\n    // --- ERC20 methods ---\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal override whenNotPaused {\n        require(sender != address(0), \"LERC20: transfer from the zero address\");\n        require(recipient != address(0), \"LERC20: transfer to the zero address\");\n        require(!isBlacklisted[sender], \"LEGIO: transfer from blacklisted address\");\n        require(!isBlacklisted[recipient], \"LEGIO: transfer to blacklisted address\");\n        require(!isBlacklisted[tx.origin], \"LEGIO: transfer called from blacklisted address\");\n\n        uint256 senderBalance = _balances[sender];\n        \n        require(senderBalance >= amount, \"LERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n\n        uint256 receiveAmount = amount;\n        if (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {\n            _balances[recipient] += receiveAmount;\n        } else {\n            uint256 feeAmount = (amount * feePercentage) / 100;\n            receiveAmount = amount - feeAmount;\n            _balances[beneficiaryAddress] += feeAmount;\n            _balances[recipient] += receiveAmount;\n            emit TransferFee(sender, beneficiaryAddress, feeAmount);\n        }\n        emit Transfer(sender, recipient, receiveAmount);\n    }\n\n    // --- ERC20 Features: mint, burn, tax ---\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(account != address(0), \"LERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function burn(uint256 amount) public virtual onlyOwner {\n        _burn(_msgSender(), amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"LERC20: burn from the zero address\");\n        \n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"LERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        \n        _totalSupply -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n    function setFeePercentage(uint8 feePercentage_) external onlyOwner {\n        require(feePercentage_ <= 20, \"LEGIO: transaction fee percentage exceeds 20\");\n        require(feePercentage_ >= 0, \"LEGIO: transaction fee percentage equals 0\");\n        feePercentage = feePercentage_;\n        emit SetFeePercentage(feePercentage);\n    }\n\n    function setBeneficiaryAddress(address beneficiaryAddress_) external onlyOwner {\n        beneficiaryAddress = beneficiaryAddress_;\n        emit SetBeneficiaryAddress(beneficiaryAddress);\n    }\n\n    function excludeFromFee(address address_, bool isExcluded) external onlyOwner {\n        isExcludedFromFee[address_] = isExcluded;\n    }\n\n    function setBlacklistPermission(address address_, bool permission) external onlyOwner {\n        hasBlacklistPermission[address_] = permission;\n    }\n\n    function setBlacklist(address[] calldata addresses, bool isBlacklist) external {\n        require(hasBlacklistPermission[msg.sender], \"LEGIO: insufficient permission\");\n        for (uint i=0; i<addresses.length; i++) {\n            isBlacklisted[addresses[i]] = isBlacklist;\n        }\n    }\n\n    // Pause feature\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    // BEP20 method\n    function getOwner() external view returns (address) {\n        return owner();\n    }\n}"
    },
    "contracts/LERC20.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface ILosslessController {\n    function beforeTransfer(address sender, address recipient, uint256 amount) external;\n\n    function beforeTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\n\n    function beforeApprove(address sender, address spender, uint256 amount) external;\n\n    function beforeIncreaseAllowance(address msgSender, address spender, uint256 addedValue) external;\n\n    function beforeDecreaseAllowance(address msgSender, address spender, uint256 subtractedValue) external;\n}\n\ncontract LERC20 is Context, IERC20 {\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n\n    address public recoveryAdmin;\n    address private recoveryAdminCanditate;\n    bytes32 private recoveryAdminKeyHash;\n    address public admin;\n    uint256 public timelockPeriod;\n    uint256 public losslessTurnOffTimestamp;\n    bool public isLosslessTurnOffProposed;\n    bool public isLosslessOn = true;\n    ILosslessController public lossless;\n\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n    event RecoveryAdminChangeProposed(address indexed candidate);\n    event RecoveryAdminChanged(address indexed previousAdmin, address indexed newAdmin);\n    event LosslessTurnOffProposed(uint256 turnOffDate);\n    event LosslessTurnedOff();\n    event LosslessTurnedOn();\n\n    constructor(uint256 totalSupply_, string memory name_, string memory symbol_, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_) {\n        _mint(_msgSender(), totalSupply_);\n        _name = name_;\n        _symbol = symbol_;\n        admin = admin_;\n        recoveryAdmin = recoveryAdmin_;\n        timelockPeriod = timelockPeriod_;\n        lossless = ILosslessController(lossless_);\n    }\n\n    // --- LOSSLESS modifiers ---\n\n    modifier lssAprove(address spender, uint256 amount) {\n        if (isLosslessOn) {\n            lossless.beforeApprove(_msgSender(), spender, amount);\n        } \n        _;\n    }\n\n    modifier lssTransfer(address recipient, uint256 amount) {\n        if (isLosslessOn) {\n            lossless.beforeTransfer(_msgSender(), recipient, amount);\n        } \n        _;\n    }\n\n    modifier lssTransferFrom(address sender, address recipient, uint256 amount) {\n        if (isLosslessOn) {\n            lossless.beforeTransferFrom(_msgSender(), sender, recipient, amount);\n        }\n        _;\n    }\n\n    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\n        if (isLosslessOn) {\n            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\n        }\n        _;\n    }\n\n    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\n        if (isLosslessOn) {\n            lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\n        }\n        _;\n    }\n\n    modifier onlyRecoveryAdmin() {\n        require(_msgSender() == recoveryAdmin, \"LERC20: Must be recovery admin\");\n        _;\n    }\n\n    // --- LOSSLESS management ---\n\n    function getAdmin() external view returns (address) {\n        return admin;\n    }\n\n    function transferOutBlacklistedFunds(address[] calldata from) external {\n        require(_msgSender() == address(lossless), \"LERC20: Only lossless contract\");\n        for (uint i = 0; i < from.length; i++) {\n            _transfer(from[i], address(lossless), balanceOf(from[i]));\n        }\n    }\n\n    function setLosslessAdmin(address newAdmin) external onlyRecoveryAdmin {\n        require(newAdmin != address(0), \"LERC20: Cannot be zero address\");\n        emit AdminChanged(admin, newAdmin);\n        admin = newAdmin;\n    }\n\n    function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) external onlyRecoveryAdmin {\n        require(candidate != address(0), \"LERC20: Cannot be zero address\");\n        recoveryAdminCanditate = candidate;\n        recoveryAdminKeyHash = keyHash;\n        emit RecoveryAdminChangeProposed(candidate);\n    }\n\n    function acceptRecoveryAdminOwnership(bytes memory key) external {\n        require(_msgSender() == recoveryAdminCanditate, \"LERC20: Must be canditate\");\n        require(keccak256(key) == recoveryAdminKeyHash, \"LERC20: Invalid key\");\n        emit RecoveryAdminChanged(recoveryAdmin, recoveryAdminCanditate);\n        recoveryAdmin = recoveryAdminCanditate;\n    }\n\n    function proposeLosslessTurnOff() external onlyRecoveryAdmin {\n        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\n        \n        isLosslessTurnOffProposed = true;\n        emit LosslessTurnOffProposed(losslessTurnOffTimestamp);\n    }\n\n    function executeLosslessTurnOff() external onlyRecoveryAdmin {\n        require(isLosslessTurnOffProposed, \"LERC20: TurnOff not proposed\");\n        require(losslessTurnOffTimestamp <= block.timestamp, \"LERC20: Time lock in progress\");\n        isLosslessOn = false;\n        isLosslessTurnOffProposed = false;\n        emit LosslessTurnedOff();\n    }\n\n    function executeLosslessTurnOn() external onlyRecoveryAdmin {\n        isLosslessTurnOffProposed = false;\n        isLosslessOn = true;\n        emit LosslessTurnedOn();\n    }\n\n    // --- ERC20 methods ---\n\n    function name() external view virtual returns (string memory) {\n        return _name;\n    }\n\n    function symbol() external view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() external view virtual returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) external virtual override lssTransfer(recipient, amount) returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) external virtual override lssAprove(spender, amount) returns (bool) {\n        require((amount == 0) || (_allowances[_msgSender()][spender] == 0), \"LERC20: Cannot change non zero allowance\");\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external virtual override lssTransferFrom(sender, recipient, amount) returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"LERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) external virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"LERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"LERC20: transfer from the zero address\");\n        require(recipient != address(0), \"LERC20: transfer to the zero address\");\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"LERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"LERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"LERC20: approve from the zero address\");\n        require(spender != address(0), \"LERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}