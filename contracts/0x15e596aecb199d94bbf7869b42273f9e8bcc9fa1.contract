{{
  "language": "Solidity",
  "sources": {
    "contracts/MCT.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\r\nimport \"./interfaces/IDistribution.sol\";\r\n\r\ncontract MCT is IERC20Metadata, AccessControl {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private allowances;\r\n\r\n    uint256 public override totalSupply;\r\n\r\n    string public override name;\r\n    string public override symbol;\r\n    uint8 public constant override decimals = 18;\r\n\r\n    address public constant deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public token1;\r\n    IUniswapV2Router02 public router;\r\n    address public pair;\r\n\r\n    mapping(address => bool) public isLpToken;\r\n    mapping(address => bool) public excludedFromFee;\r\n    mapping(address => bool) public excludedFromSwap;\r\n\r\n    IDistribution public distribution;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 public feeCounter;\r\n    uint256 public feeLimit = 8;\r\n\r\n    uint256 public burnFeeBuyRate;\r\n    uint256 public burnFeeSellRate;\r\n    uint256 public burnFeeTransferRate;\r\n    address[] public burnFeeReceivers;\r\n    uint256[] public burnFeeReceiversRate;\r\n\r\n    uint256 public liquidityFeeBuyRate;\r\n    uint256 public liquidityFeeSellRate;\r\n    uint256 public liquidityFeeTransferRate;\r\n    address[] public liquidityFeeReceivers;\r\n    uint256[] public liquidityFeeReceiversRate;\r\n    uint256 public liquidityFeeAmount;\r\n\r\n    uint256 public swapFeeBuyRate;\r\n    uint256 public swapFeeSellRate;\r\n    uint256 public swapFeeTransferRate;\r\n    address[] public swapFeeReceivers;\r\n    uint256[] public swapFeeReceiversRate;\r\n    uint256 public swapFeeAmount;\r\n\r\n    address immutable public rewardSwapAddress;\r\n    uint256 public rewardSellAmount;\r\n    uint256 public rewardSellRate;\r\n    uint256 public rewardBuyAmount;\r\n    uint256 public rewardBuyRate;\r\n    address[] public rewardSwapReceivers;\r\n    uint256[] public rewardSwapReceiversRate;\r\n\r\n    bool public enabledSwapForSell = true;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    event RouterAndPairUpdated(address _router, address _pair);\r\n    event LpTokenUpdated(address _lpToken, bool _lp);\r\n    event TokenRecovered(address _address, uint256 _amount);\r\n    event ExcludedFromFee(address _address, bool _isExcludedFromFee);\r\n    event ExcludedFromSwap(address _address, bool _isExcludedFromSwap);\r\n    event DistributionUpdated(address _distribution);\r\n    event RewardSwapReceiversUpdated(address[] _rewardSwapReceivers, uint256[] _rewardSwapReceiversRate);\r\n    event RewardSellRateUpdated(uint256 _rewardSellRate);\r\n    event RewardBuyRateUpdated(uint256 _rewardBuyRate);\r\n    event RewardsAmountReseted();\r\n    event BuyFeesUpdated(uint256 _burnFeeBuyRate, uint256 _liquidityFeeBuyRate, uint256 _swapFeeBuyRate);\r\n    event SellFeesUpdated(uint256 _burnFeeSellRate, uint256 _liquidityFeeSellRate, uint256 _swapFeeSellRate);\r\n    event TransferFeesUpdated(uint256 _burnFeeTransferRate, uint256 _liquidityFeeTransferRate, uint256 _swapFeeTransferRate);\r\n    event FeeCounterReseted();\r\n    event FeeLimitUpdated();\r\n    event BurnFeeReceiversUpdated(address[] _burnFeeReceivers, uint256[] _burnFeeReceiversRate);\r\n    event LiquidityFeeReceiversUpdated(address[] _liquidityFeeReceivers, uint256[] _liquidityFeeReceiversRate);\r\n    event LiquidityFeeReseted();\r\n    event SwapFeeReceiversUpdated(address[] _swapFeeReceivers, uint256[] _swapFeeReceiversRate);\r\n    event SwapFeeReseted();\r\n    event EnabledSwapForSellUpdated(bool _enabledSwapForSell);\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint256 _totalSupply,\r\n        IDistribution _distribution,\r\n        address _rewardSwapAddress,\r\n        IUniswapV2Router02 _router,\r\n        address _token1\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n        _mint(msg.sender, _totalSupply * 10 ** 18);\r\n\r\n        setDistribution(_distribution);\r\n\r\n        require(_rewardSwapAddress != address(0), \"zero reward swap address\");\r\n        rewardSwapAddress = _rewardSwapAddress;\r\n\r\n        updateRouterAndPair(_router, _token1);\r\n\r\n        setExcludedFromFee(msg.sender, true);\r\n        setExcludedFromSwap(msg.sender, true);\r\n\r\n        setExcludedFromFee(address(this), true);\r\n        setExcludedFromSwap(address(this), true);\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return balances[_account];\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\r\n        _transfer(msg.sender, _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\r\n        _approve(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) external override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n\r\n        uint256 currentAllowance = allowances[_sender][msg.sender];\r\n        require(currentAllowance >= _amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(_sender, msg.sender, currentAllowance.sub(_amount));\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool) {\r\n        _approve(msg.sender, _spender, allowances[msg.sender][_spender].add(_addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool) {\r\n        uint256 currentAllowance = allowances[msg.sender][_spender];\r\n        require(currentAllowance >= _subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(msg.sender, _spender, currentAllowance.sub(_subtractedValue));\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateRouterAndPair(IUniswapV2Router02 _router, address _token1) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_token1 != address(0), \"zero token1 address\");\r\n\r\n        address _pair = IUniswapV2Factory(_router.factory()).getPair(address(this), _token1);\r\n\r\n        if (_pair == address(0)) {\r\n            _pair = IUniswapV2Factory(_router.factory()).createPair(address(this), _token1);\r\n        }\r\n\r\n        router = _router;\r\n        token1 = _token1;\r\n        pair = _pair;\r\n        isLpToken[pair] = true;\r\n\r\n        emit RouterAndPairUpdated(address(_router), _token1);\r\n    }\r\n\r\n    function setLpToken(address _lpToken, bool _lp) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_lpToken != address(0), \"BEP20: invalid LP address\");\r\n        require(_lpToken != pair, \"ERC20: exclude default pair\");\r\n\r\n        isLpToken[_lpToken] = _lp;\r\n\r\n        emit LpTokenUpdated(_lpToken, _lp);\r\n    }\r\n\r\n    function recoverTokens(address _address, uint256 _amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_address != address(this), \"the token address can not be the current contract\");\r\n        IERC20(_address).transfer(msg.sender, _amount);\r\n\r\n        emit TokenRecovered(_address, _amount);\r\n    }\r\n\r\n    function setExcludedFromFee(address _address, bool _isExcludedFromFee) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        excludedFromFee[_address] = _isExcludedFromFee;\r\n\r\n        emit ExcludedFromFee(_address, _isExcludedFromFee);\r\n    }\r\n\r\n    function setExcludedFromSwap(address _address, bool _isExcludedFromSwap) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        excludedFromSwap[_address] = _isExcludedFromSwap;\r\n\r\n        emit ExcludedFromSwap(_address, _isExcludedFromSwap);\r\n    }\r\n\r\n    function setDistribution(IDistribution _distribution) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(address(_distribution) != address(0), \"zero distribution address\");\r\n        distribution = _distribution;\r\n\r\n        emit DistributionUpdated(address(_distribution));\r\n    }\r\n\r\n    function setRewardSwapReceivers(address[] calldata _rewardSwapReceivers, uint256[] calldata _rewardSwapReceiversRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_rewardSwapReceivers.length == _rewardSwapReceiversRate.length, \"size\");\r\n\r\n        uint256 totalRate = 0;\r\n        for (uint256 i = 0; i < _rewardSwapReceiversRate.length; i++) {\r\n            totalRate = totalRate.add(_rewardSwapReceiversRate[i]);\r\n        }\r\n        require(totalRate == 10000, \"rate\");\r\n\r\n        delete rewardSwapReceivers;\r\n        delete rewardSwapReceiversRate;\r\n\r\n        for (uint i = 0; i < _rewardSwapReceivers.length; i++) {\r\n            rewardSwapReceivers.push(_rewardSwapReceivers[i]);\r\n            rewardSwapReceiversRate.push(_rewardSwapReceiversRate[i]);\r\n        }\r\n\r\n        emit RewardSwapReceiversUpdated(_rewardSwapReceivers, _rewardSwapReceiversRate);\r\n    }\r\n\r\n    function setRewardSellRate(uint256 _rewardSellRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_rewardSellRate <= 3000, \"_rewardSellRate\");\r\n        // min: 0%; max: 30%\r\n        rewardSellRate = _rewardSellRate;\r\n\r\n        emit RewardSellRateUpdated(_rewardSellRate);\r\n    }\r\n\r\n    function setRewardBuyRate(uint256 _rewardBuyRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_rewardBuyRate <= 3000, \"_rewardBuyRate\");\r\n        // min: 0%; max: 30%\r\n        rewardBuyRate = _rewardBuyRate;\r\n\r\n        emit RewardBuyRateUpdated(_rewardBuyRate);\r\n    }\r\n\r\n    function resetRewardsAmount() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        rewardSellAmount = 0;\r\n        rewardBuyAmount = 0;\r\n\r\n        emit RewardsAmountReseted();\r\n    }\r\n\r\n    function updateBuyRates(uint256 _burnFeeBuyRate, uint256 _liquidityFeeBuyRate, uint256 _swapFeeBuyRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_burnFeeBuyRate.add(_liquidityFeeBuyRate).add(_swapFeeBuyRate) <= 2400, \"rate\");\r\n\r\n        burnFeeBuyRate = _burnFeeBuyRate;\r\n        liquidityFeeBuyRate = _liquidityFeeBuyRate;\r\n        swapFeeBuyRate = _swapFeeBuyRate;\r\n\r\n        emit BuyFeesUpdated(_burnFeeBuyRate, _liquidityFeeBuyRate, _swapFeeBuyRate);\r\n    }\r\n\r\n    function updateSellRates(uint256 _burnFeeSellRate, uint256 _liquidityFeeSellRate, uint256 _swapFeeSellRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_burnFeeSellRate.add(_liquidityFeeSellRate).add(_swapFeeSellRate) <= 2400, \"rate\");\r\n\r\n        burnFeeSellRate = _burnFeeSellRate;\r\n        liquidityFeeSellRate = _liquidityFeeSellRate;\r\n        swapFeeSellRate = _swapFeeSellRate;\r\n\r\n        emit SellFeesUpdated(_burnFeeSellRate, _liquidityFeeSellRate, _swapFeeSellRate);\r\n    }\r\n\r\n    function updateTransferRates(uint256 _burnFeeTransferRate, uint256 _liquidityFeeTransferRate, uint256 _swapFeeTransferRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_burnFeeTransferRate.add(_liquidityFeeTransferRate).add(_swapFeeTransferRate) <= 2400, \"rate\");\r\n\r\n        burnFeeTransferRate = _burnFeeTransferRate;\r\n        liquidityFeeTransferRate = _liquidityFeeTransferRate;\r\n        swapFeeTransferRate = _swapFeeTransferRate;\r\n\r\n        emit TransferFeesUpdated(_burnFeeTransferRate, _liquidityFeeTransferRate, _swapFeeTransferRate);\r\n    }\r\n\r\n    function resetCounter() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        feeCounter = 0;\r\n\r\n        emit FeeCounterReseted();\r\n    }\r\n\r\n    function setLimit(uint256 _feeLimit) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        feeLimit = _feeLimit;\r\n\r\n        emit FeeLimitUpdated();\r\n    }\r\n\r\n    function updateBurnFeeReceivers(address[] calldata _burnFeeReceivers, uint256[] calldata _burnFeeReceiversRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_burnFeeReceivers.length == _burnFeeReceiversRate.length, \"size\");\r\n\r\n        uint256 totalRate = 0;\r\n        for (uint256 i = 0; i < _burnFeeReceiversRate.length; i++) {\r\n            totalRate = totalRate.add(_burnFeeReceiversRate[i]);\r\n        }\r\n        require(totalRate == 10000, \"rate\");\r\n\r\n        delete burnFeeReceivers;\r\n        delete burnFeeReceiversRate;\r\n\r\n        for (uint i = 0; i < _burnFeeReceivers.length; i++) {\r\n            burnFeeReceivers.push(_burnFeeReceivers[i]);\r\n            burnFeeReceiversRate.push(_burnFeeReceiversRate[i]);\r\n        }\r\n\r\n        emit BurnFeeReceiversUpdated(_burnFeeReceivers, _burnFeeReceiversRate);\r\n    }\r\n\r\n    function updateLiquidityFeeReceivers(address[] calldata _liquidityFeeReceivers, uint256[] calldata _liquidityFeeReceiversRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_liquidityFeeReceivers.length == _liquidityFeeReceiversRate.length, \"size\");\r\n\r\n        uint256 totalRate = 0;\r\n        for (uint256 i = 0; i < _liquidityFeeReceiversRate.length; i++) {\r\n            totalRate = totalRate.add(_liquidityFeeReceiversRate[i]);\r\n        }\r\n        require(totalRate == 10000, \"rate\");\r\n\r\n        delete liquidityFeeReceivers;\r\n        delete liquidityFeeReceiversRate;\r\n\r\n        for (uint i = 0; i < _liquidityFeeReceivers.length; i++) {\r\n            liquidityFeeReceivers.push(_liquidityFeeReceivers[i]);\r\n            liquidityFeeReceiversRate.push(_liquidityFeeReceiversRate[i]);\r\n        }\r\n\r\n        emit LiquidityFeeReceiversUpdated(_liquidityFeeReceivers, _liquidityFeeReceiversRate);\r\n    }\r\n\r\n    function resetLiquidityFee() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        liquidityFeeAmount = 0;\r\n\r\n        emit LiquidityFeeReseted();\r\n    }\r\n\r\n    function updateSwapFeeReceivers(address[] calldata _swapFeeReceivers, uint256[] calldata _swapFeeReceiversRate) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(_swapFeeReceivers.length == _swapFeeReceiversRate.length, \"size\");\r\n\r\n        uint256 totalRate = 0;\r\n        for (uint256 i = 0; i < _swapFeeReceiversRate.length; i++) {\r\n            totalRate = totalRate.add(_swapFeeReceiversRate[i]);\r\n        }\r\n        require(totalRate == 10000, \"rate\");\r\n\r\n        delete swapFeeReceivers;\r\n        delete swapFeeReceiversRate;\r\n\r\n        for (uint i = 0; i < _swapFeeReceivers.length; i++) {\r\n            swapFeeReceivers.push(_swapFeeReceivers[i]);\r\n            swapFeeReceiversRate.push(_swapFeeReceiversRate[i]);\r\n        }\r\n\r\n        emit SwapFeeReceiversUpdated(_swapFeeReceivers, _swapFeeReceiversRate);\r\n    }\r\n\r\n    function resetSwapFee() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        swapFeeAmount = 0;\r\n\r\n        emit SwapFeeReseted();\r\n    }\r\n\r\n    function setEnabledSwapForSell(bool _enabledSwapForSell) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        enabledSwapForSell = _enabledSwapForSell;\r\n\r\n        emit EnabledSwapForSellUpdated(_enabledSwapForSell);\r\n    }\r\n\r\n    function burn(uint256 _amount) external {\r\n        _burn(msg.sender, _amount);\r\n    }\r\n\r\n    function burnFrom(address _account, uint256 _amount) external {\r\n        uint256 currentAllowance = allowance(_account, msg.sender);\r\n        require(currentAllowance >= _amount, \"ERC20: burn amount exceeds allowance\");\r\n        _approve(_account, msg.sender, currentAllowance.sub(_amount));\r\n        _burn(_account, _amount);\r\n    }\r\n\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(balances[_sender] >= _amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        uint256 calculatedAmount = _takeFees(_sender, _recipient, _amount);\r\n        _transferAmount(_sender, _recipient, calculatedAmount);\r\n    }\r\n\r\n    function _takeFees(address _from, address _to, uint256 _amount) internal returns (uint256) {\r\n        uint256 resultAmount = _amount;\r\n\r\n        if (!inSwap) {\r\n\r\n            if (\r\n                !(excludedFromFee[_from] || excludedFromFee[_to])\r\n            ) {\r\n\r\n                feeCounter = feeCounter.add(1);\r\n\r\n                uint256 burnFeeRes;\r\n                uint256 liquidityFeeRes;\r\n                uint256 swapFeeRes;\r\n\r\n                if (_isBuy(_from, _to)) {\r\n                    burnFeeRes = _calcFee(resultAmount, burnFeeBuyRate);\r\n                    liquidityFeeRes = _calcFee(resultAmount, liquidityFeeBuyRate);\r\n                    swapFeeRes = _calcFee(resultAmount, swapFeeBuyRate);\r\n\r\n                    rewardBuyAmount = rewardBuyAmount.add(_calcFee(resultAmount, rewardBuyRate));\r\n                } else if (_isSell(_from, _to)) {\r\n                    burnFeeRes = _calcFee(resultAmount, burnFeeSellRate);\r\n                    liquidityFeeRes = _calcFee(resultAmount, liquidityFeeSellRate);\r\n                    swapFeeRes = _calcFee(resultAmount, swapFeeSellRate);\r\n\r\n                    rewardSellAmount = rewardSellAmount.add(_calcFee(resultAmount, rewardSellRate));\r\n                } else {\r\n                    burnFeeRes = _calcFee(resultAmount, burnFeeTransferRate);\r\n                    liquidityFeeRes = _calcFee(resultAmount, liquidityFeeTransferRate);\r\n                    swapFeeRes = _calcFee(resultAmount, swapFeeTransferRate);\r\n                }\r\n\r\n                if (burnFeeRes > 0) {\r\n                    if (burnFeeReceivers.length > 0) {\r\n                        for (uint256 i = 0; i < burnFeeReceivers.length; i++) {\r\n                            _transferAmount(_from, burnFeeReceivers[i], _calcFee(burnFeeRes, burnFeeReceiversRate[i]));\r\n                        }\r\n                    } else {\r\n                        _transferAmount(_from, deadAddress, burnFeeRes);\r\n                    }\r\n                }\r\n\r\n                if (liquidityFeeRes > 0 || swapFeeRes > 0) {\r\n                    _transferAmount(_from, address(this), liquidityFeeRes.add(swapFeeRes));\r\n                    liquidityFeeAmount = liquidityFeeAmount.add(liquidityFeeRes);\r\n                    swapFeeAmount = swapFeeAmount.add(swapFeeRes);\r\n                }\r\n\r\n                resultAmount = resultAmount.sub(burnFeeRes).sub(liquidityFeeRes).sub(swapFeeRes);\r\n            }\r\n\r\n            if (\r\n                !_isBuy(_from, _to) &&\r\n            (!_isSell(_from, _to) || enabledSwapForSell) &&\r\n            !(excludedFromSwap[_from] || excludedFromSwap[_to]) &&\r\n            feeCounter >= feeLimit\r\n            ) {\r\n                uint256 amountToSwap = 0;\r\n\r\n\r\n                uint256 liquidityFeeHalf = liquidityFeeAmount.div(2);\r\n                uint256 liquidityFeeOtherHalf = liquidityFeeAmount.sub(liquidityFeeHalf);\r\n\r\n                if (liquidityFeeOtherHalf > 0 && liquidityFeeHalf > 0) {\r\n                    amountToSwap = amountToSwap.add(liquidityFeeHalf);\r\n                }\r\n\r\n                amountToSwap = amountToSwap.add(swapFeeAmount);\r\n\r\n                uint256 rewardBuyToSwap = rewardBuyAmount.add(rewardSellAmount);\r\n                if (\r\n                    rewardBuyToSwap > 0 &&\r\n                    balanceOf(rewardSwapAddress) >= rewardBuyToSwap\r\n                ) {\r\n                    _transferAmount(rewardSwapAddress, address(this), rewardBuyToSwap);\r\n                    amountToSwap = amountToSwap.add(rewardBuyToSwap);\r\n                }\r\n\r\n                if (amountToSwap > 0) {\r\n                    IERC20 _token1 = IERC20(token1);\r\n                    uint256 oldToken1Balance = _token1.balanceOf(address(distribution));\r\n                    _swapTokensForToken1(amountToSwap, address(distribution));\r\n                    uint256 newToken1Balance = _token1.balanceOf(address(distribution));\r\n                    uint256 token1Balance = newToken1Balance.sub(oldToken1Balance);\r\n\r\n\r\n                    if (liquidityFeeOtherHalf > 0 && liquidityFeeHalf > 0) {\r\n                        uint256 liquidityFeeToken1Amount = _calcFee(token1Balance, liquidityFeeHalf.mul(10000).div(amountToSwap));\r\n                        distribution.recoverTokensFor(token1, liquidityFeeToken1Amount, address(this));\r\n\r\n                        IERC20 _lp = IERC20(pair);\r\n                        uint256 oldLpBalance = _lp.balanceOf(address(distribution));\r\n                        if (liquidityFeeReceivers.length == 1) {\r\n                            _addLiquidity(liquidityFeeOtherHalf, liquidityFeeToken1Amount, liquidityFeeReceivers[0]);\r\n                        } else {\r\n                            _addLiquidity(liquidityFeeOtherHalf, liquidityFeeToken1Amount, address(distribution));\r\n                        }\r\n                        uint256 newLpBalance = _lp.balanceOf(address(distribution));\r\n                        uint256 lpBalance = newLpBalance.sub(oldLpBalance);\r\n\r\n                        if (liquidityFeeReceivers.length > 1) {\r\n                            for (uint256 i = 0; i < liquidityFeeReceivers.length; i++) {\r\n                                distribution.recoverTokensFor(pair, _calcFee(lpBalance, liquidityFeeReceiversRate[i]), liquidityFeeReceivers[i]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (swapFeeAmount > 0) {\r\n                        uint256 swapFeeToken1Amount = _calcFee(token1Balance, swapFeeAmount.mul(10000).div(amountToSwap));\r\n\r\n                        for (uint256 i = 0; i < swapFeeReceivers.length; i++) {\r\n                            distribution.recoverTokensFor(token1, _calcFee(swapFeeToken1Amount, swapFeeReceiversRate[i]), swapFeeReceivers[i]);\r\n                        }\r\n                    }\r\n\r\n                    if (rewardBuyToSwap > 0) {\r\n                        uint256 rewardToken1Amount = _calcFee(token1Balance, rewardBuyToSwap.mul(10000).div(amountToSwap));\r\n\r\n                        for (uint256 i = 0; i < rewardSwapReceivers.length; i++) {\r\n                            distribution.recoverTokensFor(token1, _calcFee(rewardToken1Amount, rewardSwapReceiversRate[i]), rewardSwapReceivers[i]);\r\n                        }\r\n                    }\r\n\r\n\r\n                    feeCounter = 0;\r\n                    liquidityFeeAmount = 0;\r\n                    swapFeeAmount = 0;\r\n                    rewardBuyAmount = 0;\r\n                    rewardSellAmount = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return resultAmount;\r\n    }\r\n\r\n    function _transferAmount(address _from, address _to, uint256 _amount) internal {\r\n        balances[_from] = balances[_from].sub(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n\r\n        emit Transfer(_from, _to, _amount);\r\n    }\r\n\r\n    function _mint(address _account, uint256 _amount) internal {\r\n        require(_account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_account] = balances[_account].add(_amount);\r\n        emit Transfer(address(0), _account, _amount);\r\n    }\r\n\r\n    function _burn(address _account, uint256 _amount) internal {\r\n        require(_account != address(0), \"ERC20: burn from the zero address\");\r\n        require(_account != deadAddress, \"ERC20: burn from the dead address\");\r\n        require(balances[_account] >= _amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        _transferAmount(_account, deadAddress, _amount);\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) internal {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _calcFee(uint256 _amount, uint256 _rate) internal pure returns (uint256) {\r\n        return _rate > 0 ? _amount.mul(_rate).div(10000) : 0;\r\n    }\r\n\r\n    function _isSell(address _from, address _to) internal view returns (bool) {\r\n        return !isLpToken[_from] && isLpToken[_to];\r\n    }\r\n\r\n    function _isBuy(address _from, address _to) internal view returns (bool) {\r\n        return isLpToken[_from] && !isLpToken[_to];\r\n    }\r\n\r\n    function _swapTokensForToken1(uint256 _tokenAmount, address _recipient) internal lockTheSwap {\r\n        // generate the uniswap pair path of token -> token1\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = token1;\r\n\r\n        _approve(address(this), address(router), _tokenAmount);\r\n        // make the swap\r\n\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0, // accept any amount of token1\r\n            path,\r\n            _recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _token1Amount, address _recipient) internal lockTheSwap {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(router), _tokenAmount);\r\n        IERC20(token1).approve(address(router), _token1Amount);\r\n\r\n        // add the liquidity\r\n        router.addLiquidity(\r\n            address(this),\r\n            token1,\r\n            _tokenAmount,\r\n            _token1Amount,\r\n            0,\r\n            0,\r\n            _recipient,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IDistribution.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\ninterface IDistribution {\r\n\r\n    function OPERATOR_ROLE() external view returns(bytes32);\r\n\r\n    function recoverTokens(address _token, uint256 _amount) external;\r\n\r\n    function recoverTokensFor(address _token, uint256 _amount, address _to) external;\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}