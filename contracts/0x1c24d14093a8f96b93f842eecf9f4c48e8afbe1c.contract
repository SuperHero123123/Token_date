pragma solidity >=0.5.0;
// SPDX-License-Identifier: Unlicensed

library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }


    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

   
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

   
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

   
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

   
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }

   
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}
interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}
 

contract WbfToken is IERC20 {

    using SafeMath for uint256;

    mapping (address => uint256) internal _tOwned;
    mapping (address => mapping (address => uint256)) internal _allowances;

    string internal _name; 
    string internal _symbol;
    uint256 internal _decimals;
    uint256 internal _tTotal;
    
    address public _owner;
    uint public feeRate = 5;
    uint public daoRate = 60;
    uint public burnRate = 40;
    address public uniswapV2Pair;

    mapping(address =>bool) public inWhiteList;

    address constant burnAddress = address(0x0);
    address public daoAddress;
    
    modifier onlyOwner() {
        require(msg.sender == _owner, "admin: wut?");
        _;
    }
    
    constructor (
        uint256 _supply,
        address _factory,
        address _usdt,
        address _daoAddress
    ) public {
        _decimals = 18;
        _tTotal = _supply * 10 ** _decimals;
        _name = "WBF";
        _symbol = "WBF";
        daoAddress = _daoAddress;
        _tOwned[daoAddress] = _tTotal;
       emit Transfer(address(0), daoAddress, _tTotal);
        
        uniswapV2Pair = IUniswapV2Factory(_factory)
            .createPair(address(this), _usdt);

        inWhiteList[msg.sender] = true;
        inWhiteList[daoAddress] = true;
        _owner = msg.sender;
    }

    function transferOwner(address newOwner)external onlyOwner{
        _owner = newOwner;
    }

    function setInWhiteList(address owner,bool isIn)external onlyOwner{
        inWhiteList[owner] = isIn;
    }

    function setFeeRate(uint rate)external onlyOwner{
        feeRate = rate;
    }

    function setDaoAddress(address dao)external onlyOwner{
        daoAddress = dao;
    }

    function setPair(address pair)external onlyOwner{
        uniswapV2Pair = pair;
    }

    function setRate(uint _daoRate,uint _burnRate)external onlyOwner{
        daoRate = _daoRate;
        burnRate = _burnRate;
    }

    function name() public override view returns (string memory) {
        return _name;
    }

    function symbol() public override view returns (string memory) {
        return _symbol;
    }

    function decimals() public override view returns (uint256) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
         return _tOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        address msgSender = msg.sender;
        _approve(sender, msgSender, _allowances[sender][msgSender].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {
        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }


    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

     function calculateSellFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(feeRate).div(
            10**2
        );
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint fee = 0;

        if(  to == uniswapV2Pair && !inWhiteList[from]){
            fee = calculateSellFee(amount);
        }

         if( from == uniswapV2Pair && !inWhiteList[to]){
            fee = calculateSellFee(amount);
        }
       
        if( fee > 0 ){
            uint daoAmount = fee * daoRate / 100;
            uint burnAmount = fee * burnRate / 100;

            _tOwned[burnAddress] = _tOwned[burnAddress].add(burnAmount);
            _tOwned[daoAddress] = _tOwned[daoAddress].add(daoAmount);
            
            emit Transfer(from, burnAddress, burnAmount);
            emit Transfer(from, daoAddress, daoAmount);
        }
        uint acceptAmount = amount - fee;

        _tOwned[from] = _tOwned[from].sub(amount);
        _tOwned[to] = _tOwned[to].add(acceptAmount);
        emit Transfer(from, to, acceptAmount);
    }
}