{{
  "language": "Solidity",
  "sources": {
    "contracts/BNBP.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\r\nimport '@openzeppelin/contracts/access/Ownable.sol';\r\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\r\nimport './interfaces/IPancakeFactory.sol';\r\nimport './interfaces/IPotContract.sol';\r\n\r\ncontract BNBP is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // FIXME: This is for bnb test Network, change to Mainnet before launch\r\n    address public constant wbnbAddr = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public constant pancakeswapV2FactoryAddr = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\r\n\r\n    address public potContractAddr;\r\n    address[] public tokenHolders;\r\n    mapping(address => bool) public isTokenHolder;\r\n\r\n    // Tokenomics Variable\r\n    uint256 public lastAirdropTime;\r\n    uint256 public lastBurnTime;\r\n    uint256 public lastLotteryTime;\r\n\r\n    // Airdrop Context - all the variables respresent state at the moment of airdrop\r\n    uint256 public totalAirdropAmount;\r\n    uint256 public currentAirdropUserIndex;\r\n    uint256 public totalAirdropUserCount;\r\n    uint256 public totalTokenStaking;\r\n    uint256 public currentAirdropMinimum;\r\n    bool public isAirdropping;\r\n\r\n    uint256 public stakingMinimum;\r\n    uint256 public minimumStakingTime;\r\n\r\n    //Staking Context\r\n    Staking[] public stakingList;\r\n    mapping(address => uint256) public userStakingAmount;\r\n    mapping(address => uint256) public userStakingCount;\r\n\r\n    struct Staking {\r\n        address user;\r\n        uint256 balance;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct StakingWithId {\r\n        address user;\r\n        uint256 id;\r\n        uint256 balance;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    error AirdropTimeError();\r\n\r\n    event StakedBNBP(uint256 stakingId, address user, uint256 amount);\r\n    event UnStakedBNBP(uint256 stakingId, address user);\r\n\r\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\r\n        _mint(msg.sender, 1000000 * 10**18);\r\n\r\n        lastAirdropTime = block.timestamp;\r\n        lastBurnTime = block.timestamp;\r\n        lastLotteryTime = block.timestamp;\r\n\r\n        // stakingMinimum = 5 * 10**18; // 5 BNBP\r\n        // minimumStakingTime = 100 * 24 * 3600;\r\n\r\n        isAirdropping = false;\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        _checkStaking(from, amount);\r\n        _addToTokenHolders(to);\r\n    }\r\n\r\n    modifier validPotLottery() {\r\n        require(potContractAddr != address(0), 'PotLottery Contract Address is not valid');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev check if the given address is valid user - not one of owner,\r\n     * liquidity pool, or PotLottery contract\r\n     *\r\n     * @param addr address to be checked\r\n     */\r\n    function isUserAddress(address addr) public view returns (bool) {\r\n        address pairAddr = calculatePairAddress();\r\n\r\n        if (addr != owner() && addr != potContractAddr && addr != pairAddr && addr != address(0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev add address {to} to token holder list\r\n     *\r\n     * @param to token receiver - this should be user address\r\n     */\r\n    function _addToTokenHolders(address to) internal {\r\n        if (isUserAddress(to) && !isTokenHolder[to]) {\r\n            isTokenHolder[to] = true;\r\n            tokenHolders.push(to);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check balance if transfer doesn't occupy staking pool\r\n     */\r\n    function _checkStaking(address from, uint256 amount) internal view {\r\n        if (userStakingAmount[from] > 0) {\r\n            require(userStakingAmount[from] + amount <= balanceOf(from), 'Cannot occupy staking pool');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev get uniswap pair address between BNBP and BNB\r\n     */\r\n    function calculatePairAddress() public view returns (address) {\r\n        IPancakeFactory pancakeFactory = IPancakeFactory(pancakeswapV2FactoryAddr);\r\n        address realPair = pancakeFactory.getPair(address(this), wbnbAddr);\r\n        return realPair;\r\n    }\r\n\r\n    /**\r\n     * @dev returns total balance of users\r\n     */\r\n    function totalUserBalance() public view returns (uint256) {\r\n        address pairAddr = calculatePairAddress();\r\n        uint256 tokenAmount = balanceOf(owner()) + balanceOf(potContractAddr) + balanceOf(pairAddr);\r\n        uint256 totalBalance = totalSupply() - tokenAmount;\r\n\r\n        return totalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev airdrops BNBP to token holders depending on the amount of holding\r\n     * tokens in their wallet\r\n     *\r\n     * @return airdropped amount\r\n     *\r\n     * NOTE: The caller of this fuction will pay the airdrop fees, so it is\r\n     * recommended to be called by PotLottery Contract\r\n     */\r\n    function performAirdrop() external validPotLottery returns (uint256) {\r\n        IPotLottery potLottery = IPotLottery(potContractAddr);\r\n        uint256 airdropInterval = potLottery.airdropInterval();\r\n        uint256 nextAirdropTime = lastAirdropTime + airdropInterval;\r\n\r\n        require(nextAirdropTime <= block.timestamp || isAirdropping, \"Can't airdrop yet. Should wait more\");\r\n        require(balanceOf(potContractAddr) > 0, 'No Balance for Airdrop');\r\n\r\n        if (!isAirdropping) {\r\n            uint256 airdropPool = potLottery.airdropPool();\r\n            require(airdropPool > 0, 'Airdrop Pool Empty');\r\n\r\n            if (getTotalStakingAmount() == 0) {\r\n                _burn(msg.sender, airdropPool);\r\n            }\r\n            // Start a new airdrop\r\n            currentAirdropMinimum = stakingMinimum;\r\n            totalTokenStaking = getTotalStakingAmount();\r\n            lastAirdropTime = block.timestamp;\r\n            totalAirdropAmount = airdropPool;\r\n            totalAirdropUserCount = tokenHolders.length;\r\n            currentAirdropUserIndex = 0;\r\n            isAirdropping = true;\r\n        }\r\n        return _continueAirdrop();\r\n    }\r\n\r\n    /**\r\n     * @dev continue the previous airdrop\r\n     *\r\n     * @return airdropped amount\r\n     */\r\n    function _continueAirdrop() internal returns (uint256 airdropped) {\r\n        uint256 i = currentAirdropUserIndex;\r\n        for (uint8 count = 0; count < 150 && i < totalAirdropUserCount; i++) {\r\n            address user = tokenHolders[i];\r\n            uint256 balance = userStakingAmount[user];\r\n\r\n            if (balance > 0) {\r\n                uint256 amount = (balance * totalAirdropAmount) / totalTokenStaking;\r\n\r\n                transfer(user, amount);\r\n                airdropped += amount;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        currentAirdropUserIndex = i;\r\n        if (currentAirdropUserIndex >= totalAirdropUserCount) {\r\n            isAirdropping = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev burns BNBP token accumulated in the burn pool on the PotLottery\r\n     * Contract\r\n     *\r\n     * @return burnt amount\r\n     *\r\n     * NOTE: The caller of this fuction will burn his BNBP tokens, so it is\r\n     * recommended to be called by PotLottery Contract\r\n     */\r\n    function performBurn() external validPotLottery returns (uint256) {\r\n        IPotLottery potLottery = IPotLottery(potContractAddr);\r\n        uint256 burnPool = potLottery.burnPool();\r\n        uint256 burnInterval = potLottery.burnInterval();\r\n        uint256 nextBurnTime = lastBurnTime + burnInterval;\r\n\r\n        require(nextBurnTime <= block.timestamp, \"Can't burn yet. Should wait more\");\r\n        require(balanceOf(potContractAddr) > 0, 'No Balance for burn');\r\n\r\n        _burn(msg.sender, burnPool);\r\n\r\n        lastBurnTime = block.timestamp;\r\n        return burnPool;\r\n    }\r\n\r\n    /**\r\n     * @dev gives BNBP token accumulated in the lottery pool to the selected\r\n     * winnner\r\n     *\r\n     * @return given lottery amount\r\n     *\r\n     * NOTE: The caller of this fuction will pay the lottery fee, so it is\r\n     * recommended to be called by PotLottery Contract\r\n     */\r\n    function performLottery() external validPotLottery returns (address) {\r\n        IPotLottery potLottery = IPotLottery(potContractAddr);\r\n        uint256 lotteryPool = potLottery.lotteryPool();\r\n        uint256 lotteryInterval = potLottery.lotteryInterval();\r\n        uint256 nextLotteryTime = lastLotteryTime + lotteryInterval;\r\n\r\n        require(nextLotteryTime <= block.timestamp, \"Can't lottery yet. Should wait more\");\r\n        require(balanceOf(potContractAddr) > 0, 'No Balance for Lottery');\r\n\r\n        address winner = _determineLotteryWinner();\r\n        transfer(winner, lotteryPool);\r\n\r\n        return winner;\r\n    }\r\n\r\n    /**\r\n     * @dev generates a random number\r\n     */\r\n    function getRandomNumber() public view returns (uint256) {\r\n        return uint256(uint128(bytes16(keccak256(abi.encodePacked(block.difficulty, block.timestamp)))));\r\n    }\r\n\r\n    /**\r\n     * @dev gets the winner for the lottery\r\n     *\r\n     */\r\n    function _determineLotteryWinner() internal view returns (address) {\r\n        uint256 randomNumber = getRandomNumber();\r\n        uint256 winnerValue = randomNumber % getTotalStakingAmount();\r\n        uint256 length = tokenHolders.length;\r\n        address winner;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            uint256 balance = userStakingAmount[tokenHolders[i]];\r\n\r\n            if (winnerValue <= balance) {\r\n                winner = tokenHolders[i];\r\n                break;\r\n            }\r\n\r\n            winnerValue -= balance;\r\n        }\r\n        return winner;\r\n    }\r\n\r\n    /**\r\n     * @dev gets the total staking BNBP balance\r\n     */\r\n    function getTotalStakingAmount() public view returns (uint256) {\r\n        uint256 total;\r\n        uint256 length = stakingList.length;\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            total += stakingList[i].balance;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * @dev stakes given value of BNBP from user address, this is for\r\n     * being eligible to get airdrop and lottery\r\n     */\r\n    function stakeBNBP(uint256 value) external validPotLottery returns (uint256) {\r\n        uint256 lockMinimum = stakingMinimum;\r\n        uint256 currentLockedAmount = userStakingAmount[msg.sender];\r\n        uint256 userBalance = balanceOf(msg.sender);\r\n\r\n        require(value >= lockMinimum, 'Should be bigger than minimum amount.');\r\n        require(userBalance >= currentLockedAmount + value, 'Not enough balance');\r\n\r\n        stakingList.push(Staking(msg.sender, value, block.timestamp));\r\n        userStakingAmount[msg.sender] = currentLockedAmount + value;\r\n        userStakingCount[msg.sender]++;\r\n\r\n        uint256 stakingId = stakingList.length - 1;\r\n        emit StakedBNBP(stakingId, msg.sender, value);\r\n        return stakingId;\r\n    }\r\n\r\n    /**\r\n     * @dev unstakes BNBP if possible\r\n     */\r\n    function unStakeBNBP(uint256 stakingIndex) external validPotLottery {\r\n        Staking storage staking = stakingList[stakingIndex];\r\n        uint256 unStakeTime = staking.timestamp + minimumStakingTime;\r\n\r\n        require(staking.user == msg.sender, 'User Address not correct');\r\n        require(unStakeTime <= block.timestamp, 'Not available to unstake');\r\n        require(staking.balance > 0, 'Already Unstaked');\r\n\r\n        userStakingAmount[msg.sender] -= staking.balance;\r\n        userStakingCount[msg.sender]--;\r\n        staking.balance = 0;\r\n\r\n        emit UnStakedBNBP(stakingIndex, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev returns staking list of user\r\n     */\r\n    function getUserStakingInfo(address user) public view returns (StakingWithId[] memory) {\r\n        uint256 count = userStakingCount[user];\r\n        uint256 sIndex;\r\n        StakingWithId[] memory res;\r\n\r\n        if (count == 0) {\r\n            return res;\r\n        }\r\n        res = new StakingWithId[](userStakingCount[user]);\r\n\r\n        for (uint256 i = 0; i < stakingList.length; i++) {\r\n            Staking storage staking = stakingList[i];\r\n\r\n            if (staking.user == user && staking.balance > 0) {\r\n                res[sIndex++] = StakingWithId(user, i, staking.balance, staking.timestamp);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets minimum BNBP value to get airdrop and lottery\r\n     *\r\n     */\r\n    function setStakingMinimum(uint256 value) external onlyOwner {\r\n        stakingMinimum = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets minimum BNBP value to get airdrop and lottery\r\n     *\r\n     */\r\n    function setMinimumStakingTime(uint256 value) external onlyOwner {\r\n        minimumStakingTime = value;\r\n    }\r\n\r\n    /**\r\n     * @dev sets the PotLottery Contract address\r\n     *\r\n     */\r\n    function setPotContractAddress(address addr) external onlyOwner {\r\n        potContractAddr = addr;\r\n    }\r\n\r\n    function bulkTransfer(address[] calldata accounts, uint256[] calldata amounts) external {\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            transfer(accounts[i], amounts[i]);\r\n        }\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.16;\r\n\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}"
    },
    "contracts/interfaces/IPotContract.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2022-04-18\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\n// File: PotContract.sol\r\n\r\ninterface IPotLottery {\r\n    struct Token {\r\n        address tokenAddress;\r\n        string tokenSymbol;\r\n        uint256 tokenDecimal;\r\n    }\r\n\r\n    enum POT_STATE {\r\n        PAUSED,\r\n        WAITING,\r\n        STARTED,\r\n        LIVE,\r\n        CALCULATING_WINNER\r\n    }\r\n\r\n    event EnteredPot(\r\n        string tokenName,\r\n        address indexed userAddress,\r\n        uint256 indexed potRound,\r\n        uint256 usdValue,\r\n        uint256 amount,\r\n        uint256 indexed enteryCount,\r\n        bool hasEntryInCurrentPot\r\n    );\r\n    event CalculateWinner(\r\n        address indexed winner,\r\n        uint256 indexed potRound,\r\n        uint256 potValue,\r\n        uint256 amount,\r\n        uint256 amountWon,\r\n        uint256 participants\r\n    );\r\n\r\n    event PotStateChange(uint256 indexed potRound, POT_STATE indexed potState, uint256 indexed time);\r\n    event TokenSwapFailed(string tokenName);\r\n\r\n    function getRefund() external;\r\n\r\n    function airdropPool() external view returns (uint256);\r\n\r\n    function lotteryPool() external view returns (uint256);\r\n\r\n    function burnPool() external view returns (uint256);\r\n\r\n    function airdropInterval() external view returns (uint256);\r\n\r\n    function burnInterval() external view returns (uint256);\r\n\r\n    function lotteryInterval() external view returns (uint256);\r\n\r\n    function fullFillRandomness() external view returns (uint256);\r\n\r\n    function getBNBPrice() external view returns (uint256 price);\r\n\r\n    function swapAccumulatedFees() external;\r\n\r\n    function burnAccumulatedBNBP() external;\r\n\r\n    function airdropAccumulatedBNBP() external returns (uint256);\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 3
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}