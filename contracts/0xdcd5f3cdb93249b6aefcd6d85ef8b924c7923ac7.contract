// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return payable(msg.sender);
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691
        return msg.data;
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}

library SafeMath {
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        // solhint-disable-next-line no-inline-assembly
        assembly {
            codehash := extcodehash(account)
        }
        return (codehash != accountHash && codehash != 0x0);
    }

    function sendValue(address payable recipient, uint256 amount) internal {
        require(
            address(this).balance >= amount,
            "Address: insufficient balance"
        );

        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
        (bool success, ) = recipient.call{value: amount}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    function functionCall(address target, bytes memory data)
        internal
        returns (bytes memory)
    {
        return functionCall(target, data, "Address: low-level call failed");
    }

    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return
            functionCallWithValue(
                target,
                data,
                value,
                "Address: low-level call with value failed"
            );
    }

    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(
            address(this).balance >= value,
            "Address: insufficient balance for call"
        );
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(
        address target,
        bytes memory data,
        uint256 weiValue,
        string memory errorMessage
    ) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: weiValue}(
            data
        );
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

contract Ownable is Context {
    address private _owner;
    address private _previousOwner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    constructor() {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    function owner() public view returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    function waiveOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IUniswapV2Factory {
    function getPair(address tokenA, address tokenB)
        external
        view
        returns (address pair);

    function createPair(address tokenA, address tokenB)
        external
        returns (address pair);
}

interface IUniswapRouter {
    function factory() external pure returns (address);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;
}

interface IBscPrice {
    function getTokenUsdtPrice(address _token) external view returns (uint256);
}

contract BHC is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using Address for address;

    string private _name = "Bounty Coins";
    string private _symbol = "BHC";
    uint8 private _decimals = 18;
    //小拳头币
    address public fistToken = 0xf595cb23d3Fe93Db4657c69193Ee7692B3367CC1;
    //价格地址
    address public bscPriceAddress = 0xb44BD3a21656f7Bea10eC63A6F3f63BA5Fb5365A;
    //基金会地址
    address public fundingWalletAddress =
        0xc59A43fB75b580fdfCf916EC0fd8D6F203D55a5B;
    //跨链交易地址
    address public crossChainWalletAddress =
        0xBDf8788EC3cc5c55019A7eFca3Ff21671EB806E8;
    //销毁地址
    address public deadAddress = 0x000000000000000000000000000000000000dEaD;
    // 赏金池地址
    address public prizePoolWalletAddress =
        0x0CbbF34834AC95443ffB9Bf600970818d27CC57d;
    //Dao地址
    address public daoWalletAddress =
        0x4C78c1D756E594f195D0Eb3002CE0C071783AC11;
    //fist分红地址
    address public fistBonusAddress = 0x08cafF757Be225833e991910b0b7606a7F7f1eD4;

    mapping(address => uint256) _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    //交易不限制
    mapping(address => bool) public isTxLimitExempt;
    //是否lp地址
    mapping(address => bool) public isMarketPair;

    //销毁手续费
    uint256 public _destroyFee = 20;
    //fist总手续费
    uint256 public _fistBounsFee = 30;
    //推广手续费
    uint256[6] public _marketingShares;
    //薄饼交易总手续费
    uint256 public _totalTaxIfPancakeTrading;
    //普通交易手续费
    uint256 public _totalTaxIfTrading = 20;
    //推广分红手续费
    uint256 public _totalMarketingShareFee;
    //发行量
    uint256 private _totalSupply = 10000000000 * 10**_decimals;
    address public uniswapPair;
    IUniswapRouter uniswapV2Router;
    //用户层级关系
    mapping(address => address) public referers;
    //绑定关系限制
    uint256 relationUsdtLimit = 3 * 1e18;
    bool inSwapAndLiquify;
    bool public relationSwitch = true;
    mapping(address => bool) public operators;
    mapping(uint256 => bool) public releaseStatus;
    //每日释放数量
    uint256 public dayReleaseAmount;
    uint256 constant baseTime = 1646928000;
    //释放结束时间
    uint256 public relaseEndTime;
    //释放存在领导人
    mapping(address => bool) public existRefer;
    bool public liquifyEnable = true;

    constructor() {
        uniswapV2Router = IUniswapRouter(
            0x10ED43C718714eb63d5aA57B78B54704E256024E
        );
        uniswapPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(
            address(this),
            0x55d398326f99059fF775485246999027B3197955
        );
        _allowances[address(this)][address(uniswapV2Router)] = _totalSupply;

        _marketingShares = [20, 10, 5, 5, 5, 5];
        _refreshPancakeTradeFee();

        uint256 currentTime = getCurrentTime();
        relaseEndTime = currentTime.add(1 days * 360);
        uint256 foundingRelase = _totalSupply.mul(8).div(100).mul(70).div(100);
        dayReleaseAmount = foundingRelase.div(360);
        releaseStatus[currentTime] = true;
        _balances[address(this)] = foundingRelase;
        _balances[fundingWalletAddress] = _totalSupply
            .mul(8)
            .div(100)
            .mul(30)
            .div(100);

        _balances[prizePoolWalletAddress] = _totalSupply.mul(70).div(100);
        _balances[crossChainWalletAddress] = _totalSupply.mul(20).div(100);
        _balances[daoWalletAddress] = _totalSupply.mul(2).div(100);

        isMarketPair[address(uniswapPair)] = true;
        isTxLimitExempt[msg.sender] = true;
        isTxLimitExempt[address(this)] = true;
        //添加白名单
        isTxLimitExempt[fundingWalletAddress] = true;
        isTxLimitExempt[crossChainWalletAddress] = true;
        isTxLimitExempt[prizePoolWalletAddress] = true;
        isTxLimitExempt[daoWalletAddress] = true;
        isTxLimitExempt[fistBonusAddress] = true;

        emit Transfer(
            address(0),
            fundingWalletAddress,
            _balances[fundingWalletAddress]
        );

        emit Transfer(
            address(0),
            crossChainWalletAddress,
            _balances[crossChainWalletAddress]
        );
        emit Transfer(
            address(0),
            prizePoolWalletAddress,
            _balances[prizePoolWalletAddress]
        );
        emit Transfer(
            address(0),
            daoWalletAddress,
            _balances[daoWalletAddress]
        );
    }

    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    modifier onlyFactory() {
        require(operators[msg.sender], "BHC: only facotry can operator");
        _;
    }

    function setLiquifyEnable(bool newValue) public onlyOwner {
        liquifyEnable = newValue;
    }

    function setRelationSwitch(bool newValue) public onlyOwner {
        relationSwitch = newValue;
    }

    function setFundingWalletAddress(address newValue) public onlyOwner {
        fundingWalletAddress = payable(newValue);
    }

    function setCrossChainWalletAddress(address newValue) public onlyOwner {
        crossChainWalletAddress = payable(newValue);
    }

    function setPrizePoolWalletAddress(address newValue) public onlyOwner {
        prizePoolWalletAddress = payable(newValue);
    }

    function setDaoWalletAddress(address newValue) public onlyOwner {
        daoWalletAddress = payable(newValue);
    }

    function setRelationUsdtLimit(uint256 newValue) public onlyOwner {
        relationUsdtLimit = newValue.mul(1e18);
    }

    function setPancakeTradeFee(uint256 destroyFee, uint256 fistBounsFee)
        public
        onlyOwner
    {
        _destroyFee = destroyFee;
        _fistBounsFee = fistBounsFee;
        _refreshPancakeTradeFee();
    }

    function setMarketingShares(
        uint256[] memory levelIds,
        uint256[] memory shareFees
    ) public onlyOwner {
        require(levelIds.length == shareFees.length);
        for (uint256 i = 0; i < levelIds.length; i++) {
            _marketingShares[levelIds[i]] = shareFees[i];
        }
        _refreshPancakeTradeFee();
    }

    function _refreshPancakeTradeFee() internal {
        _totalTaxIfPancakeTrading = 0;
        _totalMarketingShareFee = 0;
        _totalTaxIfPancakeTrading = _destroyFee.add(_fistBounsFee);
        for (uint256 i = 0; i < _marketingShares.length; i++) {
            _totalTaxIfPancakeTrading = _totalTaxIfPancakeTrading.add(
                _marketingShares[i]
            );
            _totalMarketingShareFee = _totalMarketingShareFee.add(
                _marketingShares[i]
            );
        }
    }

    function setTranferDestroyFee(uint256 newValue) public onlyOwner {
        _totalTaxIfTrading = newValue;
    }

    event SwapTokensForToken(uint256 amountIn, address[] path);
    event BindRelation(
        address indexed user,
        address indexed leader,
        uint256 timestamp
    );

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function setOperator(address user, bool newValue) public onlyOwner {
        operators[user] = newValue;
    }

    function getCurrentTime() internal view returns (uint256) {
        uint256 base = block.timestamp.sub(baseTime).div(1 days);
        return base.mul(1 days).add(baseTime);
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function setMarketPairStatus(address account, bool newValue)
        public
        onlyOwner
    {
        isMarketPair[account] = newValue;
    }

    function setIsTxLimitExempt(address holder, bool exempt)
        external
        onlyOwner
    {
        isTxLimitExempt[holder] = exempt;
    }

    function getCirculatingSupply() public view returns (uint256) {
        return _totalSupply.sub(balanceOf(deadAddress));
    }

    function transferToAddressETH(address payable recipient, uint256 amount)
        private
    {
        recipient.transfer(amount);
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) private returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        _relaseFounding();
        if (inSwapAndLiquify) {
            return _basicTransfer(sender, recipient, amount);
        }
        if (isTxLimitExempt[sender] || isTxLimitExempt[recipient]) {
            return _basicTransfer(sender, recipient, amount);
        }
        _balances[sender] = _balances[sender].sub(
            amount,
            "Insufficient Balance"
        );
        uint256 finalAmount = takeFee(sender, recipient, amount);
        _balances[recipient] = _balances[recipient].add(finalAmount);
        emit Transfer(sender, recipient, finalAmount);
        return true;
    }

    function _basicTransfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(
            amount,
            "Insufficient Balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }

    function _relaseFounding() internal {
        uint256 currentTime = getCurrentTime();
        if (currentTime > relaseEndTime || _balances[address(this)] < dayReleaseAmount) {
            return;
        }
        if (!releaseStatus[currentTime]) {
            releaseStatus[currentTime] = true;
            _balances[address(this)] = _balances[address(this)].sub(
                dayReleaseAmount
            );
            _balances[fundingWalletAddress] = _balances[fundingWalletAddress]
                .add(dayReleaseAmount);
            emit Transfer(
                address(this),
                fundingWalletAddress,
                dayReleaseAmount
            );
        }
    }

    function takeFee(
        address sender,
        address recipient,
        uint256 amount
    ) internal returns (uint256) {
        uint256 feeAmount = 0;
        bool isPancakeTrading = false;
        if (isMarketPair[sender] || isMarketPair[recipient]) {
            isPancakeTrading = true;
            feeAmount = amount.mul(_totalTaxIfPancakeTrading).div(1000);
        } else {
            feeAmount = amount.mul(_totalTaxIfTrading).div(1000);
        }
        if (feeAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(feeAmount);
            emit Transfer(sender, address(this), feeAmount);
        }

        if (isPancakeTrading) {
            //销毁
            _destroy(amount, _destroyFee);
            if (isMarketPair[recipient] && liquifyEnable) {
                // 兑换fist奖金
                _swapFistBounus(amount);
            } else if (isMarketPair[sender] && liquifyEnable) {
                uint256 fistBounds = amount.mul(_fistBounsFee).div(1000);
                if (fistBounds > 0) {
                    _balances[address(this)] = _balances[address(this)].sub(
                        fistBounds
                    );
                    _balances[fistBonusAddress] = _balances[fistBonusAddress]
                        .add(fistBounds);
                    emit Transfer(address(this), fistBonusAddress, fistBounds);
                }
            }
            //推广分红
            _distributionShares(recipient, amount);
        } else {
            //销毁
            _destroy(amount, _totalTaxIfTrading);
            //绑定层级关系
            _bindRelation(sender, recipient, amount);
        }
        return amount.sub(feeAmount);
    }

    //销毁
    function _destroy(uint256 amount, uint256 _destroyFeeRate) internal {
        uint256 feeAmount = amount.mul(_destroyFeeRate).div(1000);
        if (feeAmount > 0) {
            _balances[deadAddress] = _balances[deadAddress].add(feeAmount);
            _balances[address(this)] = _balances[address(this)].sub(feeAmount);
            emit Transfer(address(this), deadAddress, feeAmount);
        }
    }

    //fist币分红
    function _swapFistBounus(uint256 amount) internal {
        uint256 feeAmount = amount.mul(_fistBounsFee).div(1000);
        if (feeAmount > 0) {
            _balances[address(this)] = _balances[address(this)].sub(feeAmount);
            swapTokensForToken(feeAmount, fistBonusAddress);
        }
    }

    function _bindRelation(
        address sender,
        address recipient,
        uint256 amount
    ) internal {
        if (
            !relationSwitch ||
            isMarketPair[sender] ||
            isMarketPair[recipient] ||
            sender == recipient ||
            isTxLimitExempt[sender] ||
            existRefer[recipient]
        ) {
            return;
        }
        if (referers[recipient] == address(0)) {
            uint256 tokenPrice = IBscPrice(bscPriceAddress).getTokenUsdtPrice(
                address(this)
            );
            uint256 transferUsdtAmount = tokenPrice.mul(amount);
            if (transferUsdtAmount >= relationUsdtLimit) {
                referers[recipient] = sender;
                if (!existRefer[sender]) {
                    existRefer[sender] = true;
                }
                emit BindRelation(recipient, sender, block.timestamp);
            }
        }
    }

    receive() external payable {}

    function getRefers(address sender, uint256 _high)
        public
        view
        returns (address)
    {
        address _leader = sender;
        for (uint256 i = 0; i <= _high; i++) {
            _leader = referers[_leader];
            if (_leader == address(0)) {
                break;
            }
        }
        return _leader;
    }

    //推广分红
    function _distributionShares(address recipient, uint256 amount) internal {
        uint256 feeAmount = amount.mul(_totalMarketingShareFee).div(1000);
        if (feeAmount == 0) {
            return;
        }
        _balances[address(this)] = _balances[address(this)].sub(feeAmount);
        bool _leaderExist = true;
        for (uint256 i = 0; i < _marketingShares.length; i++) {
            uint256 _shareRate = _marketingShares[i];
            if (_shareRate == 0) {
                continue;
            }
            uint256 shareFee = amount.mul(_shareRate).div(1000);
            address leader = address(0);
            if (_leaderExist) {
                leader = getRefers(recipient, i);
                if (leader == address(0)) {
                    _leaderExist = false;
                }
            }
            if (!_leaderExist) {
                _balances[deadAddress] = _balances[deadAddress].add(shareFee);
                emit Transfer(address(this), deadAddress, shareFee);
            } else {
                _balances[leader] = _balances[leader].add(shareFee);
                emit Transfer(address(this), leader, shareFee);
            }
        }
    }

    function swapTokensForToken(uint256 tokenAmount, address to) internal {
        address[] memory path = new address[](4);
        path[0] = address(this);
        path[1] = 0x55d398326f99059fF775485246999027B3197955;
        path[2] = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
        path[3] = fistToken;
        _approve(address(this), address(uniswapV2Router), _totalSupply);

        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of token
            path,
            to, // The contract
            block.timestamp
        );
        emit SwapTokensForToken(tokenAmount, path);
    }

    function devoteDestroy(address user, uint256 amount)
        public
        onlyFactory
        returns (bool)
    {
        require(_balances[user] >= amount, "BHC: destroy Insufficient balance");
        _balances[user] = _balances[user].sub(amount);
        _balances[deadAddress] = _balances[deadAddress].add(amount);
        emit Transfer(user, deadAddress, amount);
        return true;
    }
}