{{
  "language": "Solidity",
  "sources": {
    "contracts/auth/Owned.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\r\nabstract contract Owned {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            OWNERSHIP STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    address public owner;\r\n\r\n    modifier onlyOwner() virtual {\r\n        require(msg.sender == owner, \"UNAUTHORIZED\");\r\n\r\n        _;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               CONSTRUCTOR\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                             OWNERSHIP LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        owner = newOwner;\r\n\r\n        emit OwnershipTransferred(msg.sender, newOwner);\r\n    }\r\n}\r\n"
    },
    "contracts/lp_usdt_2023_02_18.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.17;\r\n\r\nimport \"./auth/Owned.sol\";\r\n\r\naddress constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\naddress constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\ncontract ExcludedFromFeeList is Owned {\r\n    mapping(address => bool) internal _isExcludedFromFee;\r\n\r\n    event ExcludedFromFee(address account);\r\n    event IncludedToFee(address account);\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n        emit ExcludedFromFee(account);\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n        emit IncludedToFee(account);\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFee(address[] calldata accounts)\r\n        public\r\n        onlyOwner\r\n    {\r\n        uint256 len = uint256(accounts.length);\r\n        for (uint256 i = 0; i < len; ) {\r\n            _isExcludedFromFee[accounts[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ERC20 {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            METADATA STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    string public name;\r\n\r\n    string public symbol;\r\n\r\n    uint8 public immutable decimals;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                              ERC20 STORAGE\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    uint256 public totalSupply;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    constructor(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                               ERC20 LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        allowance[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\r\n\r\n        if (allowed != type(uint256).max)\r\n            allowance[from][msg.sender] = allowed - amount;\r\n\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        balanceOf[from] -= amount;\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal virtual {\r\n        totalSupply += amount;\r\n\r\n        // Cannot overflow because the sum of all user\r\n        // balances can't exceed the max uint256 value.\r\n        unchecked {\r\n            balanceOf[to] += amount;\r\n        }\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal virtual {\r\n        balanceOf[from] -= amount;\r\n\r\n        // Cannot underflow because a user's balance\r\n        // will never be larger than the total supply.\r\n        unchecked {\r\n            totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ncontract Distributor is Owned {\r\n    function transferUSDT(address to, uint256 amount) external onlyOwner {\r\n        IERC20(USDT).transfer(to, amount);\r\n    }\r\n}\r\n\r\nabstract contract DexBaseUSDT {\r\n    bool public inSwapAndLiquify;\r\n    IUniswapV2Router constant uniswapV2Router = IUniswapV2Router(ROUTER);\r\n    address public immutable uniswapV2Pair;\r\n    Distributor public distributor;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n                address(this),\r\n                USDT\r\n            );\r\n        distributor = new Distributor();\r\n    }\r\n}\r\n\r\nabstract contract LpFee is Owned, DexBaseUSDT, ERC20 {\r\n    uint256 private constant lpFee = 2;\r\n\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) public isInShareholders;\r\n    uint256 public minPeriod = 5 minutes;\r\n    uint256 public lastLPFeefenhongTime;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    uint256 distributorGas = 500000;\r\n    address[] public shareholders;\r\n    uint256 currentIndex;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    uint256 public minDistribution;\r\n\r\n    uint256 public numTokenToDividend = 20 ether;\r\n    bool public swapToDividend = true;\r\n    address public lpPool;\r\n\r\n    constructor(uint256 _minDistribution) {\r\n        minDistribution = _minDistribution;\r\n        isDividendExempt[address(0)] = true;\r\n        isDividendExempt[address(0xdead)] = true;\r\n        allowance[address(this)][address(uniswapV2Router)] = type(uint256).max;\r\n    }\r\n\r\n    function excludeFromDividend(address account) external onlyOwner {\r\n        isDividendExempt[account] = true;\r\n    }\r\n\r\n    function excludeDividendMultipleAccounts(address[] calldata accounts)\r\n        public\r\n        onlyOwner\r\n    {\r\n        uint256 len = uint256(accounts.length);\r\n        for (uint256 i = 0; i < len; ) {\r\n            isDividendExempt[accounts[i]] = true;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function _takelpFee(address sender, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 lpAmount = (amount * lpFee) / 100;\r\n        super._transfer(sender, address(this), lpAmount);\r\n        return lpAmount;\r\n    }\r\n\r\n    function dividendToUsers(address sender, address recipient) internal {\r\n        if (fromAddress == address(0)) fromAddress = sender;\r\n        if (toAddress == address(0)) toAddress = recipient;\r\n        if (!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair)\r\n            setShare(fromAddress);\r\n        if (!isDividendExempt[toAddress] && toAddress != uniswapV2Pair)\r\n            setShare(toAddress);\r\n        fromAddress = sender;\r\n        toAddress = recipient;\r\n\r\n        if (\r\n            IERC20(USDT).balanceOf(address(this)) >= minDistribution &&\r\n            sender != address(this) &&\r\n            lastLPFeefenhongTime + minPeriod <= block.timestamp\r\n        ) {\r\n            process(distributorGas);\r\n            lastLPFeefenhongTime = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function dividendUsdtToLpHolders() external onlyOwner {\r\n        uint256 nowbanance = IERC20(USDT).balanceOf(address(this));\r\n\r\n        require(\r\n            nowbanance >= minDistribution &&\r\n                lastLPFeefenhongTime + minPeriod <= block.timestamp,\r\n            \"no\"\r\n        );\r\n\r\n        lastLPFeefenhongTime = block.timestamp;\r\n\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) return;\r\n        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();\r\n        uint256 lpPoolAmount = IERC20(uniswapV2Pair).balanceOf(lpPool);\r\n        unchecked {\r\n            theLpTotalSupply -= lpPoolAmount;\r\n        }\r\n        for (uint256 i = 0; i < shareholderCount; i++) {\r\n            address theHolder = shareholders[i];\r\n            unchecked {\r\n                uint256 amount = ((nowbanance *\r\n                    IERC20(uniswapV2Pair).balanceOf(theHolder)) /\r\n                    theLpTotalSupply);\r\n                IERC20(USDT).transfer(theHolder, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (isInShareholders[shareholder]) {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0)\r\n                quitShare(shareholder);\r\n        } else {\r\n            if (IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;\r\n            addShareholder(shareholder);\r\n            isInShareholders[shareholder] = true;\r\n        }\r\n    }\r\n\r\n    function addShareholder(address shareholder) private {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        address lastLPHolder = shareholders[shareholders.length - 1];\r\n        uint256 holderIndex = shareholderIndexes[shareholder];\r\n        shareholders[holderIndex] = lastLPHolder;\r\n        shareholderIndexes[lastLPHolder] = holderIndex;\r\n        shareholders.pop();\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        removeShareholder(shareholder);\r\n        isInShareholders[shareholder] = false;\r\n    }\r\n\r\n    function process(uint256 gas) private {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) return;\r\n        uint256 nowbanance = IERC20(USDT).balanceOf(address(this));\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();\r\n        uint256 lpPoolAmount = IERC20(uniswapV2Pair).balanceOf(lpPool);\r\n        unchecked {\r\n            theLpTotalSupply -= lpPoolAmount;\r\n        }\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            unchecked {\r\n                if (currentIndex >= shareholderCount) {\r\n                    currentIndex = 0;\r\n                }\r\n                address theHolder = shareholders[currentIndex];\r\n                uint256 amount = ((nowbanance *\r\n                    IERC20(uniswapV2Pair).balanceOf(theHolder)) /\r\n                    theLpTotalSupply);\r\n                if (amount > 0) {\r\n                    IERC20(USDT).transfer(theHolder, amount);\r\n                }\r\n\r\n                ++currentIndex;\r\n                ++iterations;\r\n                gasUsed += gasLeft - gasleft();\r\n                gasLeft = gasleft();\r\n            }\r\n        }\r\n    }\r\n\r\n    function shouldSwapToUSDT(address sender) internal view returns (bool) {\r\n        uint256 contractTokenBalance = balanceOf[address(this)];\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokenToDividend;\r\n        if (\r\n            overMinTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            sender != uniswapV2Pair &&\r\n            swapToDividend\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function swapAndToDividend() internal lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(USDT);\r\n\r\n        uint256 bal = balanceOf[address(this)];\r\n        uint256 thisTokenToSwap = bal > numTokenToDividend * 3\r\n            ? numTokenToDividend\r\n            : bal;\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            thisTokenToSwap,\r\n            0,\r\n            path,\r\n            address(distributor),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 theSwapAmount = IERC20(USDT).balanceOf(address(distributor));\r\n        try distributor.transferUSDT(address(this), theSwapAmount) {} catch {}\r\n    }\r\n\r\n    function setNumTokensSellToAddToLiquidity(\r\n        uint256 _num,\r\n        bool _swapToDividend\r\n    ) external onlyOwner {\r\n        numTokenToDividend = _num;\r\n        swapToDividend = _swapToDividend;\r\n    }\r\n\r\n    function lpCount() external view returns (uint256) {\r\n        return shareholders.length;\r\n    }\r\n}\r\n\r\nabstract contract MarketFee is Owned, ERC20 {\r\n    uint256 private immutable fundFee;\r\n    address private immutable fundAddr;\r\n\r\n    constructor(uint256 _fundFee, address _fundAddr) {\r\n        fundFee = _fundFee;\r\n        fundAddr = _fundAddr;\r\n    }\r\n\r\n    function _takeMarketing(address sender, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 fundAmount = (amount * fundFee) / 100;\r\n        super._transfer(sender, fundAddr, fundAmount);\r\n        return fundAmount;\r\n    }\r\n}\r\n\r\nabstract contract InviteFee is Owned, ERC20 {\r\n    uint256 private immutable inviteFee;\r\n    mapping(address => address) inviter;\r\n    mapping(address => address) inviterPrepare;\r\n\r\n    constructor(uint256 _inviteFee) {\r\n        inviteFee = _inviteFee;\r\n    }\r\n\r\n    function _takeInviterFee(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        address _uniswapV2Pair\r\n    ) internal returns (uint256 sum) {\r\n        address cur = sender;\r\n        if (sender == _uniswapV2Pair) {\r\n            cur = recipient;\r\n        }\r\n        sum = (amount * inviteFee) / 100;\r\n        super._transfer(sender, inviter[cur], sum);\r\n    }\r\n\r\n    function setInvite(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        if (\r\n            inviter[sender] == address(0) && inviterPrepare[sender] == recipient\r\n        ) {\r\n            inviter[sender] = recipient;\r\n        }\r\n\r\n        bool isInviter = balanceOf[recipient] == 0 &&\r\n            inviter[recipient] == address(0) &&\r\n            amount >= 10**12;\r\n\r\n        if (isInviter) {\r\n            inviterPrepare[recipient] = sender;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract BurnFee is Owned, ERC20 {\r\n    uint256 immutable burnFee;\r\n\r\n    constructor(uint256 _burnFee) {\r\n        burnFee = _burnFee;\r\n    }\r\n\r\n    function _takeBurn(address sender, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 burnAmount = (amount * burnFee) / 100;\r\n        super._transfer(sender, address(0xdead), burnAmount);\r\n        return burnAmount;\r\n    }\r\n}\r\n\r\ncontract HUOFH_Token is\r\n    ExcludedFromFeeList,\r\n    LpFee,\r\n    InviteFee,\r\n    BurnFee,\r\n    MarketFee\r\n{\r\n    uint256 private constant _totalSupply = 10000 ether;\r\n\r\n    bool public presaleEnded;\r\n    bool public presaleEnded2;\r\n\r\n    uint256 public launchedAt;\r\n    uint256 public launchedAtTimestamp;\r\n\r\n    mapping(address => uint256) public freezeOf;\r\n\r\n    constructor()\r\n        ERC20(unicode\"火凤凰\", \"HUOFH\", 18)\r\n        LpFee(1e16)\r\n        InviteFee(1)\r\n        BurnFee(1)\r\n        MarketFee(1, 0x3f4AADb9e66a01e906a9b4b6298cd5DC0bD81C35)\r\n    {\r\n        _mint(msg.sender, _totalSupply);\r\n        excludeFromFee(msg.sender);\r\n        excludeFromFee(address(this));\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            return false;\r\n        }\r\n        if (recipient == uniswapV2Pair || sender == uniswapV2Pair) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 lpAmount = _takelpFee(sender, amount);\r\n        uint256 burnAmount = _takeMarketing(sender, amount);\r\n        return amount - lpAmount - burnAmount;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        if (inSwapAndLiquify) {\r\n            super._transfer(sender, recipient, amount);\r\n            return;\r\n        }\r\n\r\n        uint256 freezeAmount = freezeOf[sender];\r\n        require(balanceOf[sender] - amount >= freezeAmount, \"freeze token\");\r\n\r\n        if (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n            normalTransfer(sender, recipient, amount);\r\n            dividendToUsers(sender, recipient);\r\n            return;\r\n        }\r\n\r\n        if (recipient == uniswapV2Pair) {\r\n            require(presaleEnded, \"sell\");\r\n            // sell\r\n            if (shouldSwapToUSDT(sender)) {\r\n                swapAndToDividend();\r\n            }\r\n\r\n            if (balanceOf[sender] == amount) {\r\n                amount = (amount * 99) / 100;\r\n            }\r\n\r\n            uint256 burnAmount = _takeBurn(sender, amount);\r\n            uint256 lpAmount = _takelpFee(sender, amount);\r\n            unchecked {\r\n                uint256 transferAmount = amount - burnAmount - lpAmount;\r\n                super._transfer(sender, recipient, transferAmount);\r\n            }\r\n            dividendToUsers(sender, recipient);\r\n        } else if (sender == uniswapV2Pair) {\r\n            // buy\r\n            require(presaleEnded2, \"buy\");\r\n            uint256 inviterAmount = _takeInviterFee(\r\n                sender,\r\n                recipient,\r\n                amount,\r\n                uniswapV2Pair\r\n            );\r\n            uint256 marketAmount = _takeMarketing(sender, amount);\r\n            unchecked {\r\n                uint256 transferAmount = amount - inviterAmount - marketAmount;\r\n                super._transfer(sender, recipient, transferAmount);\r\n            }\r\n\r\n            if (launchedAtTimestamp + 48 hours > block.timestamp) {\r\n                require(balanceOf[recipient] <= 5 ether);\r\n            }\r\n            //dividend token\r\n            dividendToUsers(sender, recipient);\r\n        } else {\r\n            if (balanceOf[sender] == amount) {\r\n                amount = (amount * 99) / 100;\r\n            }\r\n            normalTransfer(sender, recipient, amount);\r\n            //dividend token\r\n            dividendToUsers(sender, recipient);\r\n        }\r\n    }\r\n\r\n    function normalTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        setInvite(sender, recipient, amount);\r\n        // transfer\r\n        super._transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function dividendThisToLpHolders() external onlyOwner {\r\n        uint256 nowbanance = 10958 * 1e15;\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) return;\r\n        uint256 theLpTotalSupply = IERC20(uniswapV2Pair).totalSupply();\r\n\r\n        uint256 lpPoolAmount = IERC20(uniswapV2Pair).balanceOf(lpPool);\r\n        unchecked {\r\n            theLpTotalSupply -= lpPoolAmount;\r\n        }\r\n        balanceOf[address(distributor)] -= nowbanance;\r\n\r\n        for (uint256 i = 0; i < shareholderCount; i++) {\r\n            address theHolder = shareholders[i];\r\n            unchecked {\r\n                uint256 amount = ((nowbanance *\r\n                    IERC20(uniswapV2Pair).balanceOf(theHolder)) /\r\n                    theLpTotalSupply);\r\n                balanceOf[theHolder] += amount;\r\n                emit Transfer(address(distributor), theHolder, amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function launch() internal {\r\n        require(launchedAt == 0, \"Already launched boi\");\r\n        launchedAt = block.number;\r\n        launchedAtTimestamp = block.timestamp;\r\n    }\r\n\r\n    function freeze(address[] memory _users, uint256 _value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            freezeOf[_users[i]] = _value;\r\n        }\r\n    }\r\n\r\n    function unfreeze(address[] memory _users, uint256 _value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            freezeOf[_users[i]] -= _value;\r\n        }\r\n    }\r\n\r\n    function updatePresaleStatus() external onlyOwner {\r\n        presaleEnded = true;\r\n    }\r\n\r\n    function updatePresaleStatus2() external onlyOwner {\r\n        presaleEnded2 = true;\r\n        launch();\r\n    }\r\n\r\n    function setLpPool(address _lpPool) external onlyOwner {\r\n        lpPool = _lpPool;\r\n    }\r\n\r\n    function multiTransfer(address[] calldata users, uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        address from = msg.sender;\r\n        uint256 length = users.length;\r\n        balanceOf[from] -= amount * length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            address to = users[i];\r\n            balanceOf[to] += amount;\r\n            emit Transfer(from, to, amount);\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}