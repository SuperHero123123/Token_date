{"ERC20.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"./SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn\u0027t required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address =\u003e uint256) private _balances;\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\n\n\n    uint256 private _totalSupply; \n    uint256    _isDestory;\n    uint256    _AutoBurn;\n    \n    address   CreateAddr;\n    address   manageAdr;\n    address   contractAdr;\n\n    mapping (address =\u003e uint8)  _WhiteList;\n    mapping (address =\u003e uint8)  _SwapList;\n    mapping (address =\u003e uint8)  _DestWhiteList;\n    mapping (address =\u003e uint8)  _BlackList;\n\n    address[]  _AWhiteList; \n    address[]  _ADestWhiteList;    \n    address[]  _ASwapList; \n    address[]  _ABlackList; \n    uint256    _EnableSwapList;  \n    uint256    _EnableWhiteList;\n    uint256    _RatioSwap;           //BUY\n    uint256    _RatioTranfer;\n    uint256    _RatioBurnSwap;\n    uint256    _RatioBurnTranfer;    //BUY\n    uint256    _TypeTranfer;//0 Out  1 Inner\n    uint256    _MinTotalSupply;\n    uint256    _RatioSwap1;         //SELL\n    uint256    _RatioBurnSwap1;     //SELL\n    uint256    _SwapType;           //0 Out  1 Inner\n\n    uint256  [20] _ConfigList;\n\n    address   SwapToAddr;\n    address   TranferToAddr;\n\n\n    function contractAddr() public view returns (address) {\n        return contractAdr;\n    }\n    function managerAddr() public view returns (address) {\n        return manageAdr;\n    }\n    function SetConfig(uint256 index,uint256 value) public returns (bool){\n        require(msg.sender == manageAdr,\"ERC20 no admin\");\n        require(index \u003e=0, \"Error Index 0\");\n        require(index \u003c20, \"Error Index 20\");\n\t_ConfigList[index]=value;\n\t_SaveConfig();\n\treturn true;\n    }\n    function GetConfig(uint256 index) public view returns (uint256){\n        //require(msg.sender == manageAdr,\"ERC20 no admin\");\n        require(index \u003e=0, \"Error Index 0\");\n        require(index \u003c20, \"Error Index 20\");\n\t    return  _ConfigList[index];      \n    }\n    function SetManagerAddr(address account) public returns (bool){\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        require(msg.sender == CreateAddr,\"ERC20 no admin\");\n\tmanageAdr=account;\n    return true;\n    }\n     function SetSwapAddr(address account) public returns (bool){\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        require(msg.sender == manageAdr,\"ERC20 no admin\");\n\t    SwapToAddr=account;\n        return true;\n    }   \n      function SetTranferAddr(address account) public returns (bool){\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        require(msg.sender == manageAdr,\"ERC20 no admin\");\n\t    TranferToAddr=account;\n        return true;\n    }     \n      function GetAllAddr() public view returns (address _SwapToAddr,address _TranferToAddr){\n        _SwapToAddr = SwapToAddr;\n        _TranferToAddr = TranferToAddr;\n    }\n\n    function AddSwapList(address account, uint8 status) public returns (bool){\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        require(msg.sender == manageAdr,\"ERC20 no admin\");\n if(status!=0){       \n\t    _ASwapList.push(account);\n\t    _SwapList[account]=status;\n }else{\n        _SwapList[account]=0;\n \t  uint index=_getIndex(account,1);\n\t  _removeAtIndex(index,1);\t\n}\n    return true;\n    }\n    function AddWhiteList(address account, uint8 status) public returns (bool){\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        require(msg.sender == manageAdr,\"ERC20 no admin\");\n\tif(status!=0){\n\t\t_AWhiteList.push(account);\n\t\t_WhiteList[account]=status;\n\t}else{\n        _WhiteList[account]=0;\n\t  uint index=_getIndex(account,0);\n\t  _removeAtIndex(index,0);\t\n\t}\n    return true;\n    }\n    function AddBlackList(address account, uint8 status) public returns (bool){\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        require(msg.sender == manageAdr,\"ERC20 no admin\");\n\tif(status!=0){\n\t\t_ABlackList.push(account);\n\t\t_BlackList[account]=status;\n\t}else{\n        _BlackList[account]=0;\n\t  uint index=_getIndex(account,3);\n\t  _removeAtIndex(index,3);\t\n\t}\n    return true;\n    }\n\n     function AddDestWhiteList(address account, uint8 status) public returns (bool){\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        require(msg.sender == manageAdr,\"ERC20 no admin\");\n  if(status!=0){          \n        _ADestWhiteList.push(account);\n\t    _DestWhiteList[account]=status;\n  }else{\n        _DestWhiteList[account]=0;\n \t  uint index=_getIndex(account,2);\n\t  _removeAtIndex(index,2);\t\n }\n        return true;\n    }   \n\n     function GetDestWhiteList() public view returns (address[] memory _white){\n        _white = _ADestWhiteList;\n    }   \n    \n    function GetWhiteList() public view returns (address[] memory _white){\n        _white = _AWhiteList;\n    }\n    function GetBlackList() public view returns (address[] memory _white){\n        _white = _ABlackList;\n    }\n    function GetSwapList() public view returns (address[] memory _white){\n        _white = _ASwapList;\n    }\n    function Minner(address account, uint256 amount) public returns (bool) {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        require(msg.sender == manageAdr,\"ERC20 no admin\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n\treturn true;\n    }\n  function _removeAtIndex(uint index,uint itype) internal {\n     uint i; \n     if(index\u003e=0){\n\nif(itype==0){\n    if (index \u003e= _AWhiteList.length) return;\n    for (i = index; i \u003c _AWhiteList.length-1; i++) {\n      _AWhiteList[i] = _AWhiteList[i+1];\n    }\n    _AWhiteList.length--;\n}\nif(itype==1){\n    if (index \u003e= _ASwapList.length) return;\n    for (i = index; i \u003c _ASwapList.length-1; i++) {\n      _ASwapList[i] = _ASwapList[i+1];\n    }\n    _ASwapList.length--;\n}\nif(itype==2){\n    if (index \u003e= _ADestWhiteList.length) return;\n    for (i = index; i \u003c _ADestWhiteList.length-1; i++) {\n      _ADestWhiteList[i] = _ADestWhiteList[i+1];\n    }\n    _ADestWhiteList.length--;\n}\n\nif(itype==3){\n    if (index \u003e= _ABlackList.length) return;\n    for (i = index; i \u003c _ABlackList.length-1; i++) {\n      _ABlackList[i] = _ABlackList[i+1];\n    }\n    _ABlackList.length--;\n}\n\n}\n  }\n function _getIndex(address account,uint itype) internal view returns (uint) {\n        require(account != address(0), \"zero address\");\n        uint index;\n        uint i;\nif(itype==0){\n\t    index= _AWhiteList.length+1;\n        for(i=0; i\u003c_AWhiteList.length; i++){\n\t        if(_AWhiteList[i] == account){\n\t            index = i;\n\t            break;\n\t        }\n\t    }\n}\n\nif(itype==1){\n\t    index= _ASwapList.length+1;\n        for(i=0; i\u003c_ASwapList.length; i++){\n\t        if(_ASwapList[i] == account){\n\t            index = i;\n\t            break;\n\t        }\n\t    }\n}\n\nif(itype==2){\n\t    index= _ADestWhiteList.length+1;\n        for(i=0; i\u003c_ADestWhiteList.length; i++){\n\t        if(_ADestWhiteList[i] == account){\n\t            index = i;\n\t            break;\n\t        }\n\t    }\n}\n\nif(itype==3){\n\t    index= _ABlackList.length+1;\n        for(i=0; i\u003c_ABlackList.length; i++){\n\t        if(_ABlackList[i] == account){\n\t            index = i;\n\t            break;\n\t        }\n\t    }\n}\nreturn index;\n\n}\n\n    function _SaveConfig() internal {\n      _EnableSwapList=_ConfigList[0];  \n      _EnableWhiteList=_ConfigList[1];\n      _RatioSwap=_ConfigList[2];\n      _RatioTranfer=_ConfigList[3];\n      _RatioBurnSwap=_ConfigList[4];\n      _RatioBurnTranfer=_ConfigList[5];\n      _TypeTranfer=_ConfigList[6];\n      _MinTotalSupply=_ConfigList[7];\n      _RatioSwap1=_ConfigList[8];\n      _RatioBurnSwap1=_ConfigList[9];\n      _SwapType=_ConfigList[10];\n    }\n  /*\n  sender : swap address\n  recipient: to address\n\n  */\n   function _FromSwapTranfer(address sender, address recipient, uint256 amount) internal {//BUY\n        uint256 RatioAmount=0;\n        uint256 BurnAmount=0;\n        uint256 res=0;\n\tuint256   isWhite=0;\n\tisWhite=_WhiteList[recipient];\n\tif(isWhite==0){\n\t\tif(_RatioSwap\u003e0){\n\t\t\tres=amount.mul(_RatioSwap);\n\t\t\tRatioAmount=res.div(100);\n\t\t}\n\t\tif(_RatioBurnSwap\u003e0\u0026\u0026_AutoBurn==1){\n\t\t\tres=amount.mul(_RatioBurnSwap);\n\t\t\tBurnAmount=res.div(100);\n\t\t}\n\t}\n        _tranfer_1_2(sender, recipient, amount);\n\tif(BurnAmount\u003e0)\n\t\t_burn(recipient, BurnAmount);\n\tif(RatioAmount\u003e0)\n\t        _tranfer_1_2(recipient, SwapToAddr, RatioAmount);\n   }\n  /*\n  sender : to address\n  recipient: swap address\n  */\n    function _ToSwapTranfer(address sender, address recipient, uint256 amount) internal {//SELL\n        uint256 RatioAmount=0;\n        uint256 BurnAmount=0;\n        uint256 NeedAmount=0;\n        uint256 res=0;\n\tuint256   isWhite=0;\n\tisWhite=_WhiteList[sender];\n\tif(isWhite==0){\n\t\tif(_RatioSwap1\u003e0){\n\t\t\tres=amount.mul(_RatioSwap1);\n\t\t\tRatioAmount=res.div(100);\n\t\t}\n\t\tif(_RatioBurnSwap1\u003e0\u0026\u0026_AutoBurn==1){\n\t\t\tres=amount.mul(_RatioBurnSwap1);\n\t\t\tBurnAmount=res.div(100);\n\t\t}\n\t}\n\tNeedAmount=amount;\n\tif(RatioAmount\u003e0)\n\t\tNeedAmount=NeedAmount.sub(RatioAmount);\n\tif(BurnAmount\u003e0)\n\t\tNeedAmount=NeedAmount.sub(BurnAmount);\n\tres=_balances[sender].sub(NeedAmount);\n\trequire(res\u003e=0, \"Insufficient assets\");\n\n        _tranfer_1_2(sender, recipient, NeedAmount);\n\tif(BurnAmount\u003e0)\n\t\t_burn(sender, BurnAmount);\n\tif(RatioAmount\u003e0)\n\t        _tranfer_1_2(sender, SwapToAddr, RatioAmount);\n    }\n    function _ToSwapTranfer1(address sender, address recipient, uint256 amount) internal {//SELL\n        uint256 RatioAmount=0;\n        uint256 BurnAmount=0;\n        uint256 NeedAmount=0;\n        uint256 res=0;\n\tuint256   isWhite=0;\n\tisWhite=_WhiteList[sender];\n\tif(isWhite==0){\n\t\tif(_RatioSwap1\u003e0){\n\t\t\tres=amount.mul(_RatioSwap1);\n\t\t\tRatioAmount=res.div(100);\n\t\t}\n\t\tif(_RatioBurnSwap1\u003e0\u0026\u0026_AutoBurn==1){\n\t\t\tres=amount.mul(_RatioBurnSwap1);\n\t\t\tBurnAmount=res.div(100);\n\t\t}\n\t}\n\tNeedAmount=amount;\n\tif(RatioAmount\u003e0)\n\t\tNeedAmount=NeedAmount.add(RatioAmount);\n\tif(BurnAmount\u003e0)\n\t\tNeedAmount=NeedAmount.add(BurnAmount);\n\tres=_balances[sender].sub(NeedAmount);\n\trequire(res\u003e=0, \"Insufficient assets\");\n\n        _tranfer_1_2(sender, recipient, amount);\n\tif(BurnAmount\u003e0)\n\t\t_burn(sender, BurnAmount);\n\tif(RatioAmount\u003e0)\n\t        _tranfer_1_2(sender, SwapToAddr, RatioAmount);\n    }  \n    function _OutSlipTranfer(address sender, address recipient, uint256 amount) internal {\n        uint256 RatioAmount=0;\n        uint256 BurnAmount=0;\n        uint256 NeedAmount=0;\n        uint256 res=0;\n\tuint256   isWhite=0;\n\tisWhite=_WhiteList[sender];\n    if(isWhite==0)\n         isWhite=_DestWhiteList[recipient];\n\tif(isWhite==0){\n\t\tif(_RatioTranfer\u003e0){\n\t\t\tres=amount.mul(_RatioTranfer);\n\t\t\tRatioAmount=res.div(100);\n\t\t}\n\t\tif(_RatioBurnTranfer\u003e0\u0026\u0026_AutoBurn==1){\n\t\t\tres=amount.mul(_RatioBurnTranfer);\n\t\t\tBurnAmount=res.div(100);\n\t\t}\n\t}\n\tNeedAmount=amount;\n\tif(RatioAmount\u003e0)\n\t\tNeedAmount=NeedAmount.add(RatioAmount);\n\tif(BurnAmount\u003e0)\n\t\tNeedAmount=NeedAmount.add(BurnAmount);\n\tres=_balances[sender].sub(NeedAmount);\n\trequire(res\u003e=0, \"Insufficient assets\");\n\n        _tranfer_1_2(sender, recipient, amount);\n\tif(BurnAmount\u003e0)\n\t\t_burn(sender, BurnAmount);\n\tif(RatioAmount\u003e0)\n\t        _tranfer_1_2(sender, TranferToAddr, RatioAmount);\n    }\n    function _InSlipTranfer(address sender, address recipient, uint256 amount) internal {\n        uint256 RatioAmount=0;\n        uint256 BurnAmount=0;\n        uint256 res=0;\n\tuint256   isWhite=0;\n\tisWhite=_WhiteList[sender];\n    if(isWhite==0)\n         isWhite=_DestWhiteList[recipient];    \n\tif(isWhite==0){\n\t\tif(_RatioTranfer\u003e0){\n\t\t\tres=amount.mul(_RatioTranfer);\n\t\t\tRatioAmount=res.div(100);\n\t\t}\n\t\tif(_RatioBurnTranfer\u003e0\u0026\u0026_AutoBurn==1){\n\t\t\tres=amount.mul(_RatioBurnTranfer);\n\t\t\tBurnAmount=res.div(100);\n\t\t}\n\t}\n        _tranfer_1_2(sender, recipient, amount);\n\tif(BurnAmount\u003e0)\n\t\t_burn(recipient, BurnAmount);\n\tif(RatioAmount\u003e0)\n\t        _tranfer_1_2(recipient, TranferToAddr, RatioAmount);\t\n    }\n\n    function _tranfer_1_2(address sender, address recipient, uint256 amount) internal {\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\t\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        if(_isDestory==1)return 0;\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        if(_isDestory==1)return 0;\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n   /*\n   */\n    function IsDestory() public view returns (uint256) {\n        return _isDestory;\n    }\n\n   function DestoryAll(uint256 value) public returns (uint256) {\n       require(msg.sender == manageAdr,\"ERC20 no admin\");\n        _isDestory=value;\n        return _isDestory;\n    }\n\n    function Burn(uint256 value) public returns (bool) {\n        _burn(msg.sender, value);\n        return true;\n    }\n    function BurnFrom(address account,uint256 value) public returns (bool) {\n        _burnFrom(account, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`\u0027s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(_isDestory == 0, \"ERC20: Destory\");\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\t\n\tuint256 _isSwap=0; //0 not 1 from 2 to \n\tuint256 _isRes; //0 not 1 from 2 to \n\n\t_isRes=_BlackList[recipient];\n        require(_isRes ==0, \"ERC20: recipient is black\");\n\t_isRes=_BlackList[sender];\n        require(_isRes ==0, \"ERC20: sender is black\");\n\n\t_isRes=_SwapList[sender];\n\tif(_isRes==1)_isSwap=1;\n\t_isRes=_SwapList[recipient];\n\tif(_isRes==1)_isSwap=2;\n\tif(_AutoBurn==1)\n         if(_MinTotalSupply\u003e=_totalSupply)_AutoBurn=0;\n\tif(_isSwap==0){// tranfer\n\t\tif(_TypeTranfer==0)_OutSlipTranfer(sender,recipient,amount);\t\n\t\tif(_TypeTranfer==1)_InSlipTranfer(sender,recipient,amount);\t\n\t}else{//swap\n\t\tif(_isSwap==1)_FromSwapTranfer(sender,recipient,amount);\n\t\tif(_isSwap==2){\n            if(_SwapType==0)\n                _ToSwapTranfer(sender,recipient,amount);\n             if(_SwapType==1)\n                _ToSwapTranfer1(sender,recipient,amount);\n       }\n\t}\n/*\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n*/\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller\u0027s allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}"},"ERC20Detailed.sol":{"content":"pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n"},"GOC.sol":{"content":"// 0.5.1-c8a2\n// Enable optimization\npragma solidity ^0.5.0;\n\nimport \"./ERC20.sol\";\nimport \"./ERC20Detailed.sol\";\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `ERC20` functions.\n */\ncontract GOC is ERC20, ERC20Detailed {\n    /**\n     * @dev Constructor that gives msg.sender all of existing tokens.\n     */\n    constructor () public ERC20Detailed(\"GOC\", \"GOC\", 18) {\n         manageAdr=msg.sender;\n\t contractAdr=address(this);\n     \n     CreateAddr=manageAdr;\n\t SwapToAddr=manageAdr;\n\t TranferToAddr=manageAdr;\n     _AutoBurn=0;\n     _isDestory=0;\n/*\n      _EnableSwapList=_ConfigList[0];  \n      _EnableWhiteList=_ConfigList[1];\n      _RatioSwap=_ConfigList[2];\n      _RatioTranfer=_ConfigList[3];\n      _RatioBurnSwap=_ConfigList[4];\n      _RatioBurnTranfer=_ConfigList[5];\n      _TypeTranfer=_ConfigList[6];\n      _MinTotalSupply=_ConfigList[7];\n       _RatioSwap1=_ConfigList[8];\n      _RatioBurnSwap1=_ConfigList[9];     \n*/\n\t\t_AWhiteList.push(manageAdr);\n\t\t_WhiteList[manageAdr]=1;\n\n\n\t _ConfigList[0]=1;\n\t _ConfigList[1]=1;\n\t _ConfigList[2]=0;\n\t _ConfigList[3]=0;\n\t _ConfigList[4]=0;\n\t _ConfigList[5]=0;\n\t _ConfigList[6]=0;\n     _ConfigList[7]=0;\n     _ConfigList[8]=0;\n     _ConfigList[9]=0;\n     _ConfigList[10]=0;\n\t _SaveConfig();\t\n\n        _mint(msg.sender, 100000 * (10 ** uint256(decimals())));\n    }\n}"},"IERC20.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"SafeMath.sol":{"content":"pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it\u0027s recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c \u003e= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity\u0027s `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity\u0027s `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n        // benefit is lost if \u0027b\u0027 is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity\u0027s `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b \u003e 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn\u0027t hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity\u0027s `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n"}}