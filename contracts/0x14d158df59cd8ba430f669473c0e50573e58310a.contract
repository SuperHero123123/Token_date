{"Utils.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length \u003e 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private asdasd;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function waiveOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n}\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}"},"Viralup.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./Utils.sol\";\r\n\r\ncontract ViralUp is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    \r\n    string private _name = \"VIRALUP\";\r\n    string private _symbol = \"VIRAL\";\r\n    uint8 private _decimals = 18;\r\n\r\n\r\n    address payable public marketingWalletAddress = payable(0x8B78D8E75753972F771f8b29AB673225C0a32151);\r\n    address payable public nftWalletAddress = payable(0xC1955B4500a3015dc8Daea60870C9a4fA995F964);\r\n    address payable public appWalletAddress = payable(0x31Ec9a8Caaf3ff25E7038BcC8d673eD3aB94b134);\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    \r\n    mapping (address =\u003e uint256) _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    \r\n    mapping (address =\u003e bool) public isExcludedFromFee;\r\n    mapping (address =\u003e bool) public isMarketPair;\r\n\r\n    uint256 public _buyLiquidityFee = 0;\r\n    uint256 public _buyMarketingFee = 2;\r\n    uint256 public _buyNftFee = 1;\r\n    uint256 public _buyAppFee = 2;\r\n    \r\n    uint256 public _sellLiquidityFee = 4;\r\n    uint256 public _sellMarketingFee = 5;\r\n    uint256 public _sellNftFee = 2;\r\n    uint256 public _sellAppFee = 4;\r\n\r\n    uint256 public _liquidityShare = 10;\r\n    uint256 public _marketingShare = 45;\r\n    uint256 public _nftShare = 15;\r\n    uint256 public _appShare = 30;\r\n\r\n    uint256 public _totalTaxIfBuying = 5;\r\n    uint256 public _totalTaxIfSelling = 15;\r\n    uint256 public _totalDistributionShares = 100;\r\n\r\n    uint256 private _totalSupply =  100000000 * 10**_decimals;           \r\n    uint256 private minimumTokensBeforeSwap = 1 * 10**_decimals; \r\n\r\n    IDEXRouter public idexV2Router;\r\n    address public idexPair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public swapAndLiquifyByLimitOnly = true;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    event SwapETHForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n\r\n    event inSwapAndLiquifyStatus(bool p);\r\n    event stepLiquify(bool overMinimumTokenBalanceStatus,bool inSwapAndLiquifyStatus, bool isMarketPair_sender, bool swapAndLiquifyEnabledStatus);\r\n    event stepFee(bool p);\r\n\r\n    event tokenForNft(uint256 amount);\r\n    event tokenForApp(uint256 amount);\r\n    event marketingGetBnb(uint256 amount);\r\n    event liquidityGetBnb(uint256 amount);\r\n    event eventSwapAndLiquify(uint256 amount);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n        IDEXRouter _idexV2Router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        idexPair = IDEXFactory(_idexV2Router.factory())\r\n            .createPair(address(this), _idexV2Router.WETH());\r\n\r\n        idexV2Router = _idexV2Router;\r\n        _allowances[address(this)][address(idexV2Router)] = _totalSupply;\r\n\r\n        isExcludedFromFee[owner()] = true;\r\n        isExcludedFromFee[address(this)] = true;\r\n        \r\n        _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyNftFee).add(_buyAppFee);\r\n        _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellNftFee).add(_sellAppFee);\r\n        _totalDistributionShares = _liquidityShare.add(_marketingShare).add(_nftShare).add(_appShare);\r\n\r\n        isMarketPair[address(idexPair)] = true;\r\n\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\r\n        return minimumTokensBeforeSwap;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setMarketPairStatus(address account, bool newValue) public onlyOwner {\r\n        isMarketPair[account] = newValue;\r\n    }\r\n\r\n    \r\n    function setIsExcludedFromFee(address account, bool newValue) public onlyOwner {\r\n        isExcludedFromFee[account] = newValue;\r\n    }\r\n\r\n\r\n    function setBuyTaxes(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newNftTax, uint256 newAppTax) external onlyOwner() {\r\n        require(newLiquidityTax.add(newMarketingTax).add(newNftTax).add(newAppTax) \u003c= 18, \"Tax exceeds the 18%.\");\r\n        _buyLiquidityFee = newLiquidityTax;\r\n        _buyMarketingFee = newMarketingTax;\r\n        _buyNftFee = newNftTax;\r\n        _buyAppFee = newAppTax;\r\n\r\n        _totalTaxIfBuying = _buyLiquidityFee.add(_buyMarketingFee).add(_buyNftFee).add(_buyAppFee);\r\n    }\r\n\r\n    function setSelTaxes(uint256 newLiquidityTax, uint256 newMarketingTax, uint256 newNftTax, uint256 newAppTax) external onlyOwner() {\r\n        require(newLiquidityTax.add(newMarketingTax).add(newNftTax).add(newAppTax) \u003c= 18, \"Tax exceeds the 18%.\");\r\n        _sellLiquidityFee = newLiquidityTax;\r\n        _sellMarketingFee = newMarketingTax;\r\n        _sellNftFee = newNftTax;\r\n        _sellAppFee=newAppTax;\r\n\r\n        _totalTaxIfSelling = _sellLiquidityFee.add(_sellMarketingFee).add(_sellNftFee).add(_sellAppFee);\r\n    }\r\n    \r\n    function setDistributionSettings(uint256 newLiquidityShare, uint256 newMarketingShare, uint256 newNftShare,uint256 newAppShare) external onlyOwner() {\r\n        require(newLiquidityShare.add(newMarketingShare).add(newNftShare).add(newAppShare) \u003c= 100, \"Share exceeds the 100%.\");\r\n        _liquidityShare = newLiquidityShare;\r\n        _marketingShare = newMarketingShare;\r\n        _nftShare = newNftShare;\r\n        _appShare=newAppShare;\r\n\r\n        _totalDistributionShares = _liquidityShare.add(_marketingShare).add(_nftShare).add(_appShare);\r\n    }\r\n\r\n    function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner() {\r\n        minimumTokensBeforeSwap = newLimit;\r\n    }\r\n\r\n    function setMarketingWalletAddress(address newAddress) external onlyOwner() {\r\n        marketingWalletAddress = payable(newAddress);\r\n    }\r\n\r\n    function setNftWalletAddress(address newAddress) external onlyOwner() {\r\n        nftWalletAddress = payable(newAddress);\r\n    }\r\n\r\n    function setAppWalletAddress(address newAddress) external onlyOwner() {\r\n        appWalletAddress = payable(newAddress);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function setSwapAndLiquifyByLimitOnly(bool newValue) public onlyOwner {\r\n        swapAndLiquifyByLimitOnly = newValue;\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(deadAddress));\r\n    }\r\n\r\n    function transferToAddressETH(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n        emit inSwapAndLiquifyStatus(inSwapAndLiquify);\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if(inSwapAndLiquify)\r\n        { \r\n            return _basicTransfer(sender, recipient, amount); \r\n        }\r\n        else\r\n        {            \r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool overMinimumTokenBalance = contractTokenBalance \u003e= minimumTokensBeforeSwap;\r\n            emit stepLiquify(overMinimumTokenBalance,!inSwapAndLiquify,!isMarketPair[sender],swapAndLiquifyEnabled);\r\n            if (overMinimumTokenBalance \u0026\u0026 !inSwapAndLiquify \u0026\u0026 !isMarketPair[sender] \u0026\u0026 swapAndLiquifyEnabled) \r\n            {\r\n                if(swapAndLiquifyByLimitOnly)\r\n                    contractTokenBalance = minimumTokensBeforeSwap;\r\n                swapAndLiquify(contractTokenBalance);    \r\n            }\r\n\r\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n            uint256 finalAmount = (isExcludedFromFee[sender] || isExcludedFromFee[recipient]) ? \r\n                                         amount : takeFee(sender, recipient, amount);\r\n\r\n            _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tAmount) private lockTheSwap {\r\n        \r\n        uint256 tokensForLP = tAmount.mul(_liquidityShare).div(_totalDistributionShares).div(2);\r\n        uint256 tokensForNft = tAmount.mul(_nftShare).div(_totalDistributionShares);\r\n        uint256 tokensForApp = tAmount.mul(_appShare).div(_totalDistributionShares);\r\n\r\n        uint256 tokensForSwap = tAmount.sub(tokensForLP).sub(tokensForNft).sub(tokensForApp);\r\n\r\n        swapTokensForEth(tokensForSwap);\r\n\r\n        uint256 amountReceived = address(this).balance;\r\n        emit eventSwapAndLiquify(amountReceived);\r\n\r\n        uint256 totalBNBFee = _totalDistributionShares.sub(_liquidityShare.div(2));\r\n        uint256 amountBNBLiquidity = amountReceived.mul(_liquidityShare).div(totalBNBFee).div(2);\r\n        uint256 amountBNBMarketing = amountReceived.sub(amountBNBLiquidity);\r\n\r\n        emit marketingGetBnb(amountBNBMarketing);\r\n        emit liquidityGetBnb(amountBNBLiquidity);\r\n        emit tokenForNft(tokensForNft);\r\n        emit tokenForApp(tokensForApp);\r\n\r\n        if(tokensForApp\u003e0)\r\n            _basicTransfer(address(this),appWalletAddress,tokensForApp);\r\n    \r\n        if(tokensForNft \u003e0)\r\n            _basicTransfer(address(this),nftWalletAddress,tokensForNft);\r\n\r\n        if(amountBNBMarketing \u003e 0)\r\n            transferToAddressETH(marketingWalletAddress, amountBNBMarketing);\r\n\r\n        if(amountBNBLiquidity \u003e 0 \u0026\u0026 tokensForLP \u003e 0)\r\n            addLiquidity(tokensForLP, amountBNBLiquidity);\r\n    }\r\n    \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the idex pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = idexV2Router.WETH();\r\n\r\n        _approve(address(this), address(idexV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        idexV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp\r\n        );\r\n        \r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(idexV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        idexV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 feeAmount = 0;\r\n        \r\n        if(isMarketPair[sender]) {\r\n            feeAmount = amount.mul(_totalTaxIfBuying).div(100);\r\n        }\r\n        else if(isMarketPair[recipient]) {\r\n            feeAmount = amount.mul(_totalTaxIfSelling).div(100);\r\n        }\r\n        \r\n        if(feeAmount \u003e 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n            emit Transfer(sender, address(this), feeAmount);\r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n     function tokenETH() external view returns (address){\r\n         return idexV2Router.WETH();\r\n     }\r\n    \r\n}"}}