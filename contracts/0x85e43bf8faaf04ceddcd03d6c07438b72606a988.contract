//SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;
interface IBEP20 {
    function totalSupply() external view returns (uint);
    function balanceOf(address account) external view returns (uint);
    function transfer(address recipient, uint amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint);
    function approve(address spender, uint amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint value);
    event Approval(address indexed owner, address indexed spender, uint value);
    event Burn(address indexed owner, address indexed to, uint value);
}
library SafeMath {
    function add(uint a, uint b) internal pure returns (uint) {
        uint c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }
    function sub(uint a, uint b) internal pure returns (uint) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }
    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b <= a, errorMessage);
        uint c = a - b;
        return c;
    }
    function mul(uint a, uint b) internal pure returns (uint) {
        if (a == 0) {
            return 0;
        }
        uint c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }
    function div(uint a, uint b) internal pure returns (uint) {
        return div(a, b, "SafeMath: division by zero");
    }
    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {
        require(b > 0, errorMessage);
        uint c = a / b;
        return c;
    }
}
abstract contract Ownable {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    constructor () {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }
    function owner() public view returns (address) {
        return _owner;
    }
    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}
interface IPancakeFactory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);
    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);
    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);
    function createPair(address tokenA, address tokenB) external returns (address pair);
    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
    function INIT_CODE_PAIR_HASH() external view returns (bytes32);
}
interface IPancakeRouter01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}
interface IPancakeRouter02 is IPancakeRouter01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}
contract VulgarTycoon is Ownable, IBEP20 {
    using SafeMath for uint;
    mapping (address => uint) internal _balances;
    mapping (address => mapping (address => uint)) internal _allowances;
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint internal _totalSupply;
    address private _pairAddress;
    IPancakeRouter02 private _router;
    address private pancakeRouterAddr = 0x10ED43C718714eb63d5aA57B78B54704E256024E;//Routing prohibited changes
    address public dead = 0x0000000000000000000000000000000000000000;//black hole address
    
    uint public buyFeeToburn = 1;
    uint public buyFeeToLiquidity = 1;
    uint public buyFeeToDifidend = 0;
    uint public sellFeeToburn = 1;
    uint public sellFeeToLiquidity = 1;
    uint public sellFeeToDifidend = 0;
    uint private sellFeeToLPDifidend = 1;
    uint256 public amountToStopBurn;
    uint256 public amountTodifidend;
    uint256 public amountToLPDifidend;
    address[] public tokenHolders;
    uint private buyFeeToLPDifidend = 1;
    uint public buyFeeToDistributor = 1;//Marketing wallet
    uint public sellFeeToDistributor = 1;//Marketing wallet
    address private distributorAddr;
    mapping(address => bool) private _holderIsExist;
    mapping(address => bool) public _exemptFee;
    address private LPDifidendAddr = 0x50b320820aFb41abcD5bbff33a5406863156024E; //Routing prohibited changes
    constructor() {
        _name = "VulgarTycoon";
        _symbol = "VIN";
        _decimals = 18;
        _totalSupply = 19999000 * (10**18); 
	    _balances[msg.sender] = _totalSupply;
        tokenHolders.push(msg.sender);
        _holderIsExist[msg.sender] = true;
        _router = IPancakeRouter02(pancakeRouterAddr);
        _pairAddress = IPancakeFactory(_router.factory()).createPair(
            address(this),
            _router.WETH()
        );
        _exemptFee[msg.sender] = true;
        _exemptFee[address(this)] = true;
        _exemptFee[LPDifidendAddr] = true;
        _exemptFee[pancakeRouterAddr] = true;
        amountToStopBurn = _totalSupply.div(2);
        amountTodifidend = _totalSupply.div(100000);
        amountToLPDifidend = _totalSupply.div(100000);
	    emit Transfer(address(0), msg.sender, _totalSupply);  
    }
    receive() external payable {}
    function name() public view returns (string memory) {
        return _name;
    }
    function symbol() public view returns (string memory) {
        return _symbol;
    }
    function decimals() public view returns (uint8) {
        return _decimals;
    }
    function totalSupply() public view override returns (uint) {
        return _totalSupply;
    }
    function balanceOf(address account) public view override returns (uint) {
        return _balances[account];
    }
    function transfer(address recipient, uint amount) public override  returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }
    function allowance(address towner, address spender) public view override returns (uint) {
        return _allowances[towner][spender];
    }
    function approve(address spender, uint amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }
    function _approve(address owner, address spender, uint amount) internal {
        require(owner != address(0), "BEP20: approve from the zero address");
        require(spender != address(0), "BEP20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, msg.sender, currentAllowance.sub(amount, "BEP20: transfer amount exceeds allowance"));
        return true;
    }
    function _transfer(address sender, address recipient, uint amount) internal {
        require(sender != address(0), "BEP20: transfer from the zero address");
        if( recipient != address(0) 
            && !_holderIsExist[recipient] 
            && recipient != address(_pairAddress) 
            && recipient != address(this)) {
                tokenHolders.push(recipient);
                _holderIsExist[recipient] = true;
        }
        uint finalAmount = amount;
        if(sender == _pairAddress && !_exemptFee[recipient]) { // buy
            finalAmount = processFee(sender,amount, buyFeeToburn, buyFeeToLiquidity, buyFeeToDifidend, buyFeeToLPDifidend,buyFeeToDistributor);
        }
        else if(recipient == _pairAddress && !_exemptFee[sender]) { // sell or addLiquidity
            finalAmount = processFee(sender,amount, sellFeeToburn, sellFeeToLiquidity, sellFeeToDifidend, sellFeeToLPDifidend,sellFeeToDistributor);
        } else if(!_exemptFee[sender] && !_exemptFee[recipient]){
            uint burnAmount = amount.div(100);
            _balances[dead] = _balances[dead].add(burnAmount);
            _totalSupply = _totalSupply.sub(burnAmount);
            emit Transfer(sender, dead, burnAmount);
            uint distributorAmount;
            if(distributorAddr != address(0)) {   
                distributorAmount = amount.div(100);
                _balances[distributorAddr] = _balances[distributorAddr].add(distributorAmount);
            }
            finalAmount = amount.sub(burnAmount).sub(distributorAmount);
        }
        _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(finalAmount);
        emit Transfer(sender, recipient, finalAmount);
    }
    function processFee(address sender,uint amount,uint feeToBurn,uint feeToLiquidity,uint feeTodifidend,uint feeToLPDifidend,uint feeToDistributor) private returns(uint finalAmount) {
        uint burnAmount = amount.mul(feeToBurn).div(100);
        _balances[dead] = _balances[dead].add(burnAmount);
        _totalSupply = _totalSupply.sub(burnAmount);
        emit Transfer(sender, dead, burnAmount);
        uint addLiquidityAmount = amount.mul(feeToLiquidity).div(100);
        _balances[_pairAddress] = _balances[_pairAddress].add(addLiquidityAmount);
        emit Transfer(sender, _pairAddress, addLiquidityAmount);
        uint difidendToHoldersAmount = amount.mul(feeTodifidend).div(100);
        difidendToHolders(sender,difidendToHoldersAmount);   
        uint LPDifidendAmount = amount.mul(feeToLPDifidend).div(100);
        _balances[address(this)] = _balances[address(this)].add(LPDifidendAmount);
        swapAndDifidend(sender); 
        uint distributorAmount;
        if(distributorAddr != address(0)) {
            distributorAmount = amount.mul(feeToDistributor).div(100);
            _balances[distributorAddr] = _balances[distributorAddr].add(distributorAmount);
        }
        uint tatalFeeAmounts = burnAmount.add(addLiquidityAmount).add(difidendToHoldersAmount).add(LPDifidendAmount).add(distributorAmount);
        finalAmount = amount.sub(tatalFeeAmounts); 
    }
    function difidendToHolders(address sender,uint amount) private {
        for(uint256 i = 0; i < tokenHolders.length; i++){
            uint holderAmount = _balances[tokenHolders[i]];
            if( holderAmount > amountTodifidend) {
                uint difidendAmount = amount.mul(holderAmount).div(_totalSupply);
                _balances[tokenHolders[i]] = _balances[tokenHolders[i]].add(difidendAmount);
                emit Transfer(sender, tokenHolders[i], difidendAmount);
            }
        }
    }
    function swapAndDifidend(address sender) private {
        uint amount = _balances[address(this)];
        if (
            amount < amountToLPDifidend ||
            sender == address(this) ||
            sender == _pairAddress
        ) {
            return;
        }   
        _approve(address(this),pancakeRouterAddr,amount);
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = _router.WETH();
        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            amount,
            0,
            path,
            LPDifidendAddr,
            block.timestamp
        );
    }
    function setBuyFeeToBurn(uint256 value) public onlyOwner {
        buyFeeToburn = value;
    }
    function setBuyFeeToLiquidity(uint256 value) private onlyOwner {
        buyFeeToLiquidity = value;
    }
    function setBuyFeeToDifidend(uint256 value) private onlyOwner {
        buyFeeToDifidend = value;
    }
    function setBuyFeeToLPDifidend(uint256 value) private onlyOwner {
        buyFeeToLPDifidend = value;
    }
    function setSellFeeToBurn(uint256 value) public onlyOwner {
        sellFeeToburn = value;
    }
    function setSellFeeToLiquidity(uint256 value) private onlyOwner {
        sellFeeToLiquidity = value;
    }
    function setSellFeeToDifidend(uint256 value) private onlyOwner {
        sellFeeToDifidend = value;
    }
    function setSellFeeToLPDifidend(uint256 value) private onlyOwner {
        sellFeeToLPDifidend = value;
    }
    function setAmountToStopBurn(uint256 value) public onlyOwner {
        amountToStopBurn = value;
    }
    function setAmountTodifidend(uint256 value) public onlyOwner {
        amountTodifidend = value;
    }
    function setAmountToLPDifidend(uint256 value) public onlyOwner {
        amountToLPDifidend = value;
    }
    function exemptFromFee(address account, bool flag) public onlyOwner{
        _exemptFee[account] = flag;
    }
    function setDistributorAddr(address account) public onlyOwner{
        distributorAddr = account;
    }
    function setBuyFeeToDistributor(uint256 value) public onlyOwner{
        buyFeeToDistributor = value;
    }
    function setSellFeeToDistributor(uint256 value) public onlyOwner{
        sellFeeToDistributor = value;
    }
}