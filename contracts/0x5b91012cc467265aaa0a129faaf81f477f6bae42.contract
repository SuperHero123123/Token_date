{"Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn\u0027t rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity\u0027s `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\u0027t, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"},"EnumerableSet.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value\u0027s index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as \u0027swap and pop\u0027).\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue\u0027s index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"ERC20.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n// © Siadyr Team\n// written by Hermes (hermes@siadyr.com)\n// gpg:395D4A5087DA0FF3861376CA1A450A54DA6C7F84\n\npragma solidity \u003e=0.8.8 \u003c0.9.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\n\ncontract ERC20 is IERC20, IERC20Metadata {\n    string  public           name;\n    string  public           symbol;\n    uint8   public immutable decimals;\n    uint256 public immutable totalSupply;\n    mapping(address =\u003e uint256) public balanceOf;\n    mapping(address =\u003e mapping(address =\u003e uint256)) public allowance;\n\n    address internal constant NULL = address(0);\n\n\n    //////////////////////////////\n    // Init\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint256 mint,\n        uint8 decimals_\n    ) {\n        name        = name_;\n        symbol      = symbol_;\n        totalSupply = mint * 10**decimals_;\n        decimals    = decimals_;\n\n        balanceOf[msg.sender] = totalSupply;\n        emit Transfer(NULL, msg.sender, totalSupply);\n    }\n\n\n    //////////////////////////////\n    // Internals\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != NULL, \"ERC20: transfer from the zero address\");\n        require(to   != NULL, \"ERC20: transfer to the zero address\");\n\n        uint256 fromBalance = balanceOf[from];\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            balanceOf[from] = fromBalance - amount;\n        }\n        balanceOf[to] += amount;\n\n        emit Transfer(from, to, amount);\n    }\n\n    function transfer(address to, uint256 amount) public override returns (bool) {\n        address from = msg.sender;\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        address owner = msg.sender;\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        address spender = msg.sender;\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        address owner = msg.sender;\n        _approve(owner, spender, allowance[owner][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        address owner = msg.sender;\n        uint256 currentAllowance = allowance[owner][spender];\n        require(currentAllowance \u003e= subtractedValue,\n                \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner   != NULL, \"ERC20: approve from the zero address\");\n        require(spender != NULL, \"ERC20: approve to the zero address\");\n\n        allowance[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(address owner, address spender, uint256 amount) private {\n        uint256 currentAllowance = allowance[owner][spender];\n\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n}\n"},"IAuthorizer.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n// © Siadyr Team\n// written by Hermes (hermes@siadyr.com)\n// gpg:395D4A5087DA0FF3861376CA1A450A54DA6C7F84\n\npragma solidity \u003e=0.8.8 \u003c0.9.0;\n\ninterface IAuthorizer {\n    function authVersion() external view returns (uint8, uint8);\n\n    function owner() external view returns (address);\n\n    function allowsInTo(\n        address module,\n        address caller,\n        string memory fname\n    ) external view returns (bool);\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"ITaxManager.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n// © Siadyr Team\n// written by Hermes (hermes@siadyr.com)\n// gpg:395D4A5087DA0FF3861376CA1A450A54DA6C7F84\n\npragma solidity \u003e=0.8.8 \u003c0.9.0;\n\ninterface ITaxManager {\n    enum Trans { BUY, P2P, SELL }\n\n    function trigger(\n        Trans   trans,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 taxed\n    ) external returns (uint256 returned);\n}\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\n\npragma solidity \u003e=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function INIT_PAIR_HASH() external view returns (bytes32);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"},"IUniswapV2Router01.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\n\npragma solidity \u003e=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\n\n\npragma solidity \u003e=0.6.2;\n\nimport \u0027./IUniswapV2Router01.sol\u0027;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"},"recover.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n// © Siadyr Team\n// written by Hermes (hermes@siadyr.com)\n// gpg:395D4A5087DA0FF3861376CA1A450A54DA6C7F84\n\npragma solidity \u003e=0.8.8 \u003c0.9.0;\n\nimport \"./SafeERC20.sol\";\nimport \"./restricted.sol\";\n\nabstract contract RecoverERC20 is Restricted {\n    using SafeERC20 for IERC20;\n\n    function unrestrictedRecoverERC20(address lostToken, uint256 max) internal virtual {\n        // just in case something goes horribly wrong\n\n        uint256 balance = IERC20(lostToken).balanceOf(address(this));\n        uint256 amount = balance \u003c max ? balance : max;\n        require(amount \u003e 0, \"No balance to recover\");\n        IERC20(lostToken).safeTransfer(msg.sender, amount);\n    }\n\n    function unrestrictedRecoverERC20(address lostToken) internal virtual {\n        // just in case something goes horribly wrong\n        uint256 balance = IERC20(lostToken).balanceOf(address(this));\n        require(balance \u003e 0, \"No balance to recover\");\n        IERC20(lostToken).safeTransfer(msg.sender, balance);\n    }\n\n    function recoverERC20(address lostToken) external virtual can(\"recoverERC20\") {\n        unrestrictedRecoverERC20(lostToken);\n    }\n}\n"},"restricted.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n// © Siadyr Team\n// written by Hermes (hermes@siadyr.com)\n// gpg:395D4A5087DA0FF3861376CA1A450A54DA6C7F84\n\npragma solidity \u003e=0.8.8 \u003c0.9.0;\n\nimport \"./IAuthorizer.sol\";\n\nabstract contract Restricted {\n    //////////////\n    // Authorizer\n    address private _owner;\n    bool    private _ownerIsAuthorizer;\n\n    event SetAuthorizer(address indexed auth);\n    event SetOwner(address indexed owner);\n\n\n    //////////////////////////////\n    // Init\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    modifier onlyAuthorizer() {\n        require(msg.sender == _owner\n                || _ownerIsAuthorizer \u0026\u0026 msg.sender == IAuthorizer(_owner).owner(),\n                \"Authorizer only call\"\n        );\n        _;\n    }\n\n    modifier can(string memory call) {\n        require(allowedTo(msg.sender, call),\n                \"Caller is not allowed to make this call\"\n        );\n        _;\n    }\n\n\n    //////////////////////////////\n    // API\n    function authorizer() public view returns (address) {\n        return address(_owner);\n    }\n\n    // direct check\n    function allowedTo(address caller, string memory fname) internal view returns (bool) {\n        return allowedInTo(caller, address(this), fname);\n    }\n\n    // cross-contract check\n    function allowedInTo(address caller, address module, string memory fname) internal view returns (bool) {\n        if (caller == _owner) return true;\n        if (!_ownerIsAuthorizer)\n            return false;\n        else {\n            IAuthorizer owner = IAuthorizer(_owner);\n            return owner.allowsInTo(caller, module, fname);\n        }\n    }\n\n    function setAuthorizer(address auth) public onlyAuthorizer {\n        require(auth != address(0), \"Authorizer can\u0027t be NULL\");\n        _owner = auth;\n        _ownerIsAuthorizer   = false;\n        if (auth.code.length \u003e 0) {\n            try IAuthorizer(_owner).authVersion() returns (uint8 version, uint8) {\n                require(version == 1, \"Incompatible authorizer contract\");\n                _ownerIsAuthorizer = true;\n            }\n            catch {}\n        }\n        if (_ownerIsAuthorizer)\n            emit SetAuthorizer(auth);\n        else\n            emit SetOwner(auth);\n    }\n}\n"},"SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\n        // we\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"SIADYR.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0\n// © Siadyr Team\n// written by Hermes (hermes@siadyr.com)\n// gpg:395D4A5087DA0FF3861376CA1A450A54DA6C7F84\n\npragma solidity \u003e=0.8.8 \u003c0.9.0;\n\nimport \"./SafeERC20.sol\";\nimport \"./IERC20.sol\";\nimport \"./EnumerableSet.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router02.sol\";\n\nimport \"./ERC20.sol\";\nimport \"./recover.sol\";\nimport \"./ITaxManager.sol\";\n\ncontract SIADYR is RecoverERC20, ERC20 {\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    ///////////\n    // Taxing\n    uint8       private constant BUY  = uint8(ITaxManager.Trans.BUY);\n    uint8       private constant P2P  = uint8(ITaxManager.Trans.P2P);\n    uint8       private constant SELL = uint8(ITaxManager.Trans.SELL);\n\n    uint16[3]   private _taxes;\n    ITaxManager public  taxManager;\n    event SetTaxManager(address indexed manager);\n\n    //////////////\n    // Exceptions\n    mapping(address =\u003e bool) public isFrozen;\n    event Freeze(address indexed wallet);\n    event UnFreeze(address indexed wallet);\n\n    ///////////\n    // Pooling\n    mapping(address =\u003e bool) private _isPair;\n    event AddPair(address indexed pair);\n    event RemovePair(address indexed pair);\n\n    ///////////\n    // Rewards\n    IERC20  public immutable busd;\n    uint256 public  rewardSupply;\n    uint256 public  dividends    = 0;\n    uint256 private _unallocated = 0;\n    uint256 private _allocated   = 0;\n    bool    public  autoUpdate;\n    bool    private update_lock;\n\n    EnumerableSet.AddressSet private _holders;\n\n    struct Reward {\n        uint256 div;\n        uint256 due;\n        uint256 paid;\n    }\n    mapping(address =\u003e Reward) private _rewards;\n    event EnabledAutoUpdate();\n    event DisabledAutoUpdate();\n\n    mapping(address =\u003e bool) public excluded;\n    event IncludeInRewards(address indexed account);\n    event ExcludeFromRewards(address indexed account);\n\n\n    //////////////////////////////\n    // Init\n\n    constructor(IUniswapV2Router02 router, address busd_)\n    ERC20(\"SIADYR Token\", \"SIADYR\", 1_000_000_000, 18)\n    {\n        _taxes[BUY]  = 12;\n        _taxes[P2P]  = 15;\n        _taxes[SELL] = 20;\n\n        _holders.add(msg.sender);\n        rewardSupply = totalSupply;\n        autoUpdate   = true;\n\n        IUniswapV2Factory factory = IUniswapV2Factory(router.factory());\n\n        busd = IERC20(busd_);\n        addPair(factory.createPair(address(this), address(busd)));\n        _exclude(0x000000000000000000000000000000000000dEaD);\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal override {\n        require(from != NULL, \"ERC20: transfer from the zero address\");\n        require(to   != NULL, \"ERC20: transfer to the zero address\");\n\n        if(to == address(taxManager))\n            require(allowedInTo(from, to, \"refillTaxes\"),\n                    \"TaxManager must not receive SIADYR tokens directly\");\n\n        uint256 fromBalance = balanceOf[from];\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\n        if (isFrozen[from])\n            require(allowedTo(to, \"receive frozen\"), \"Frozen address, please contact a verified admin\");\n\n        // No dividend updates on nested calls\n        if (autoUpdate \u0026\u0026 !update_lock)  _update();\n        _settle(from);\n        _settle(to);\n\n        if (!excluded[from])  rewardSupply -= amount;\n\n        unchecked {\n            balanceOf[from] = fromBalance - amount;\n        }\n\n        if (from != address(taxManager)     // from holder\n            \u0026\u0026 address(taxManager) != NULL) // taxmanager defined\n        {\n            ITaxManager.Trans trans;\n\n            if (_isPair[from])\n                trans = ITaxManager.Trans.BUY;\n            else if (_isPair[to])\n                trans = ITaxManager.Trans.SELL;\n            else\n                trans = ITaxManager.Trans.P2P;\n\n            uint256 mayTax = amount * _taxes[uint8(trans)] / 100e3;\n            balanceOf[address(taxManager)] += mayTax;\n\n            // if the TaxManager triggered an update during a\n            // transfer, the dividends would be updated with\n            // rewardSupply -= amount, creating a dividend imbalance.\n            update_lock = true;\n            uint256 returned = taxManager.trigger(trans, from, to, amount, mayTax);\n            update_lock = false;\n\n            require(mayTax \u003e= returned, \"Can\u0027t return more than original tax\");\n            balanceOf[address(taxManager)] -= returned;\n\n            uint256 taxed = mayTax - returned;\n            amount       -= taxed;\n        }\n\n        if (!excluded[to]) {\n            rewardSupply += amount;\n            _holders.add(to);\n        }\n\n        balanceOf[to] += amount;\n\n        emit Transfer(from, to, amount);\n    }\n\n    function _added() private view returns (uint256) {\n        uint256 unalloc = busd.balanceOf(address(this))\n                        - _allocated;\n        return  unalloc - _unallocated;\n    }\n\n    function update() external can(\"update\") {\n        _update();\n    }\n    function _update() internal {\n        require(!update_lock, \"Can\u0027t update during transfer while rewardSupply is not settled\");\n        uint256 added = _added();\n\n        if (added \u003e 0  \u0026\u0026  rewardSupply \u003e 0) {\n            _unallocated += added;\n            dividends    += added * 1e18 / rewardSupply;\n        }\n    }\n\n    function _settle(address wallet) private {\n        if(excluded[wallet]) return;\n\n        Reward storage reward = _rewards[wallet];\n        uint256 delta  = dividends - reward.div;\n        if (delta == 0) return;\n\n        uint256 earned = delta * balanceOf[wallet] / 1e18;\n\n        reward.div    = dividends;\n        reward.due   += earned;\n        _allocated   += earned;\n        _unallocated -= earned;\n    }\n\n    function _pay(address from, address to) private {\n        Reward storage reward = _rewards[from];\n\n        busd.safeTransfer(to, reward.due);\n        reward.paid += reward.due;\n        _allocated  -= reward.due;\n        reward.due   = 0;\n    }\n\n\n    //////////////////////////////\n    // Public\n    ///////////////////\n    // Anti bad-actors\n    function panic() external {\n        // let\u0027s the holder freeze the wallet if it\u0027s\n        // compromised. Hopefully before funds are stolen.\n        // Meanwhile, it\u0027ll still get rewards, but will be\n        // unclaimable by the holder.\n        _settle(msg.sender);\n        _holders.remove(msg.sender);\n        if (!isFrozen[msg.sender]) {\n            isFrozen[msg.sender] = true;\n            emit Freeze(msg.sender);\n        }\n    }\n\n    ///////////\n    // Rewards\n    function rewards(address wallet) external view returns (uint256 due, uint256 paid, uint256 div) {\n        Reward storage reward = _rewards[wallet];\n        if (excluded[wallet]) return (0, reward.paid, reward.div);\n\n        uint256 added  = _added();\n        uint256 delta  = dividends\n                       - reward.div\n                       + added * 1e18 / rewardSupply;\n        uint256 earned = delta * balanceOf[wallet] / 1e18;\n\n        due  = reward.due + earned;\n        paid = reward.paid;\n        div  = reward.div;\n    }\n\n    function claim() external {\n        require(!isFrozen[msg.sender], \"Frozen address, please contact a verified admin\");\n        _update();\n        _settle(msg.sender);\n        _pay(msg.sender, msg.sender);\n    }\n\n    //////////////////////////////\n    // Administration\n    ///////////////////\n    // Anti bad-actors\n    function freeze(address[] calldata accounts) external can(\"freeze\") {\n        _update();\n        for (uint32 i; i \u003c accounts.length; i++) {\n            address account = accounts[i];\n            _exclude(account);\n            if (!isFrozen[account]) {\n               isFrozen[account] = true;\n               emit Freeze(account);\n            }\n        }\n    }\n\n    function unfreeze(address[] calldata accounts) external can(\"unfreeze\") {\n        for (uint32 i; i \u003c accounts.length; i++) {\n            address account = accounts[i];\n            _include(account);\n            if (isFrozen[account]) {\n               isFrozen[account] = false;\n               emit UnFreeze(account);\n            }\n        }\n    }\n\n    function recoverERC20(address lostToken) external override can(\"recoverERC20\") {\n        if (lostToken == address(busd))\n            unrestrictedRecoverERC20(lostToken, _added());\n        else\n            unrestrictedRecoverERC20(lostToken);\n    }\n\n    ///////////////////\n    // Rewards\n    function enableAutoUpdate() external can(\"enableAutoUpdate\") {\n        autoUpdate = true;\n        emit EnabledAutoUpdate();\n    }\n\n    function disableAutoUpdate() external can(\"disableAutoUpdate\") {\n        autoUpdate = false;\n        emit DisabledAutoUpdate();\n    }\n\n    function exclude(address wallet) external can(\"exclude\") {\n        _exclude(wallet);\n    }\n    function _exclude(address wallet) internal {\n        if (excluded[wallet]) return;\n        _settle(wallet);\n\n        excluded[wallet] = true;\n        _holders.remove(wallet);\n        rewardSupply -= balanceOf[wallet];\n\n        emit ExcludeFromRewards(wallet);\n    }\n\n    function include(address wallet) external can(\"exclude\") {\n        _include(wallet);\n    }\n    function _include(address wallet) internal {\n        if (!excluded[wallet]) return;\n\n        excluded[wallet] = false;\n        _holders.add(wallet);\n        rewardSupply += balanceOf[wallet];\n        _rewards[wallet].div = dividends;\n\n        emit ExcludeFromRewards(wallet);\n    }\n\n    function explode(address wallet) external can(\"explode\") {\n        _exclude(wallet);\n        Reward storage entry = _rewards[wallet];\n        _allocated -= entry.due;\n        entry.due   = 0;\n    }\n\n    function seize(address wallet) external can(\"seize\") {\n        require(isFrozen[wallet], \"Can only seize rewards from frozen wallets\");\n        _update();\n        _exclude(wallet);\n        _pay(wallet, msg.sender);\n    }\n\n    function pay(address[] calldata wallets) external {\n        _update();\n        for (uint32 i; i \u003c wallets.length; i++) {\n            address w = wallets[i];\n            if (isFrozen[w]) continue;\n            _settle(w);\n            _pay(w, w);\n            if (balanceOf[w] == 0)\n                _holders.remove(w);\n        }\n    }\n\n    function maxRange() public view returns (uint32) {\n        return uint32(_holders.length()) - 1;\n    }\n\n    function payRange(uint256 minTokens, uint256 minReward, uint32 to, uint32 from) public {\n        _update();\n        uint32 max = maxRange();\n        require(to \u003c= max, \"Left end out of bounds\");\n        if (from == 0  ||  from \u003e max)\n            from = max;\n\n        do {\n            address w = _holders.at(from);\n            _settle(w);\n            if (_rewards[w].due \u003e= minReward)\n                _pay(w, w);\n            if (balanceOf[w] \u003c minTokens)\n                _holders.remove(w);\n\n        } while (0 \u003c from \u0026\u0026 to \u003c= --from);\n    }\n\n\n    ///////////\n    // Pooling\n    function addPair(address pair) public can(\"addPair\") {\n        require(pair.code.length \u003e 0, \"Pair address must be a contract\");\n        _exclude(pair);\n        _isPair[pair] = true;\n        emit AddPair(pair);\n    }\n\n    function removePair(address pair) public can(\"removePair\") {\n        _include(pair);\n        _isPair[pair] = false;\n        emit RemovePair(pair);\n    }\n\n    /////////\n    // Taxes\n    function setTaxManager(address manager) public onlyAuthorizer {\n        taxManager = ITaxManager(manager);\n        if (manager != NULL) {\n           require(manager.code.length \u003e 0, \"TaxManager address provided must be a contract\");\n           _exclude(manager);\n        }\n        emit SetTaxManager(manager);\n    }\n\n    function taxes() external view returns(uint16 buy, uint16 p2p, uint16 sell) {\n        return (_taxes[BUY], _taxes[P2P], _taxes[SELL]);\n    }\n\n    function setTaxes(uint16 buy, uint16 p2p, uint16 sell) external can(\"setTaxes\") {\n        require(buy  \u003c= 24e3, \"That\u0027s too much BUY tax\");\n        require(p2p  \u003c= 30e3, \"That\u0027s too much P2P tax\");\n        require(sell \u003c= 40e3, \"That\u0027s too much SELL tax\");\n        _taxes[BUY]  = buy;\n        _taxes[P2P]  = p2p;\n        _taxes[SELL] = sell;\n    }\n}\n\n/*\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n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\n2AD03S0QizHw/YZAizpUS8jp\n=u9ip\n-----END PGP PUBLIC KEY BLOCK-----\n*/\n"}}