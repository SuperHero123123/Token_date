{{
  "language": "Solidity",
  "sources": {
    "contracts/tokens/RetromoonToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol\";\r\nimport \"@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakeFactory.sol\";\r\nimport \"pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol\";\r\n\r\n/// Contract for external Solid Group bot protection\r\nabstract contract BPContract {\r\n\tfunction protect(address sender, address receiver, uint256 amount) external virtual;\r\n}\r\n\r\n/// @title RetromoonToken\r\n/// @notice RetromoonToken Contract implementing ERC20 standard\r\n/// @dev To be deployed as RetromoonToken token for use in Retromoon games.\r\n///\t\tPancakeRouter should be defined post creation.\r\n///\t\tPancakePair should be defined post launch.\r\ncontract RetromoonToken is ERC20PresetFixedSupply, AccessControl, Ownable {\r\n\r\n\t/// Fee for liquidity, marketing, development, etc.\r\n\t/// Create with 99% tax to combat bots, adjust later with max limited fee amount\r\n\tuint16 public operationsFee = 990;\r\n\t/// Percentage of operations fee to add to liquidity\r\n\tuint256 public feeLiquidityPercentage = 400;\r\n\t/// Fee for staking pools, etc.\r\n\tuint8 public rewardsFee = 0;\r\n\t\r\n\t/// Variables for bot protection contract and states\r\n\tBPContract public BP;\r\n\tbool public botProtectionEnabled;\r\n\tbool public BPDisabledForever = false;\r\n\r\n\t/// Addresses to receive taxes\r\n\taddress private _operationsWallet;\r\n\taddress private _rewardsVault;\r\n\taddress private _liquidityRecipient;\r\n\r\n\tmapping(address => bool) _isExcludedFromFee;\r\n\tmapping(address => bool) _isExcludedFromMaxTx;\r\n\r\n\tIPancakeRouter02 public PancakeRouter;\r\n\tIPancakePair public PancakePair;\r\n\t\r\n\tbool public feesEnabled = true;\r\n\tbool public swapEnabled = true;\r\n\r\n\tuint256 public maxTxAmount = 10000e18;\r\n\tuint256 public swapThreshold = 10000e18;\r\n\tbool private _swapActive = false;\r\n\r\n\t/// Events on variable changes\r\n\tevent BotProtectionEnabledUpdated(bool enabled);\r\n\tevent BotProtectionPermanentlyDisabled();\r\n\tevent PancakePairUpdated(address pair);\r\n\tevent PancakeRouterUpdated(address router);\r\n\tevent OperationsFeeUpdated(uint8 fee);\r\n\tevent RewardsFeeUpdated(uint8 fee);\r\n\tevent OperationsWalletUpdated(address wallet);\r\n\tevent RewardsVaultUpdated(address vault);\r\n\tevent FeeLiquidityPercentageUpdated(uint256 percentage);\r\n\tevent IncludedInFees(address account);\r\n\tevent ExcludedFromFees(address account);\r\n\tevent IncludedInMaxTransaction(address account);\r\n\tevent ExcludedFromMaxTransaction(address account);\r\n\tevent MaxTransactionUpdated(uint256 maxTxAmount);\r\n\tevent FeesEnabledUpdated(bool enabled);\r\n\tevent SwapEnabledUpdated(bool enabled);\r\n\tevent SwapThresholdUpdated(uint256 threshold);\r\n\tevent LiquidityRecipientUpdated(address recipient);\r\n\tevent SwapTokensForNative(uint256 amount);\r\n\tevent AddLiquidity(uint256 tokenAmount, uint256 nativeAmount);\r\n\t\r\n\r\n\t/// RetromoonToken constructor\r\n\t/// @param name The token name\r\n\t/// @param symbol The token symbol\r\n\t/// @param initialSupply The token final initialSupply to mint\r\n\t/// @param owner The address to send minted supply to\r\n\tconstructor(string memory name, string memory symbol, uint256 initialSupply, address owner) ERC20PresetFixedSupply(name, symbol, initialSupply, owner) {\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\t\t_isExcludedFromFee[owner] = true;\r\n\r\n\t\t// Define administrator roles that can add/remove from given roles\r\n\t\t_setRoleAdmin(DEFAULT_ADMIN_ROLE, DEFAULT_ADMIN_ROLE);\r\n\r\n\t\t// Add deployer to admin roles\r\n\t\t_setupRole(DEFAULT_ADMIN_ROLE, owner);\r\n\t}\r\n\r\n\r\n\t/// CONTRACT FUNDS ///\r\n\r\n\t/// Receive native funds on contract if required (only owner or router)\r\n\treceive() external payable {\r\n\t\trequire(_msgSender() == owner() || _msgSender() == address(PancakeRouter));\r\n\t}\r\n\r\n\t/// Withdraw any native funds to sender address\r\n\tfunction withdrawNative() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(_withdrawNative(_msgSender(), address(this).balance), \"RetromoonToken: Withdraw failed\");\r\n\t}\r\n\r\n\t/// Withdraw any ERC20 tokens to sender address\r\n\t/// @param _token The address of ERC20 token to withdraw\r\n\t/// @param amount The amount of the token to withdraw\r\n\tfunction withdrawToken(address _token, uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\tIERC20(_token).transfer(_msgSender(), amount);\r\n\t}\r\n\r\n\r\n\t/// PUBLIC VIEWS ///\r\n\r\n\t/// Check if address is excluded from fees\r\n\tfunction isExcludedFromFee(address account) external view returns(bool) {\r\n\t\treturn _isExcludedFromFee[account];\r\n\t}\r\n\r\n\t/// Check if address is excluded from max transaction\r\n\tfunction isExcludedFromMaxTx(address account) external view returns(bool) {\r\n\t\treturn _isExcludedFromMaxTx[account];\r\n\t}\r\n\r\n\t/// Get total fees (divide by 10 for percentage value)\r\n\tfunction totalFees() external view returns(uint256) {\r\n\t\tif (feesEnabled) {\r\n\t\t\treturn operationsFee + rewardsFee;\r\n\t\t} \r\n\t\treturn 0;\r\n\t}\r\n\r\n\r\n\t/// ADMINISTRATION ///\r\n\r\n\t/// Set the bot protection contract address\r\n\tfunction setBPAddress(address _bp) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(address(BP) == address(0), \"RetromoonToken: BP can only be initialized once\");\r\n\t\tBP = BPContract(_bp);\r\n\t}\r\n\r\n\t/// Set bot protection enabled state\r\n\tfunction setBotProtectionEnabled(bool _enabled) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(!BPDisabledForever, \"RetromoonToken: BP is permanently disabled\");\r\n\t\tbotProtectionEnabled = _enabled;\r\n\t\temit BotProtectionEnabledUpdated(_enabled);\r\n\t}\r\n\r\n\t/// Set bot protection disabled forever\r\n\tfunction disableBotProtectionForever() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(!BPDisabledForever, \"RetromoonToken: BP is already permanently disabled\");\r\n\t\tBPDisabledForever = true;\r\n\t\tbotProtectionEnabled = false;\r\n\t\temit BotProtectionPermanentlyDisabled();\r\n\t}\r\n\t\r\n\t/// Set pancake/token pair address\r\n\tfunction setPrimaryPairAddress(address pair) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(pair != address(0), \"RetromoonToken: Cannot set Pair to zero address\");\r\n\t\tPancakePair = IPancakePair(pair);\r\n\t\temit PancakePairUpdated(pair);\r\n\t}\r\n\r\n\t/// Set pancake router address\r\n\tfunction setRouterAddress(address router) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(address(PancakeRouter) == address(0), \"RetromoonToken: Cannot set Router more than once\");\r\n\t\trequire(router != address(0), \"RetromoonToken: Cannot set Router to zero address\");\r\n\t\tPancakeRouter = IPancakeRouter02(router);\r\n\t\t_approve(address(this), address(PancakeRouter), ~uint256(0));\r\n\t\temit PancakeRouterUpdated(router);\r\n\t}\r\n\r\n\t/// Approve pancake router address\r\n\tfunction approveRouterAddress() external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(address(PancakeRouter) != address(0), \"RetromoonToken: router has not been set yet\");\r\n\t\t_approve(address(this), address(PancakeRouter), ~uint256(0));\r\n\t}\r\n\r\n\t/// Set address to receive operations funds\r\n\tfunction setOperationsWallet(address wallet) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(wallet != address(0), \"RetromoonToken: Cannot set Wallet to zero address\");\r\n\t\t_operationsWallet = wallet;\r\n\t\temit OperationsWalletUpdated(wallet);\r\n\t}\r\n\r\n\t/// Set address to receive rewards tokens\r\n\tfunction setRewardsVault(address vault) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(vault != address(0), \"RetromoonToken: Cannot set Vault to zero address\");\r\n\t\t_rewardsVault = vault;\r\n\t\temit RewardsVaultUpdated(vault);\r\n\t}\r\n\r\n\t/// Set liquidity recipient\r\n\tfunction setLiquidityRecipient(address recipient) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\t_liquidityRecipient = recipient;\r\n\t\temit LiquidityRecipientUpdated(recipient);\r\n\t}\r\n\r\n\t/// Set feesEnabled flag\r\n\tfunction setFeesEnabled(bool _enabled) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\tfeesEnabled = _enabled;\r\n\t\temit FeesEnabledUpdated(_enabled);\r\n\t}\r\n\r\n\t/// Include address in fees\r\n\tfunction includeInFee(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\t_isExcludedFromFee[account] = false;\r\n\t\temit IncludedInFees(account);\r\n\t}\r\n\r\n\t/// Exclude address from fees\r\n\tfunction excludeFromFee(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\t_isExcludedFromFee[account] = true;\r\n\t\temit ExcludedFromFees(account);\r\n\t}\r\n\r\n\t/// Include address in max tx\r\n\tfunction includeInMaxTx(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\t_isExcludedFromMaxTx[account] = false;\r\n\t\temit IncludedInMaxTransaction(account);\r\n\t}\r\n\r\n\t/// Exclude address from max tx\r\n\tfunction excludeFromMaxTx(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\t_isExcludedFromMaxTx[account] = true;\r\n\t\temit ExcludedFromMaxTransaction(account);\r\n\t}\r\n\r\n\t/// Set max transaction amount\r\n\tfunction setMaxTxAmount(uint256 maxTx) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\tuint256 percentage = maxTx * 10e2 / totalSupply();\r\n\t\trequire(percentage >= 1, \"RetromoonToken: Cannot set max transaction less than 0.1%\");\r\n\t\tmaxTxAmount = maxTx;\r\n\t\temit MaxTransactionUpdated(maxTx);\r\n\t}\r\n\r\n\t/// Set max transaction percentage\r\n\t/// @param maxTxPercentage Max transaction percentage where 10 = 1%\r\n\tfunction setMaxTxPercentage(uint256 maxTxPercentage) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(maxTxPercentage >= 1, \"RetromoonToken: Cannot set max transaction less than 0.1%\");\r\n\t\tuint256 maxTx = totalSupply() * maxTxPercentage / 10e2;\r\n\t\tmaxTxAmount = maxTx;\r\n\t\temit MaxTransactionUpdated(maxTx);\r\n\t}\r\n\r\n\t/// Set swap threshold of tokens to swap to native\r\n\tfunction setSwapThreshold(uint256 threshold) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(threshold > 0, \"RetromoonToken: Cannot set threshold to zero\");\r\n\t\tswapThreshold = threshold;\r\n\t\temit SwapThresholdUpdated(threshold);\r\n\t}\r\n\t\r\n\t/// Set swapEnabled flag\r\n\tfunction setSwapEnabled(bool _enabled) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\tswapEnabled = _enabled;\r\n\t\temit SwapEnabledUpdated(_enabled);\r\n\t}\r\n\r\n\t/// Set operations fee to take on buys/sells\r\n\tfunction setOperationsFee(uint8 fee) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(fee <= 200, \"RetromoonToken: max operations fee is 20%\");\r\n\t\toperationsFee = fee;\r\n\t\temit OperationsFeeUpdated(fee);\r\n\t}\r\n\r\n\t/// Set rewards (e.g. staking pool) fees to take on buys/sells\r\n\tfunction setRewardsFee(uint8 fee) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(fee <= 100, \"RetromoonToken: max rewards fee is 10%\");\r\n\t\trewardsFee = fee;\r\n\t\temit RewardsFeeUpdated(fee);\r\n\t}\r\n\r\n\t/// Set percentage of operations fee to add to liquidity\r\n\tfunction setFeeLiquidityPercentage(uint16 percentage) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n\t\trequire(percentage <= 1000, \"RetromoonToken: max fee liquidity percentage is 100%\");\r\n\t\tfeeLiquidityPercentage = percentage;\r\n\t\temit FeeLiquidityPercentageUpdated(percentage);\r\n\t}\r\n\r\n\r\n\t/// TRANSFER AND SWAP ///\r\n\r\n\t/// @dev Enable swap active flag before function and disable afterwards\r\n\tmodifier swapSemaphore() {\r\n\t\t_swapActive = true;\r\n\t\t_;\r\n\t\t_swapActive = false;\r\n\t}\r\n\r\n\t/// @dev Check if transfer should limit transaction amount\r\n\tmodifier canTransfer(address sender, address receiver, uint256 amount) {\r\n\t\t// If buying or selling from primary pair and not excluded, ensure max transaction\r\n\t\tif ((sender == address(PancakePair) || receiver == address(PancakePair)) &&\r\n\t\t\t\t!(_isExcludedFromMaxTx[sender] || _isExcludedFromMaxTx[receiver])) {\r\n\t\t\trequire(amount <= maxTxAmount, \"RetromoonToken: Transfer amount over maxTxAmount\");\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/// @dev Check if transfer should take fee, only take fee on buys/sells\r\n\tfunction _shouldTakeFee(address sender, address receiver) internal virtual view returns (bool) {\r\n\t\treturn (sender == address(PancakePair) || receiver == address(PancakePair)) && \r\n\t\t\t\t!(_isExcludedFromFee[sender] || _isExcludedFromFee[receiver]);\r\n\t}\r\n\t\r\n\t/// @dev Calculate individual and total fee amounts for a given transfer amount\r\n\t/// @param amount The transfer amount\r\n\t/// @return totalFeeAmount The total fee value to take from transfer amount\r\n\t/// @return operationsFeeAmount The operations fee value to take from transfer amount\r\n\t/// @return rewardFeeAmount The rewards fee value to take from transfer amount\r\n\tfunction _calculateFees(uint256 amount)\r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 totalFeeAmount,\r\n\t\t\tuint256 operationsFeeAmount,\r\n\t\t\tuint256 rewardFeeAmount\r\n\t\t)\r\n\t{\r\n\t\toperationsFeeAmount = amount * operationsFee / 10e2;\r\n\t\trewardFeeAmount = amount * rewardsFee / 10e2;\r\n\t\ttotalFeeAmount = rewardFeeAmount + operationsFeeAmount;\r\n\t}\r\n\r\n\t/// @notice Transfer amount, taking taxes (if enabled) for operations and reward pool.\r\n\t///\t\t\tIf enabled and threshold is reached, also swap taxes to native currency and add to liquidity.\r\n\t/// @inheritdoc\tERC20\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) internal virtual override canTransfer(sender, recipient, amount) {\r\n\t\t// Use protection contract if bot protection enabled\r\n\t\tif (botProtectionEnabled && !BPDisabledForever){\r\n\t\t\tBP.protect(sender, recipient, amount);\r\n\t\t}\r\n\r\n\t\t(uint256 totalFee, uint256 operationsFeeAmount, uint256 rewardFeeAmount) = _calculateFees(amount);\r\n\r\n\t\tif (sender != address(PancakePair) && !_swapActive && swapEnabled) {\r\n\t\t\t_swapTokens();\r\n\t\t}\r\n\r\n\t\tif (_shouldTakeFee(sender, recipient) && feesEnabled) {\r\n\t\t\tuint256 transferAmount = amount - totalFee;\r\n\r\n\t\t\tsuper._transfer(sender, recipient, transferAmount);\r\n\t\t\tif (operationsFeeAmount > 0) {\r\n\t\t\t\tsuper._transfer(sender, address(this), operationsFeeAmount);\r\n\t\t\t}\r\n\t\t\tif (rewardFeeAmount > 0) {\r\n\t\t\t\tsuper._transfer(sender, address(_rewardsVault), rewardFeeAmount);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsuper._transfer(sender, recipient, amount);\r\n\t\t}\r\n\t}\r\n\r\n\t/// @dev Calculate amount of a value that should go to liquidity\r\n\t/// @param amount The original fee amount\r\n\t/// @return The value of fee to add to liquidity\r\n\tfunction _calculateLiquidityPercentage(uint256 amount) internal view returns (uint256) {\r\n\t\treturn amount * feeLiquidityPercentage / 10e2;\r\n\t}\r\n\r\n\t/// @dev Calculate operations fee split amounts for liquidity tokens and total to swap to native\r\n\t/// @param amount The operations fee amount\r\n\t/// @return tokensForLiquidity The amount of tokens to save to pair with native currency for LP\r\n\t/// @return swapAmount The amount of tokens to swap for native currency to split for marketing and to pair for LP\r\n\tfunction _calculateOperationsFeeSplit(uint256 amount) \r\n\t\tinternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 tokensForLiquidity,\r\n\t\t\tuint256 swapAmount\r\n\t\t)\r\n\t{\r\n\t\t// Get token amount from taxes for liquidity\r\n\t\ttokensForLiquidity = _calculateLiquidityPercentage(amount);\r\n\t\t// Get token amount from taxes for operations\r\n\t\tuint256 tokensForOperations = amount - tokensForLiquidity;\r\n\t\t// Halve liquidity tokens for converting to native\r\n\t\tuint256 liquidityTokens = tokensForLiquidity / 2;\r\n\t\tuint256 liquiditySwap = tokensForLiquidity - liquidityTokens;\r\n\t\t// Get total tokens to convert to native token\r\n\t\tswapAmount = tokensForOperations + liquiditySwap;\r\n\t}\r\n\r\n\t/// @dev If swapThreshold reached, swap tokens to native currency, add liquidity, and send to marketing wallet\r\n\tfunction _swapTokens() internal swapSemaphore {\r\n\t\tuint256 contractBalance = IERC20(address(this)).balanceOf(address(this));\r\n\t\tuint256 threshold = swapThreshold;\r\n\t\tif (contractBalance > threshold && swapEnabled) {\r\n\t\t\tif (threshold > maxTxAmount) {\r\n\t\t\t\tthreshold = maxTxAmount;\r\n\t\t\t}\r\n\r\n\t\t\t(uint256 tokensForLiquidity, uint256 swapAmount) = _calculateOperationsFeeSplit(threshold);\r\n\r\n\t\t\t// Perform swap and calculate converted value\r\n\t\t\tuint256 initialBalance = payable(this).balance;\r\n\t\t\tif (_swapTokensForNative(swapAmount)) {\r\n\t\t\t\tuint256 swapBalance = payable(this).balance;\r\n\t\t\t\tuint256 profit = swapBalance - initialBalance;\r\n\r\n\t\t\t\t// Get native amount from taxes for liquidity/operations\r\n\t\t\t\tuint256 nativeForLiquidity = _calculateLiquidityPercentage(profit);\r\n\t\t\t\tuint256 nativeForOperations = profit - nativeForLiquidity;\r\n\t\t\t\tif (nativeForOperations > 0) {\r\n\t\t\t\t\t_withdrawNative(_operationsWallet, nativeForOperations);\r\n\t\t\t\t}\r\n\t\t\t\tif (nativeForLiquidity > 0) {\r\n\t\t\t\t\t_addLiquidity(tokensForLiquidity, nativeForLiquidity);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/// @dev Withdraw native currency to recipient using call method\r\n\tfunction _withdrawNative(address recipient, uint256 amount) internal virtual returns (bool success) {\r\n\t\t(success,) = payable(recipient).call{value: amount}(\"\");\r\n\t}\r\n\r\n\t/// @dev Swap tokens for native currency (e.g. BNB)\r\n\tfunction _swapTokensForNative(uint256 amount) internal virtual returns (bool) {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = PancakeRouter.WETH();\r\n\t\ttry PancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\t\tamount,\r\n\t\t\t\t0,\r\n\t\t\t\tpath,\r\n\t\t\t\taddress(this),\r\n\t\t\t\tblock.timestamp) {\r\n\t\t\temit SwapTokensForNative(amount);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tcatch (bytes memory) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t/// @dev Add liquidity to token from token contract holdings\r\n\tfunction _addLiquidity(uint256 tokenAmount, uint256 nativeAmount) private returns (bool) {\r\n\t\ttry PancakeRouter.addLiquidityETH{value: nativeAmount}(address(this), tokenAmount, 0, 0, _liquidityRecipient, block.timestamp) {\r\n\t\t\temit AddLiquidity(tokenAmount, nativeAmount);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tcatch (bytes memory) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../extensions/ERC20Burnable.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - Preminted initial supply\n *  - Ability for holders to burn (destroy) their tokens\n *  - No access control mechanism (for minting/pausing) and hence no governance\n *\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\n * its documentation for details.\n *\n * _Available since v3.4._\n */\ncontract ERC20PresetFixedSupply is ERC20Burnable {\n    /**\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 initialSupply,\n        address owner\n    ) ERC20(name, symbol) {\n        _mint(owner, initialSupply);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakePair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IPancakePair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@pancakeswap-libs/pancake-swap-core/contracts/interfaces/IPancakeFactory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "pancakeswap-peripheral/contracts/interfaces/IPancakeRouter02.sol": {
      "content": "pragma solidity >=0.6.2;\r\n\r\nimport './IPancakeRouter01.sol';\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "pancakeswap-peripheral/contracts/interfaces/IPancakeRouter01.sol": {
      "content": "pragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}